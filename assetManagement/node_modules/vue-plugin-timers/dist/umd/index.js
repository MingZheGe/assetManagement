(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue-class-component')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue-class-component'], factory) :
  (factory((global.VueTimers = {}),global['vue-class-component']));
}(this, (function (exports,vueClassComponent) { 'use strict';

  var ComponentTimer = /** @class */ (function () {
      function ComponentTimer(methodName, interval, repeat, args) {
          if (interval === void 0) { interval = 1000; }
          if (repeat === void 0) { repeat = false; }
          this.repeat = false;
          this.interval = 1000;
          this.timerId = -1;
          this.repeat = repeat;
          this.interval = interval;
          this.methodName = methodName;
          this.state = 'created';
          this.args = args;
      }
      ComponentTimer.prototype.start = function () {
          var _this = this;
          if (this.state === 'running' || this.state === 'expired') {
              return;
          }
          if (this.repeat) {
              this.timerId = setInterval(function () {
                  _this.args ? _this.method.apply(_this, _this.args()) : _this.method();
              }, this.interval);
              this.state = 'running';
          }
          else {
              this.timerId = setTimeout(function () {
                  _this.args ? _this.method.apply(_this, _this.args()) : _this.method();
                  _this.state = 'expired';
              }, this.interval);
              this.state = 'running';
          }
      };
      ComponentTimer.prototype.stop = function () {
          if (this.repeat) {
              clearInterval(this.timerId);
          }
          else {
              clearTimeout(this.timerId);
          }
          this.state = 'stopped';
      };
      ComponentTimer.prototype.setVM = function (vm) {
          this.vm = vm;
          if (!this.vm[this.methodName]) {
              throw new Error('ERR_METHOD_NOT_FOUND: Method name in timer is probably wrong');
          }
          this.method = this.vm[this.methodName].bind(this.vm);
          if (this.args) {
              this.args = this.args.bind(this.vm);
          }
      };
      return ComponentTimer;
  }());

  var VueTimersMixin = {
      data: function () {
          var _this = this;
          if (!this.$options.timers) {
              return {};
          }
          else {
              return {
                  timers: Object.keys(this.$options.timers).map(function (key) {
                      return new ComponentTimer(key, _this.$options.timers[key].interval, _this.$options.timers[key].repeat, _this.$options.timers[key].args);
                  })
              };
          }
      },
      created: function () {
          if (!this.timers)
              return;
          var vm = this;
          var timers = this.timers;
          timers.forEach(function (timer) { return timer.setVM(vm); });
          // @ts-ignore
          vm.$timers = {
              start: function () {
                  timers.forEach(function (timer) {
                      console.log("start: " + timer.methodName + " " + timer.state);
                      timer.start();
                  });
              },
              stop: function () {
                  timers.forEach(function (timer) {
                      console.log("stop: " + timer.methodName + " " + timer.state);
                      timer.stop();
                  });
              }
          };
      },
      mounted: function () {
          if (!this.timers) {
              return;
          }
          this.$timers.start();
      },
      beforeDestroy: function () {
          if (!this.timers) {
              return;
          }
          this.$timers.stop();
      }
  };

  function index (Vue) {
      Vue.mixin(VueTimersMixin);
  }

  exports.VueTimersMixin = VueTimersMixin;
  exports.default = index;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
