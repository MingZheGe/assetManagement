//数据分析类
//小程序版本

function JSAnalyzeResource() {
    this.Domain = "https://opensource.zealink.com";               //API域名
    this.CacheDomain = "https://opensourcecache.zealink.com";     //缓存域名
    this.CDNCacheDomain = "https://opensourcecdn.zealink.com";             //OSS回源CDN域名
}

var g_JSAnalyzeResource = new JSAnalyzeResource();

//分析工具类型枚举
var ANALYZE_TYPE =
    {
        PLATE_INVESTORRELATIONS_ANALYZE_ID: 1,      //板块机构调研统计
        STOCK_INVESTORRELATIONS_ANALYZE_ID: 2,      //个股机构调研统计
        A_STOCK_PLEDGE_ANALYZE_ID: 3,                //A股股权质押排名
        PLEDGE_ANALYZE_ID: 4,                        //股权质押分析
        STOCK_ANALYZE_ID: 5,                          //个股分析
        BENFORD_ANALYZE_ID: 6                        //财务粉饰
    }


function JSAnalyze() {

}

JSAnalyze.SetDomain = function (domain, cacheDomain, cdnDomain) {
    if (domain) g_JSAnalyzeResource.Domain = domain;
    if (cacheDomain) g_JSAnalyzeResource.CacheDomain = cacheDomain;
    if (cdnDomain) g_JSAnalyzeResource.CDNCacheDomain;
}

JSAnalyze.GetAnalyzeControl = function (type) {
    let analyzeMap = new Map(
        [
            //类工厂
            [ANALYZE_TYPE.PLATE_INVESTORRELATIONS_ANALYZE_ID, {
                Create: function () {
                    return new PlateInvestorRelationsAnalyze()
                }, Name: '板块机构调研统计'
            }],
            [ANALYZE_TYPE.STOCK_INVESTORRELATIONS_ANALYZE_ID, {
                Create: function () {
                    return new StockInvestorRelationsAnalyze()
                }, Name: '个股机构调研统计'
            }],
            [ANALYZE_TYPE.A_STOCK_PLEDGE_ANALYZE_ID, {
                Create: function () {
                    return new AStockPledgeAnalyze()
                }, Name: 'A股股权质押排名'
            }],
            [ANALYZE_TYPE.PLEDGE_ANALYZE_ID, {
                Create: function () {
                    return new PledgeAnalyze()
                }, Name: '股权质押分析'
            }],
            [ANALYZE_TYPE.STOCK_ANALYZE_ID, {
                Create: function () {
                    return new StockAnalyze()
                }, Name: '个股分析'
            }],
            [ANALYZE_TYPE.BENFORD_ANALYZE_ID, {
                Create: function () {
                    return new BenfordAnalyze()
                }, Name: '财务粉饰分析'
            }]
        ]);

    if (!analyzeMap.has(type)) return null;

    return analyzeMap.get(type).Create();
}


function IAnalyzeBase() {
    this.Data;
    this.Callback;      //UI回调
    this.ApiUrl;

    //函数定义
    this.RequestData = function () {
    }   //数据请求函数

    //私有函数
    this.RecvData = function (data) {
    }

    this.RecvError = function (request) {
        console.log("[IAnalyzeBase::RecvError] ", request)
    }
}

//板块机构调研排名
function PlateInvestorRelationsAnalyze() {
    this.newMethod = IAnalyzeBase;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSAnalyzeResource.Domain + '/API/InvestorRelationsAnalyze';
    // this.ApiUrl = 'https://data.zealink.com/API/InvestorRelationsAnalyze';
    this.PlateType = 1;       //板块类型(0 地区 1 行业 2 概念 5 申万二级 6 申万三级)
    this.QueryDate = {StartDate: 20180701, EndDate: 20180724};
    this.Count = 10;            //返回前几的数据
    this.TotalDataCount = 0;    //调研的一共的数据个数

    this.RequestData = function () {
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: {
                "platetype": this.PlateType,
                "date": this.QueryDate,
                "count": this.Count
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvData(data);
            },
            fail: function (request) {
                self.RecvError(request);
            }
        });
    }

    this.RecvData = function (recvData) {
        this.Data = [];
        this.TotalDataCount = 0;

        let data = recvData.data;
        if (!data || !data.data) return;
        let dataCount = data.datacount;
        for (let i in data.data) {
            let item = data.data[i];
            let value2 = 0;
            if (dataCount > 0) value2 = item[3] / dataCount * 100;  //占比
            this.Data.push({Index: item[0], Symbol: item[1], Name: item[2], Value: item[3], Value2: value2});
        }
        this.TotalDataCount = dataCount;

        if (typeof (this.Callback) == 'function') this.Callback(this);
    }

}

//个股机构调研排名
function StockInvestorRelationsAnalyze() {
    this.newMethod = IAnalyzeBase;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSAnalyzeResource.Domain + '/API/InvestorRelationsList';
    this.QueryDate = {StartDate: 20180701, EndDate: 20180724};
    this.Count = 10;          //返回前几的数据
    this.TotalDataCount = 0;    //调研的一共的数据个数

    this.RequestData = function () {
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: {
                "querydate": this.QueryDate,
                "aggregate": this.Count,
                "start": 0,
                "end": 1,
                "filed": ["symbol"],
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvData(data);
            },
            fail: function (request) {
                self.RecvError(request);
            }
        });
    }

    this.RecvData = function (recvData) {
        this.Data = [];
        this.TotalDataCount = 0;
        let data = recvData.data;
        if (!data || !data.aggregate) return;
        let dataCount = data.count;
        for (let i in data.aggregate) {
            let item = data.aggregate[i];
            let value2 = 0;
            if (dataCount > 0) value2 = item.count / dataCount * 100;  //占比
            this.Data.push({
                Index: parseInt(i) + 1,
                Symbol: item.value,
                Name: item.value2,
                Value: item.count,
                Value2: value2
            });
        }

        this.TotalDataCount = dataCount;

        if (typeof (this.Callback) == 'function') this.Callback(this);
    }

}

//A股股权质押排名
function AStockPledgeAnalyze() {
    this.newMethod = IAnalyzeBase;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSAnalyzeResource.CacheDomain + '/cache/analyze/pledgeanalyze/astockpledgeanalyze.json';

    this.RequestData = function () {
        let nowDate = new Date();
        let version = (nowDate.getDay() + 1) * 100 + (nowDate.getHours() + 1);  //日期+小时 确保每个小时会取新的
        var self = this;
        wx.request({
            url: this.ApiUrl + '?version=' + version,
            method: 'GET',
            success: function (data) {
                self.RecvData(data);
            },
            fail: function (request) {
                self.RecvError(request);
            }
        });
    }

    this.RecvData = function (recvData) {
        this.Data = [];
        let data = recvData.data;
        if (!data || !data.stock) return;
        for (let i in data.stock) {
            let item = data.stock[i];
            let stock = {Name: item.name, Symbol: item.symbol, Pledge: {}};
            stock.Pledge.Prop = item.pledge.prop;
            stock.Pledge.Shheldeprop = item.pledge.shheldeprop;
            stock.Pledge.Shprop = item.pledge.shprop;
            this.Data.push(stock);
        }
        if (typeof (this.Callback) == 'function') this.Callback(this);
    }
}

//股权质押分析
function PledgeAnalyze() {
    this.newMethod = IAnalyzeBase;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSAnalyzeResource.Domain + '/api/PledgeAnalyze';
    this.PlateType = -1;      //统计的板块类型id 0 地区 1 行业 2 概念 5 申万二级 6 申万三级
    this.IsShHeldPropDistribute = false;  //是否计算大股东股权质押分布
    this.CalculateTypye = 0;  //0 质押均值 1 >50%占比
    this.Count = 10;          //返回数据个数

    this.RequestData = function () {
        this.Data = {};
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: {
                "platetype": this.PlateType,
                "isshheldpropdistribute": this.IsShHeldPropDistribute,
                "calculatetypye": this.CalculateTypye,
                "count": this.Count
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvData(data);
            },
            fail: function (request) {
                self.RecvError(request);
            }
        });
    }

    this.RecvData = function (recvData) {
        let data = recvData.data;

        //质押比例 未质押比例
        this.Data.Prop = data.prop;
        this.Data.UnProp = data.unprop;

        this.Data.Data = [];
        if (data.data) {
            for (let i in data.data) {
                let item = data.data[i];
                this.Data.Data.push({Name: item[1], Symbol: item[0], Value: item[2]});
            }
        }

        if (data.distribute) {
            this.Data.Distribute = data.distribute;
        }

        if (this.Callback) this.Callback(this);

    }

}


//财务粉饰板块分析
//股权质押分析
function BenfordAnalyze() {
    this.newMethod = IAnalyzeBase;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSAnalyzeResource.Domain + '/api/BenfordAnalyze';
    this.PlateType = 0;      //统计的板块类型id 0 地区 1 行业 2 概念 5 申万二级 6 申万三级
    this.CalculateTypye = 0;      //0 行业均值 1 >6占比
    this.Count = 10;          //返回数据个数


    this.Highrisk;  //高风险占比 没有*100

    this.RequestData = function () {
        this.Data = [];
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: {
                "platetype": this.PlateType,
                "count": this.Count,
                'calculatetypye': this.CalculateTypye
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvData(data);
            },
            fail: function (request) {
                self.RecvError(request);
            }
        });
    }

    this.RecvData = function (recvData) {
        let data = recvData.data;

        this.Highrisk = data.highrisk;
        for (let i in data.data) {
            let item = data.data[i];
            this.Data.push({Name: item[1], Symbol: item[0], Value: item[2]});
        }

        if (this.Callback) this.Callback(this);
    }

}

//个股分析
function StockAnalyze() {
    this.newMethod = IAnalyzeBase;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSAnalyzeResource.Domain + '/api/Stock';
    this.Symbol;    //股票列表
    this.Field;     //传进来
    // =["name","symbol",
    //     "pledge",   //股权质押
    //     "margin.rate","margin.balance", //rate=融资占比 balance=融资余额
    //     "analyse","finance.avgbenford",
    //     "industry","region",             //行业 地区
    //     "year.1"
    // ];
    this.RequestData = function (inputData) {
        this.Data = [];
        let self = this;

        var data = {
            "field": this.Field,
            "symbol": this.Symbol,
            "start": 0,
            "end": this.Symbol.length
        }

        data = inputData ? inputData : data;
        wx.request({
            url: this.ApiUrl,
            data: data,
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data);
            },
            error: function (request) {
                self.RecvError(request);
            }
        });
    }

    this.RecvData = function (recvData) {
        let data = recvData.data;
        console.log('[StockAnalyze::RecvData]', data);

        for (let i in data.stock) {
            let stock = data.stock[i];
            let item = {Name: stock.name, Symbol: stock.symbol};

            //股权质押
            if (stock.pledge) {
                item.Pledge =
                    {
                        Prop: stock.pledge.prop,                //累计质押比例%
                        ShProp: stock.pledge.shprop,            //控股股东累计质押比%
                        ShHeldProp: stock.pledge.shheldeprop,    //控股股东累计质押数量占持股比例%
                        Unsalevol: stock.pledge.unsalevol,       //质押数量\n(万股)
                        Vol: stock.pledge.vol                    //无限售质押\n数量(万股)
                    };
            }

            //财务粉饰
            if (stock.finance) {
                if (stock.finance.avgbenford != null) item.AvgBenford = stock.finance.avgbenford;
                if (stock.finance.eps != null) item.financeEPS = stock.finance.eps; //滚动eps
                if (stock.finance.benford != null) item.financeBenford = stock.finance.benford; //最新
                if (stock.finance.benford3year != null) item.finance3year = stock.finance.benford3year; //3年均
                if (stock.finance.benfordyear != null) item.financeYear = stock.finance.benfordyear; //1年均
            }

            if (stock.analyse) {
                for (let j in stock.analyse) {
                    let analyzeItem = stock.analyse[j];
                    switch (analyzeItem.name) {
                        case "限售解禁":
                            item.Lifting = this.GetLiftingData(analyzeItem.value);
                            break;
                    }
                }
            }

            //融资融券
            if (stock.margin) {
                item.Margin =
                    {
                        Rate: stock.margin.rate,        //融资占比
                        Balance: stock.margin.balance,   //融资余额
                        YearMax: stock.margin.yearmax,  //一年最高
                        Average: stock.margin.average,  //行业均值
                    };
            }

            if (stock.industry) {
                item.Industry = [];
                for (let j in stock.industry) {
                    let industry = stock.industry[j];
                    item.Industry.push({Symbol: industry.symbol, Name: industry.name});
                }
            }

            if (stock.region) {
                item.Region = {Symbol: stock.region[0].symbol, Name: stock.region[0].name};
            }

            //今年以来涨幅
            if (stock.year) {
                item.Year1 = stock.year.year1.toFixed(2);
            }

            //eps
            if (stock.eps) {
                item.EPS = stock.eps.toFixed(2);
            }

            //债券对应的公司代码
            if (stock.company) {
                item.Bondsymbol = stock.company.bondsymbol;
                item.Bondfullname = stock.company.bondfullname;
                item.Bondname = stock.company.bondname;
            }

            //信托
            if (stock.top10holder) {
                var List = [], Details = [], total = 0, rate = 0;
                stock.top10holder.list.map(e => {
                    if (e.name.includes("信托")) {
                        total++;
                        rate = Number.parseFloat((100 * rate + 100 * e.rate) / 100).toFixed(2);
                        List.push(e.name);
                        Details.push(e);
                    }
                    Object.assign(item, {
                        Top10Holder: stock.top10holder,
                        Top10TrustHolder: {
                            List: List,
                            Total: total,
                            Rate: rate,
                            Details: Details
                        }
                    });
                });
            }

            //限售解禁
            if (stock.lifting) {
                item.Lifting = stock.lifting;
            }

            //财务风险
            if (stock.factor) {
                // console.log("stock.factor", stock.factor);
                item.FactorName = [];
                for (var j in stock.factor) {
                    if (stock.factor[j].value == 1) {
                        item.FactorName.push(stock.factor[j].name);
                    }
                }
            }
            this.Data.push(item);
        }

        if (this.Callback) this.Callback(this);
    }


    this.GetLiftingData = function (aryLifting) {
        let data = [];
        for (let i in aryLifting) {
            let aryValue = aryLifting[i].split('  ');
            let item = {};
            for (let j in aryValue) {
                let value = aryValue[j];
                if (value.indexOf('解禁数量:') == 0)
                    item.Vol = parseFloat(value.replace('解禁数量:', ''));
                else if (value.indexOf('解禁比例:') == 0)
                    item.Rate = parseFloat(value.replace('解禁比例:', ''));
                else if (value.indexOf('解禁日期:') == 0)
                    item.Date = parseInt(value.replace('解禁日期:', ''));
            }
            data.push(item);
        }

        return data;
    }
}


//导出统一使用JSCommon命名空间名
module.exports =
    {
        JSCommonAnalyze: {
            JSAnalyze: JSAnalyze,
            ANALYZE_TYPE: ANALYZE_TYPE,
        }
    };