////////////////////////////////////////////////////////////////////////////////////////
//  股票数据
//
///////////////////////////////////////////////////////////////////////////////////////

function JSStockResource() {
    this.Domain = "https://opensource.zealink.com";               //API域名
    this.CacheDomain = "https://opensourcecache.zealink.com";     //缓存域名
}

var g_JSStockResource = new JSStockResource();

//领涨领跌
function IndexTopData() {
    this.Stop;      //停牌
    this.Down;      //下跌
    this.Up;        //上涨
    this.Unchanged; //平盘
    this.UpStock = {"Symbol": null, "Name": null};    //领涨
    this.DownStock = {"Symbol": null, "Name": null};  //领跌
}

function IndexHeatData() {
    this.Good;  //健康度
    //this.Date;  //日期
    this.GoodIncrease = {"Day1": null, 'Week1': null, "Week4": null};  //周涨幅
}

JSStock.CreateGuid=function()
{
    return Guid();
}

function Guid()
{
    function S4()
    {
       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    }
    return "guid" + (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}

function SortData(field, order, tagID) {
    this.arySymbol = new Array();         //成分
    this.SortField = field;               //排序字段
    this.Order = order;                   //1 降, -1 升
    this.TagID = new Set([tagID]);        //绑定的元素id
}

//财务数据基础数据
function FinanceData() {
    this.ROE;           //净资产收益率

    this.Date;          //报告日期,
    this.PerSEarning;   //每股收益
    this.EPS;           //滚动每股收益
    this.PerNetAsset;   //每股净资产

    this.NProfit;       //净利润
    this.NProfitIncrease;   //净利润涨幅 （当年净利润-上一年）/上一年*100

    this.NnetProfit;        //扣非净利润
    this.NnProfitIncrease;  //扣非净利润涨幅  （当年扣非净利润-上一年）/上一年*100
    this.NnProfitSpeed;     //扣非净利润涨速  （当前扣非净利润/上一年-1）/（上一年/上上年-1）

    this.Benford;             //财务粉饰
    this.Benfordyear;         //1年均
    this.Benford3year         //3年均
    this.AverageBenford;      //财务粉饰均值
    this.PEG;                 //市盈增长比率

    //TODO:财务数据要了后面再加

    this.SetData = function (data) {
        if (!isNaN(data.roe)) this.ROE = data.roe;
        if (!isNaN(data.finance.date)) this.Date = data.finance.date;
        if (!isNaN(data.finance.persearning)) this.PerSEarning = data.finance.persearning;
        if (!isNaN(data.finance.eps)) this.EPS = data.finance.eps;
        if (!isNaN(data.finance.pernetasset)) this.PerNetAsset = data.finance.pernetasset;
        if (!isNaN(data.finance.nprofit)) this.NProfit = data.finance.nprofit;
        if (!isNaN(data.finance.nprofitincrease)) this.NProfitIncrease = data.finance.nprofitincrease;
        if (!isNaN(data.finance.nnetprofit)) this.NnetProfit = data.finance.nnetprofit;
        if (!isNaN(data.finance.nnprofitincrease)) this.NnProfitIncrease = data.finance.nnprofitincrease;
        if (!isNaN(data.finance.nnprofitspeed)) this.NnProfitSpeed = data.finance.nnprofitspeed;
        if (!isNaN(data.finance.benford)) this.Benford = data.finance.benford;
        if (!isNaN(data.peg)) this.PEG = data.peg;
        if (!isNaN(data.finance.avgbenford)) this.AverageBenford = data.finance.avgbenford;
        if (!isNaN(data.finance.benfordyear)) this.Benfordyear = data.finance.benfordyear;
        if (!isNaN(data.finance.benford3year)) this.Benford3year = data.finance.benford3year;
        // if (!isNaN(data.finance.percreserve)) this.Percreserve = data.finance.percreserve;
    }
}

//财务数据详细数据
function FinanceDetailData() {
    this.Percreserve;   //每股资本公积金    (capital reserve)FINANCE_PERCRESERVE
    this.Peruprofit;        //每股未分配利润
    this.Perccfo;           //每股经营性现金流
    this.Orevenues;         //营业总收入
    this.MOprofit;          //主营业务利润
    this.OProfit;           //营业利润
    this.Grossmargin;       //毛利率
    this.Areceivable;       //应收账款
    this.Financialcost;     //财务费用
    this.Ccfo;              //经营性现金流
    this.Totalassets;       //资产总计
    this.Totalliabilities;  //负债总计
    this.Totalownersequity; //所有者权益总计
    this.Currentassets;     //流动资产
    this.Monetaryfunds;     //货币资金
    this.Inventory;         //存货
    this.Currentliabilities; //流动负债
    this.Ncurrentliabilities; //非流动负债
    this.Expenses3;       //三项费用(销售费用,管理费用和财务费用)
    this.Investmentincome;    //投资收益
    this.Pcnprofit;         //归母净利润
    this.Nnetprofit;        //扣非净利润
    this.Npersearning;      //扣非每股收益
    this.Woewa;             //加权平均净资产收益率
    this.Inprocess;         //在建工程(Construction-in-process)
    this.Accdepreciation;   //累计折旧 (accumulated depreciation)

    this.SetData = function (data) {
        if (!isNaN(data.finance.percreserve)) this.Percreserve = data.finance.percreserve;
        if (!isNaN(data.finance.peruprofit)) this.Peruprofit = data.finance.peruprofit;
        if (!isNaN(data.finance.perccfo)) this.Perccfo = data.finance.perccfo;
        if (!isNaN(data.finance.orevenues)) this.Orevenues = data.finance.orevenues;
        if (!isNaN(data.finance.moprofit)) this.MOprofit = data.finance.moprofit;
        if (!isNaN(data.finance.oprofit)) this.OProfit = data.finance.oprofit;
        if (!isNaN(data.finance.grossmargin)) this.Grossmargin = data.finance.grossmargin;
        if (!isNaN(data.finance.areceivable)) this.Areceivable = data.finance.areceivable;
        if (!isNaN(data.finance.financialcost)) this.Financialcost = data.finance.financialcost;
        if (!isNaN(data.finance.ccfo)) this.Ccfo = data.finance.ccfo;
        if (!isNaN(data.finance.totalassets)) this.Totalassets = data.finance.totalassets;
        if (!isNaN(data.finance.totalliabilities)) this.Totalliabilities = data.finance.totalliabilities;
        if (!isNaN(data.finance.totalownersequity)) this.Totalownersequity = data.finance.totalownersequity;
        if (!isNaN(data.finance.currentassets)) this.Currentassets = data.finance.currentassets;
        if (!isNaN(data.finance.monetaryfunds)) this.Monetaryfunds = data.finance.monetaryfunds;
        if (!isNaN(data.finance.inventory)) this.Inventory = data.finance.inventory;
        if (!isNaN(data.finance.currentliabilities)) this.Currentliabilities = data.finance.currentliabilities;
        if (!isNaN(data.finance.ncurrentliabilities)) this.Ncurrentliabilities = data.finance.ncurrentliabilities;
        if (!isNaN(data.finance.expenses3)) this.Expenses3 = data.finance.expenses3;
        if (!isNaN(data.finance.investmentincome)) this.Investmentincome = data.finance.investmentincome;
        if (!isNaN(data.finance.pcnprofit)) this.Pcnprofit = data.finance.pcnprofit;
        if (!isNaN(data.finance.nnetprofit)) this.Nnetprofit = data.finance.nnetprofit;
        if (!isNaN(data.finance.npersearning)) this.Npersearning = data.finance.npersearning;
        if (!isNaN(data.finance.woewa)) this.Woewa = data.finance.woewa;
        if (!isNaN(data.finance.inprocess)) this.Inprocess = data.finance.inprocess;
        if (!isNaN(data.finance.accdepreciation)) this.Accdepreciation = data.finance.accdepreciation;
    }
}

//公司资料
function CompanyData() {
    this.Name;
    this.Business;  //主营业务
    this.Vol;       //发行量
    this.Price;     //发行价格
    this.ReleaseDate; //上市日期
    this.Competence;  //核心竞争力

    this.SetData = function (data) {
        if (!data.company) return;

        this.Name = data.company.name;
        this.Business = data.company.business;
        this.Vol = data.company.vol;
        this.Price = data.company.price;
        this.ReleaseDate = data.company.releasedate;
        this.Competence = data.company.corecompetence;
    }
}


//板块信息
function PlateData() {
    this.Industry;  //行业分类
    this.Region;    //地区
    this.Concept;   //概念

    this.SetData = function (data) {
        this.SetIndustryData(data);
        this.SetRegionData(data);
        this.SetConceptData(data);
    }

    this.SetIndustryData = function (data) {
        if (!data.industry) return

        this.Industry = [];
        for (let i in data.industry) {
            let item = data.industry[i];
            this.Industry.push({Name: item.name, Symbol: item.symbol});
        }
    }

    this.SetRegionData = function (data) {
        if (!data.region) return

        this.Region = [];
        for (let i in data.region) {
            let item = data.region[i];
            this.Region.push({Name: item.name, Symbol: item.symbol});
        }
    }

    this.SetConceptData = function (data) {
        if (!data.concept) return

        this.Concept = [];
        for (let i in data.concept) {
            let item = data.concept[i];
            this.Concept.push({Name: item.name, Symbol: item.symbol});
        }
    }
}

//股权质押
function PledgeData() {
    this.Prop;        //累计质押比例%(proportion)
    this.SHProp;      //控股股东累计质押比%(shareholder proportion)
    this.SHHeldeProp; //控股股东累计质押数量占持股比例% (shareholder held proportion)
    this.UnSaleVol;     //无限售质押数量
    this.SaleVol;       //质押数量
    this.Vol;           //质押数量

    this.SetData = function (data) {
        if (!data.pledge) return;

        if (!isNaN(data.pledge.prop)) this.Prop = data.pledge.prop;
        if (!isNaN(data.pledge.shprop)) this.SHProp = data.pledge.shprop;
        if (!isNaN(data.pledge.shheldeprop)) this.SHHeldeProp = data.pledge.shheldeprop;
        if (!isNaN(data.pledge.unsalevol)) this.UnSaleVol = data.pledge.unsalevol;
        if (!isNaN(data.pledge.salevol)) this.SaleVol = data.pledge.salevol;
        if (!isNaN(data.pledge.vol)) this.Vol = data.pledge.vol;
    }
}

//年涨幅
function YearData() {
    this.Year1;        //今年以来

    this.SetData = function (data) {
        if (!data.year) return;

        if (!isNaN(data.year.year1)) this.Year1 = data.year.year1;
    }
}

//事件,属性
function EventData() {
    this.IsMargin;        //是否是融资融券标题
    this.IsHK=false;            //是否有港股
    this.IsSHHK=false;          //沪港通
    this.IsSZHK=false;          //深股通
    this.STType=0;              //St标识（0：正常股票，1：st股票，2：*st股票）
    this.HK;                    //港股信息 { Symbol:代码 Name:名称 }

    this.SetData = function (data) {
        if (!data.events) return;

        if (!isNaN(data.events.margin)) this.IsMargin = data.events.margin == 1;
        if (!isNaN(data.events.hk)) this.IsHK = data.events.hk == 1;
        if (!isNaN(data.events.shhk)) this.IsSHHK = data.events.shhk == 1;
        if (!isNaN(data.events.szhk)) this.IsSZHK = data.events.szhk == 1;
        if (!isNaN(data.events.st)) this.STType = data.events.st;

        if (this.IsHK && data.events.hksymbol && data.events.hkname)
        {
            this.HK={ Symbol:data.events.hksymbol, Name:data.events.hkname };
        }
    }

}

//资金流(当日)
function CapitalFlowDayData()
{
    this.SuperIn;   //超大单流入
    this.SuperOut;  //超大单流出
    this.BigIn;     //大单流入
    this.BigOut;    //大单流出
    this.MidIn;     //中单流入
    this.MidOut;    //中单流出
    this.SmallIn;   //小单流入
    this.SmallOut;  //小单流出
    this.MainIn;    //主力流入
    this.MainOut;   //主力流出
    this.MainNetIn; //主力净流入

    this.SetData = function (data) 
    {
        this.SuperIn=data.superin;
        this.SuperOut = data.superout;
        this.BigIn = data.bigin;     
        this.BigOut = data.bigout;    
        this.MidIn = data.midin;
        this.MidOut=data.midout;
        this.SmallIn = data.smallin;   //小单流入
        this.SmallOut = data.smallout;  //小单流出
        this.MainIn = data.mainin;    //主力流入
        this.MainOut = data.mainout;   //主力流出
        this.MainNetIn = data.mainnetin; //主力净流入
    }
}

//资金流(多日)
function CapitalFlowDaysData() 
{
    this.SuperIn;           //超大单流入
    this.SuperOut;          //超大单流出
    this.BigIn;             //大单流入
    this.BigOut;            //大单流出
    this.MidIn;             //中单流入
    this.MidOut;            //中单流出
    this.SmallIn;           //小单流入
    this.SmallOut;          //小单流出
    this.MainIn;            //主力流入
    this.MainOut;           //主力流出
    this.MainNetIn;         //主力净流入
    this.MainNetInRatio;    //多日日主力净流占比

    this.SetData = function (data) {
        this.SuperIn = data.superin;
        this.SuperOut = data.superout;
        this.BigIn = data.bigin;
        this.BigOut = data.bigout;
        this.MidIn = data.midin;
        this.MidOut = data.midout;
        this.SmallIn = data.smallin;   //小单流入
        this.SmallOut = data.smallout;  //小单流出
        this.MainIn = data.mainin;    //主力流入
        this.MainOut = data.mainout;   //主力流出
        this.MainNetIn = data.mainnetin; //主力净流入
        this.MainNetInRatio = data.mainnetinratio;
    }
}

function DDEData()
{
    this.DDX;
    this.DDY;
    this.DDZ;

    this.SetData=function(data)
    {
        this.DDX=data.ddx;
        this.DDY=data.ddy;
        this.DDZ=data.ddz;
    }
}



function StockData(symbol) {
    this.Symbol = symbol;     //股票代码
    this.Name;              //股票名称

    //基础数据
    this.Open;      //开盘
    this.Price;     //最新
    this.High;      //最高
    this.Low;       //最低
    this.YClose;    //前收盘
    this.Vol        //成交量
    this.Amount;    //成交金额
    this.Date;      //交易日期
    this.Time;      //交易时间
    this.ExchangeRate;  //换手率
    this.Amplitude;     //振幅

    this.Increase;  //涨幅
    this.MaxPrice;  //涨停价
    this.MinPrice;  //跌停价
    this.RFPrice    //涨跌额 (Price-YClose)

    this.IndexTop;  //涨跌家数
    this.Week;      //周涨幅

    this.MinuteAmplitude = {};  //1,5,15,30 振幅
    this.RiseFallSpeed = {};    //1,5,15,30分钟涨速


    this.Heat;      //热度
    //获取热度数据,不要直接使用变量获取
    this.GetHeatData = function (tagID) {
        this.HeatTagID.add(tagID);
        return this.Heat;
    }

    //成分排序
    this.Sort = new Map();   //key=排序字段-排序方式 value=SortData 一个控件之能有1个排序规则
    this.GetSortData = function (tagID, field, order) {
        var key = field.toString() + '-' + order.toString();
        if (!this.Sort.has(key)) {
            var data = new SortData(field, order, tagID);
            this.Sort.set(key, data);
            return data;
        }

        var data = this.Sort.get(key);
        data.TagID.add(tagID);
        return data;
    }

    this.Buy5;  //五档买
    this.GetBuy5 = function (tagID) {
        this.BuySellTagID.add(tagID);
        return this.Buy5;
    }

    this.Sell5; //五档卖
    this.GetSell5 = function (tagID) {
        this.BuySellTagID.add(tagID);
        return this.Sell5;
    }

    this.Deal;  //分笔 最新10条
    this.GetDeal = function (tagID) {
        this.DealTagID.add(tagID);
        return this.Deal;
    }

    this.MarketValue;       //总市值
    this.FlowMarketValue;   //流通市值
    this.Bookrate;          //委比
    this.Bookdiffer;        //委差
    this.PE;
    this.PB;
    this.FlowIn;    //资金流入
    this.FlowOut;   //资金流出
    this.GetDerivative = function (tagID, field) {
        this.DerivativeTagID.add(tagID);

        switch (field) {
            case STOCK_FIELD_NAME.MARKET_VALUE:
                return this.MarketValue;
            case STOCK_FIELD_NAME.FLOW_MARKET_VALUE:
                return this.FlowMarketValue;
            case STOCK_FIELD_NAME.BOOK_RATE:
                return this.Bookrate;
            case STOCK_FIELD_NAME.BOOK_DIFFER:
                return this.Bookdiffer;
            case STOCK_FIELD_NAME.PE:
                return this.PE;
            case STOCK_FIELD_NAME.PB:
                return this.PB;
            case STOCK_FIELD_NAME.FLOW_IN:
                return this.FlowIn;
            case STOCK_FIELD_NAME.FLOW_OUT:
                return this.FlowOut;
        }
    }


    this.Finance;           //财务数据
    this.GetFinance = function (tagID, field) {
        // console.log(this.Finance,"this.Finance11111");
        // console.log("财务数据", tagID, field);
        if (!this.Finance)  //只请求一次
        {
            this.FinanceTagID.add(tagID);
            return null;
        }

        // console.log(this.Finance.Date, "this.Finance11111")

        switch (field) {
            case STOCK_FIELD_NAME.ROE:
                return this.Finance.ROE;
            case STOCK_FIELD_NAME.FINANCE_DATE:
                return this.Finance.Date;
            case STOCK_FIELD_NAME.FINANCE_PERSEARNING:
                return this.Finance.PerSEarning;
            case STOCK_FIELD_NAME.FINANCE_PERNETASSET:
                return this.Finance.PerNetAsset;
            case STOCK_FIELD_NAME.FINANCE_NPROFIT:
                return this.Finance.NProfit;
            case STOCK_FIELD_NAME.FINANCE_NPROFITINCREASE:
                return this.Finance.NProfitIncrease;
            case STOCK_FIELD_NAME.FINANCE_NNETPROFIT:
                return this.Finance.NnetProfit;
            case STOCK_FIELD_NAME.FINANCE_NNPROFITINCREASE:
                return this.Finance.NnProfitIncrease;
            case STOCK_FIELD_NAME.FINANCE_NNPROFITSPEED:
                return this.Finance.NnProfitSpeed;
            case STOCK_FIELD_NAME.FINANCE_EPS:
                return this.Finance.EPS;
            case STOCK_FIELD_NAME.FINANCE_BENFORD:
                return this.Finance.Benford;
            case STOCK_FIELD_NAME.FINANCE_AVERAGE_BENFORD:
                return this.Finance.AverageBenford;
            case STOCK_FIELD_NAME.PEG:
                return this.Finance.PEG;
        }
    }

    this.FinanceDetail;           //财务数据
    this.GetFinanceDetail = function (tagID, field) {
        // console.log(this.FinanceDetail,'GetFinanceDetail:FinanceDetail')

        if (!this.FinanceDetail)  //只请求一次
        {
            this.FinanceDetailTagID.add(tagID);
            return null;
        }

        switch (field) {

            case STOCK_FIELD_NAME.FINANCE_PERCRESERVE:
                return this.FinanceDetail.Percreserve;

            case STOCK_FIELD_NAME.FINANCE_PERUPROFIT:
                return this.FinanceDetail.Peruprofit;

            case STOCK_FIELD_NAME.FINANCE_PERCCFO:
                return this.FinanceDetail.Perccfo;

            case STOCK_FIELD_NAME.FINANCE_OREVENUES:
                return this.FinanceDetail.Orevenues;

            case STOCK_FIELD_NAME.FINANCE_MOPROFIT:
                return this.FinanceDetail.MOprofit;

            case STOCK_FIELD_NAME.FINANCE_OPROFIT:
                return this.FinanceDetail.OProfit;

            case STOCK_FIELD_NAME.FINANCE_GROSSMARGIN:
                return this.FinanceDetail.Grossmargin;

            case STOCK_FIELD_NAME.FINANCE_ARECEIVABLE:
                return this.FinanceDetail.Areceivable;

            case STOCK_FIELD_NAME.FINANCE_FINANCIALCOST:
                return this.FinanceDetail.Financialcost;

            case STOCK_FIELD_NAME.FINANCE_CCFO:
                return this.FinanceDetail.Ccfo;

            case STOCK_FIELD_NAME.FINANCE_TOTALASSETS:
                return this.FinanceDetail.Totalassets;

            case STOCK_FIELD_NAME.FINANCE_TOTALLIABILITIES:
                return this.FinanceDetail.Totalliabilities;

            case STOCK_FIELD_NAME.FINANCE_TOTALOWNERSEQUITY:
                return this.FinanceDetail.Totalownersequity;

            case STOCK_FIELD_NAME.FINANCE_CURRENTASSETS:
                return this.FinanceDetail.Currentassets;

            case STOCK_FIELD_NAME.FINANCE_MONETARYFUNDS:
                return this.FinanceDetail.Monetaryfunds;

            case STOCK_FIELD_NAME.FINANCE_INVENTORY:
                return this.FinanceDetail.Inventory;

            case STOCK_FIELD_NAME.FINANCE_CURRENTLIABILITIES:
                return this.FinanceDetail.Currentliabilities;

            case STOCK_FIELD_NAME.FINANCE_NCURRENTLIABILITIES:
                return this.FinanceDetail.Ncurrentliabilities;

            case STOCK_FIELD_NAME.FINANCE_EXPENSES3:
                return this.FinanceDetail.Expenses3;

            case STOCK_FIELD_NAME.FINANCE_INVESTMENTINCOME:
                return this.FinanceDetail.Investmentincome;

            case STOCK_FIELD_NAME.FINANCE_PCNPROFIT:
                return this.FinanceDetail.Pcnprofit;

            case STOCK_FIELD_NAME.FINANCE_NNETPROFIT:
                return this.FinanceDetail.Nnetprofit;

            case STOCK_FIELD_NAME.FINANCE_NPERSEARNING:
                return this.FinanceDetail.Npersearning;

            case STOCK_FIELD_NAME.FINANCE_WOEWA:
                return this.FinanceDetail.Woewa;

            case STOCK_FIELD_NAME.FINANCE_INPROCESS:
                return this.FinanceDetail.Inprocess;

            case STOCK_FIELD_NAME.FINANCE_ACCDEPRECIATION:
                return this.FinanceDetail.Accdepreciation;

        }
    }

    this.Year;  //涨幅
    this.GetYear = function (tagID, field) {
        console.log("涨幅", tagID, field);
        if (!this.Year)  //只请求一次
        {
            this.YearTagID.add(tagID);
            return null;
        }

        switch (field) {
            case STOCK_FIELD_NAME.YEAR_YEAR1:
                return this.Year.Year1;
        }
    }

    this.Company;   //个股资料
    this.GetCompany = function (tagID, field) {
        if (!this.Company)  //只请求一次
        {
            this.CompanyTagID.add(tagID);
            return null;
        }

        switch (field) {
            case STOCK_FIELD_NAME.COMPANY_NAME:
                return this.Company.Name;
            case STOCK_FIELD_NAME.COMPANY_BUSINESS:
                return this.Company.Business;
            case STOCK_FIELD_NAME.COMPANY_VOL:
                return this.Company.Vol;
            case STOCK_FIELD_NAME.COMPANY_PRICE:
                return this.Company.Price;
            case STOCK_FIELD_NAME.COMPANY_RELEASEDATE:
                return this.Company.ReleaseDate;
            case STOCK_FIELD_NAME.COMPANY_COMPETENCE:
                return this.Company.Competence;
        }
    }

    this.Plate; //板块
    this.GetPlate = function (tagID, field) {
        if (!this.Plate)  //只请求一次
        {
            this.PlateTagID.add(tagID);
            return null;
        }

        switch (field) {
            case STOCK_FIELD_NAME.PLATE_INDUSTRY:
                return this.Plate.Industry;
            case STOCK_FIELD_NAME.PLATE_CONCEPT:
                return this.Plate.Concept;
            case STOCK_FIELD_NAME.PLATE_REGION:
                return this.Plate.Region;
        }
    }

    this.Pledge;  //股权质押
    this.GetPledge = function (tagID, field) {
        if (!this.Pledge) {
            this.PledgeTagID.add(tagID);
            return null;
        }

        switch (field) {
            case STOCK_FIELD_NAME.PLEDGE_PROPORTION:
                return this.Pledge.Prop;
            case STOCK_FIELD_NAME.PLEDGE_SHAREHOLDER_PROPORTION:
                return this.Pledge.SHProp;
            case STOCK_FIELD_NAME.PLEDGE_SHAREHOLDER_HELD_PROPORTION:
                return this.Pledge.SHHeldeProp;
        }
    }

    this.Event; //事件 属性
    this.GetEvent = function (tagID, field) {
        if (!this.Event) {
            this.EventTagID.add(tagID);
            return null;
        }

        switch (field) {
            case STOCK_FIELD_NAME.EVENT_IS_MARGIN:
                return this.Event.IsMargin;
        }
    }

    this.CapitalFlowDay;
    this.CapitalFlowDay3;
    this.CapitalFlowDay5;
    this.CapitalFlowDay10;
    this.GetCapitalFlowDay = function (tagID, field) 
    {
        let data=null;
        switch(field)
        {
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY:
                if (!this.CapitalFlowDay) this.CapitalFlowDayID.add(tagID);
                else data = this.CapitalFlowDay;
                break;
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY3:
                if (!this.CapitalFlowDay3) this.CapitalFlowDay3ID.add(tagID);
                else data = this.CapitalFlowDay3;
                break;
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY5:
                if (!this.CapitalFlowDay5) this.CapitalFlowDay5ID.add(tagID);
                else data = this.CapitalFlowDay5;
                break;
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY10:
                if (!this.CapitalFlowDay10) this.CapitalFlowDay10ID.add(tagID);
                else data = this.CapitalFlowDay10;
                break;
        }
        return data;
    }

    this.DDE;
    this.DDE3;
    this.DDE5;
    this.DDE10;
    this.GetDDE = function (tagID, field)
    {
        let data = null;
        switch (field) {
            case STOCK_FIELD_NAME.DDE:
                if (!this.DDE) this.DDEID.add(tagID);
                else data = this.DDE;
                break;
            case STOCK_FIELD_NAME.DDE3:
                if (!this.DDE3) this.DDE3ID.add(tagID);
                else data = this.DDE3;
                break;
            case STOCK_FIELD_NAME.DDE5:
                if (!this.DDE5) this.DDE5ID.add(tagID);
                else data = this.DDE5;
                break;
            case STOCK_FIELD_NAME.DDE10:
                if (!this.DDE10) this.DDE10ID.add(tagID);
                else data = this.DDE10;
                break;
        }
        return data;
    }

    this.TagID = new Set();       //绑定的控件id
    this.HeatTagID = new Set();   //需要热度的控件id
    this.BuySellTagID = new Set();//买卖盘的控件id
    this.DealTagID = new Set();   //分笔的控件id
    this.DerivativeTagID = new Set(); //衍生数据
    this.FinanceTagID = new Set();    //财务数据 (就请求1次)
    this.CompanyTagID = new Set();      //个股资料 (就请求1次)
    this.PlateTagID = new Set();        //板块 概念 地区
    this.FinanceDetailTagID = new Set();
    this.PledgeTagID = new Set();     //股权质押
    this.EventTagID = new Set();      //事件
    this.YearTagID = new Set();       //年涨幅
    this.CapitalFlowDayID=new Set();        //当日资金流
    this.CapitalFlowDay3ID = new Set();     //3日资金流
    this.CapitalFlowDay5ID = new Set();     //5日资金流
    this.CapitalFlowDay10ID = new Set();    //10日资金流
    this.DDEID=new Set();
    this.DDE3ID = new Set();
    this.DDE5ID = new Set();
    this.DDE10ID = new Set();

    this.AttachTagID = function (id) {
        this.TagID.add(id);
    }

    this.RemoveTagID = function (id) {
        this.TagID.delete(id);
        this.HeatTagID.delete(id);
        this.BuySellTagID.delete(id);
        this.DealTagID.delete(id);
        this.DerivativeTagID.delete(id);
        //this.FinanceTagID.delete(id);
        //this.CompanyTagID.delete(id);
        //this.PlateTagID.delete(id);
        //this.FinanceDetailTagID.delete(id);

        for (var item of this.Sort) {
            item[1].TagID.delete(id);
        }
    }

    //设置基础数据
    this.SetBaseData = function (data) {
        this.Name = data.name;
        this.YClose = data.yclose;
        this.Price = data.price;
        this.High = data.high;
        this.Low = data.low;
        this.Open = data.open;
        this.Vol = data.vol;
        this.Amount = data.amount;
        this.Date = data.date;
        this.Time = data.time;
        this.Increase = data.increase;
        if (!isNaN(data.exchangerate)) this.ExchangeRate = data.exchangerate;
        if (!isNaN(data.amplitude)) this.Amplitude = data.amplitude;

        if (this.Name.indexOf('ST') >= 0) {
            this.MaxPrice = (1 + 0.05) * this.YClose;
            this.MinPrice = (1 - 0.05) * this.YClose;
        }
        else {
            this.MaxPrice = (1 + 0.1) * this.YClose;
            this.MinPrice = (1 - 0.1) * this.YClose;
        }

        if (this.YClose != null && this.Price != null)
            this.RFPrice = this.Price - this.YClose;

        //周涨幅
        if (data.week) {
            this.Week = {};
            this.Week.Week1 = data.week.week1;
            this.Week.Week4 = data.week.week4;
            this.Week.Week13 = data.week.week13;
            this.Week.Week26 = data.week.week26;
            this.Week.Week52 = data.week.week52;
        }
    }

    this.SetDerivativeData = function (data) {
        this.MarketValue = data.marketvalue;           //总市值
        this.FlowMarketValue = data.flowmarketvalue;   //流通市值
        this.Bookrate = data.bookrate;                 //委比
        this.Bookdiffer = data.bookdiffer;            //委差
        this.PE = data.pe;
        this.PB = data.pb;
        this.FlowIn = data.flowin;
        this.FlowOut = data.flowout;
    }

    this.SetFinanceData = function (data) {
        // console.log(data,"SetFinanceData");

        if (!data.finance) return;

        this.Finance = new FinanceData();
        this.Finance.SetData(data);
    }

    this.SetYearData = function (data) {
        // console.log(data,"SetYearData");

        if (!data.year) return;

        this.Year = new YearData();
        this.Year.SetData(data);
    }

    this.SetFinanceDetailData = function (data) {
        if (!data.finance) return;

        this.FinanceDetail = new FinanceDetailData();
        this.FinanceDetail.SetData(data);
    }

    this.SetPledgeData = function (data) {
        if (!data.pledge) return;

        this.Pledge = new PledgeData();
        this.Pledge.SetData(data);
    }

    this.SetEventData = function (data) {
        if (!data.events) return;

        this.Event = new EventData();
        this.Event.SetData(data);
    }

    this.SetCapitalFlowDayData = function (data,datatype) 
    {
        if (!data) return;

        switch (datatype) {
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY_DATA:
                this.CapitalFlowDay=new CapitalFlowDayData();
                this.CapitalFlowDay.SetData(data);
                break;
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY3_DATA:
                this.CapitalFlowDay3 = new CapitalFlowDaysData();
                this.CapitalFlowDay3.SetData(data);
                break;
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY5_DATA:
                this.CapitalFlowDay5 = new CapitalFlowDaysData();
                this.CapitalFlowDay5.SetData(data);
                break;
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY10_DATA:
                this.CapitalFlowDay10 = new CapitalFlowDaysData();
                this.CapitalFlowDay10.SetData(data);
                break;
        }
    }

    this.SetDDE = function (data, datatype) 
    {
        if (!data) return;

        switch (datatype) 
        {
            case RECV_DATA_TYPE.DDE_DAY_DATA:
                this.DDE = new DDEData();
                this.DDE.SetData(data);
                break;
            case RECV_DATA_TYPE.DDE_DAY3_DATA:
                this.DDE3 = new DDEData();
                this.DDE3.SetData(data);
                break;
            case RECV_DATA_TYPE.DDE_DAY5_DATA:
                this.DDE5 = new DDEData();
                this.DDE5.SetData(data);
                break;
            case RECV_DATA_TYPE.DDE_DAY10_DATA:
                this.DDE10 = new DDEData();
                this.DDE10.SetData(data);
                break;
        }
        return data;
    }

    this.SetCompanyData = function (data) {
        // console.log(data);
        if (!data.company) return;

        this.Company = new CompanyData();
        this.Company.SetData(data);
    }

    this.SetPlateData = function (data) {
        if (!data.industry && !data.region && !data.concept) return;

        this.Plate = new PlateData();
        this.Plate.SetData(data);
    }

    //指数基础数据
    this.SetIndexBaseData = function (data) {
        this.SetBaseData(data);

        var topData = new IndexTopData();
        if (data.indextop) {
            topData.Up = data.indextop.up;
            topData.Down = data.indextop.down;
            topData.Unchanged = data.indextop.unchanged;
            topData.Stop = data.indextop.stop;

            topData.UpStock.Symbol = data.indextop.upstock.symbol;
            topData.UpStock.Name = data.indextop.upstock.name;

            topData.DownStock.Symbol = data.indextop.downstock.symbol;
            topData.DownStock.Name = data.indextop.downstock.name;
        }

        this.IndexTop = topData;
    }

    //五档买卖盘
    this.SetBuySellData = function (data) {
        this.SetBaseData(data);
        this.Buy5 = new Array();
        this.Sell5 = new Array();

        for (var i in data.buy) {
            var item = data.buy[i];

            this.Buy5.push({"Price": item.price, "Vol": item.vol});
        }

        for (var i in data.sell) {
            var item = data.sell[i];
            this.Sell5.push({"Price": item.price, "Vol": item.vol});
        }
    }

    //分笔
    this.SetDealData = function (data) {
        this.Price = data.price;
        this.High = data.high;
        this.Low = data.low;
        this.Vol = data.vol;
        this.Amount = data.amount;
        this.Date = data.date;
        this.Time = data.time;
        this.Increase = data.increase;

        this.Deal = new Array();
        for (var i in data.deal) {
            var item = data.deal[i];
            if (isNaN(item.price) || isNaN(item.time)) continue;

            this.Deal.push({"Price": item.price, "Amount": item.amount, "Vol": item.vol, "Time": item.time});
        }
    }

    //热度
    this.SetHeatData = function (data) {
        var heatData = new IndexHeatData();
        heatData.Good = data.quadrant.good;
        heatData.GoodIncrease.Day1 = data.quadrant.gincrease.day1;
        heatData.GoodIncrease.Week1 = data.quadrant.gincrease.week1;
        heatData.GoodIncrease.Week4 = data.quadrant.gincrease.week4;

        this.Heat = heatData;
    }


    //所有数据
    this.SetData = function (data) {
        if (data.name) this.Name = data.name;
        if (!isNaN(data.yclose)) this.YClose = data.yclose;
        if (!isNaN(data.price)) this.Price = data.price;
        if (!isNaN(data.high)) this.High = data.high;
        if (!isNaN(data.low)) this.Low = data.low;
        if (!isNaN(data.vol)) this.Vol = data.vol;
        if (!isNaN(data.amount)) this.Amount = data.amount;
        if (!isNaN(data.date)) this.Date = data.date;
        if (!isNaN(data.time)) this.Time = data.time;
        if (!isNaN(data.increase)) this.Increase = data.increase;

        if (!isNaN(data.marketvalue)) this.MarketValue = data.marketvalue;           //总市值
        if (!isNaN(data.flowmarketvalue)) this.FlowMarketValue = data.flowmarketvalue;   //流通市值
        if (!isNaN(data.bookrate)) this.Bookrate = data.bookrate;                 //委比
        if (!isNaN(data.bookdiffer)) this.Bookdiffer = data.bookdiffer;            //委差
        if (!isNaN(data.pe)) this.PE = data.pe;
        if (!isNaN(data.pb)) this.PB = data.pb;

        if (data.finance) this.SetFinanceData(data);
        if (data.finance) this.SetFinanceDetailData(data);

        if (data.mamplitude) {
            if (!isNaN(data.mamplitude[5])) this.MinuteAmplitude.M5 = data.mamplitude[5];
        }

        if (data.risefallspeed) {
            if (!isNaN(data.risefallspeed[5])) this.RiseFallSpeed.M5 = data.risefallspeed[5];
        }

        if (data.pledge) this.SetPledgeData(data);
        if (data.year) this.SetYearData(data);

    }
}

/////////////////////////////////////////////////////////////////////////////////////
//
//

//股票字段枚举
var STOCK_FIELD_NAME =
    {
        SYMBOL: 0,
        NAME: 1,
        OPEN: 2,
        PRICE: 3,
        HIGH: 4,
        LOW: 5,
        YCLOSE: 6,
        VOL: 7,          //成交量
        AMOUNT: 8,       //成交金额
        DATE: 9,
        TIME: 10,
        INCREASE: 11,
        BUY5: 12,        //5档买
        SELL5: 13,       //5挡卖
        DEAL: 14,        //分笔
        AMPLITUDE: 15,   //振幅

        MARKET_VALUE: 16,            //总市值
        FLOW_MARKET_VALUE: 17,       //流通市值

        BOOK_RATE: 18,    //委比
        BOOK_DIFFER: 19,  //委差

        PE: 20,      //市盈率=股价/滚动EPS
        PB: 21,      //市净率=股价/每股净资产
        EXCHANGE_RATE: 23,    //换手率

        //财务数据
        ROE: 24,                 //净资产收益率
        FINANCE_DATE: 25,        //报告日期
        FINANCE_PERSEARNING: 26, //每股收益
        FINANCE_PERNETASSET: 27, //每股净资产

        FINANCE_NPROFIT: 28,             //净利润
        FINANCE_NPROFITINCREASE: 29,     //净利润涨幅 （当年净利润-上一年）/上一年*100

        FINANCE_NNETPROFIT: 30,           //扣非净利润
        FINANCE_NNPROFITINCREASE: 31,    //扣非净利润涨幅  （当年扣非净利润-上一年）/上一年*100
        FINANCE_NNPROFITSPEED: 32,       //扣非净利润涨速（当前扣非净利润/上一年-1）/（上一年/上上年-1）
        FINANCE_EPS: 33,                 //滚动EPS

        MAX_PRICE: 34,       //涨停价
        MIN_PRICE: 35,       //跌停价
        RISE_FALL_PRICE: 36, //涨跌额

        FINANCE_BENFORD: 37, //财务粉饰

        //1，3，5 ，10，15 分钟涨速
        RISEFALLSPEED_1: 38,
        RISEFALLSPEED_3: 39,
        RISEFALLSPEED_5: 40,
        RISEFALLSPEED_10: 41,
        RISEFALLSPEED_15: 42,

        //1，3，5 ，10，15 振幅
        MINUTE_AMPLITUDE_1: 43,
        MINUTE_AMPLITUDE_3: 44,
        MINUTE_AMPLITUDE_5: 45,
        MINUTE_AMPLITUDE_10: 46,
        MINUTE_AMPLITUDE_15: 47,

        //1，3，5 ，10，15 分钟 成交金额
        MINUTE_AMOUNT_1: 48,
        MINUTE_AMOUNT_3: 49,
        MINUTE_AMOUNT_5: 50,
        MINUTE_AMOUNT_10: 51,
        MINUTE_AMOUNT_15: 52,


        COMPANY_NAME: 53,    //公司全称
        PLATE_INDUSTRY: 54, //所属行业
        PLATE_CONCEPT: 55,  //概念
        PLATE_REGION: 56,   //地区

        COMPANY_BUSINESS: 57,
        COMPANY_VOL: 58,
        COMPANY_PRICE: 59,
        COMPANY_RELEASEDATE: 60,
        COMPANY_COMPETENCE: 61,

        PEG: 62,                    //市盈增长比率
        FINANCE_AVERAGE_BENFORD: 63,//财务粉饰均值

        EVENT_IS_MARGIN: 64,   //是否是融资融券标的
        FLOW_IN:65,     //资金流入
        FLOW_OUT:66,    //资金流出
        CAPITAL_FLOW_DAY:67,     //当日资金流
        CAPITAL_FLOW_DAY3: 68,   //3日资金流
        CAPITAL_FLOW_DAY5: 69,   //5日资金流
        CAPITAL_FLOW_DAY10: 70,  //10日资金流
        DDE:71,
        DDE3:72,
        DDE5:73,
        DDE10:74,

        INDEXTOP: 100,
        WEEK: 101,
        HEAT: 102,
        FINANCE_PERCRESERVE: 103,
        FINANCE_PCNPROFIT: 104,            //归母净利润
        FINANCE_PERUPROFIT: 105,   //每股未分配利润
        FINANCE_PERCCFO: 106,      //每股经营性现金流
        FINANCE_OREVENUES: 107,    //营业总收入
        FINANCE_MOPROFIT: 108,     //主营业务利润
        FINANCE_OPROFIT: 109,      //营业利润
        FINANCE_EXPENSES3: 110,            //三项费用
        FINANCE_ARECEIVABLE: 111,  //应收账款
        FINANCE_NCURRENTLIABILITIES: 112,  //非流动负债

        FINANCE_CCFO: 113,         //经营性现金流
        FINANCE_TOTALASSETS: 114,  //资产总计
        FINANCE_TOTALLIABILITIES: 115,   //负债总计
        FINANCE_TOTALOWNERSEQUITY: 116,  //所有者权益总计
        FINANCE_CURRENTASSETS: 117,    //流动资产
        FINANCE_MONETARYFUNDS: 118,    //货币资金
        FINANCE_INVENTORY: 119,        //存货
        FINANCE_CURRENTLIABILITIES: 120,  //流动负债

        //股权质押
        PLEDGE_PROPORTION: 121,                  //累计质押比例%
        PLEDGE_SHAREHOLDER_PROPORTION: 122,      //控股股东累计质押比%(shareholder proportion)
        PLEDGE_SHAREHOLDER_HELD_PROPORTION: 123,  //控股股东累计质押数量占持股比例% (shareholder held proportion)
        PLEDGE_VOL: 124,
        PLEDGE_UNSALE_VOL: 125,
        PLEDGE_SALE_VOL: 126,

        //年涨幅
        YEAR_YEAR1: 130,
    };

var StockDataFieldName =
    {
        m_mapFiled: new Map(
            [
                [STOCK_FIELD_NAME.NAME, "name"],
                [STOCK_FIELD_NAME.SYMBOL, 'symbol'],
                [STOCK_FIELD_NAME.PRICE, 'price'],
                [STOCK_FIELD_NAME.INCREASE, 'increase'],
                [STOCK_FIELD_NAME.PE, 'pe'],
                [STOCK_FIELD_NAME.FINANCE_BENFORD, 'finance.benford'],

                //1，3，5 ，10，15 分钟涨速
                [STOCK_FIELD_NAME.RISEFALLSPEED_1, 'risefallspeed.1'],
                [STOCK_FIELD_NAME.RISEFALLSPEED_3, 'risefallspeed.3'],
                [STOCK_FIELD_NAME.RISEFALLSPEED_5, 'risefallspeed.5'],
                [STOCK_FIELD_NAME.RISEFALLSPEED_10, 'risefallspeed.10'],
                [STOCK_FIELD_NAME.RISEFALLSPEED_15, 'risefallspeed.15'],

                //1，3，5 ，10，15 振幅
                [STOCK_FIELD_NAME.MINUTE_AMPLITUDE_1, 'mamplitude.1'],
                [STOCK_FIELD_NAME.MINUTE_AMPLITUDE_3, 'mamplitude.3'],
                [STOCK_FIELD_NAME.MINUTE_AMPLITUDE_5, 'mamplitude.5'],
                [STOCK_FIELD_NAME.MINUTE_AMPLITUDE_10, 'mamplitude.10'],
                [STOCK_FIELD_NAME.MINUTE_AMPLITUDE_15, 'mamplitude.15'],

                //1，3，5 ，10，15 分钟 成交金额
                [STOCK_FIELD_NAME.MINUTE_AMOUNT_1, 'mamount.1'],
                [STOCK_FIELD_NAME.MINUTE_AMOUNT_3, 'mamount.3'],
                [STOCK_FIELD_NAME.MINUTE_AMOUNT_5, 'mamount.5'],
                [STOCK_FIELD_NAME.MINUTE_AMOUNT_10, 'mamount.10'],
                [STOCK_FIELD_NAME.MINUTE_AMOUNT_15, 'mamount.15'],

                //股权质押
                [STOCK_FIELD_NAME.PLEDGE_PROPORTION, 'pledge.prop'],                          //累计质押比例%
                [STOCK_FIELD_NAME.PLEDGE_SHAREHOLDER_PROPORTION, 'pledge.shprop'],            //控股股东累计质押比%(shareholder proportion)
                [STOCK_FIELD_NAME.PLEDGE_SHAREHOLDER_HELD_PROPORTION, 'pledge.shheldeprop'],   //控股股东累计质押数量占持股比例% (shareholder held proportion)
                [STOCK_FIELD_NAME.PLEDGE_VOL, 'pledge.vol'],
                [STOCK_FIELD_NAME.PLEDGE_UNSALE_VOL, 'pledge.unsalevol'],
                [STOCK_FIELD_NAME.PLEDGE_SALE_VOL, 'pledge.salevol'],

                //年涨幅
                [STOCK_FIELD_NAME.YEAR_YEAR1, 'year.year1'],
            ]
        ),

        GetFieldName: function (fieldID) {
            if (!this.m_mapFiled.has(fieldID)) return null;

            return this.m_mapFiled.get(fieldID);
        }
    }


function StockRead(stock, tagID) {
    this.JSStock = stock;
    this.TagID = tagID;

    this.Get = function (symbol, field) {
        var data = stock.Get(symbol, this.TagID);
        if (!data) return null;

        switch (field) {
            case STOCK_FIELD_NAME.SYMBOL:
                return data.Symbol;
            case STOCK_FIELD_NAME.NAME:
                return data.Name;
            case STOCK_FIELD_NAME.OPEN:
                return data.Open;
            case STOCK_FIELD_NAME.PRICE:
                return data.Price;
            case STOCK_FIELD_NAME.YCLOSE:
                return data.YClose;
            case STOCK_FIELD_NAME.HIGH:
                return data.High;
            case STOCK_FIELD_NAME.LOW:
                return data.Low;
            case STOCK_FIELD_NAME.VOL:
                return data.Vol;
            case STOCK_FIELD_NAME.AMOUNT:
                return data.Amount;
            case STOCK_FIELD_NAME.DATE:
                return data.Date;
            case STOCK_FIELD_NAME.TIME:
                return data.Time;
            case STOCK_FIELD_NAME.INCREASE:
                return data.Increase;
            case STOCK_FIELD_NAME.EXCHANGE_RATE:
                return data.ExchangeRate;
            case STOCK_FIELD_NAME.AMPLITUDE:
                return data.Amplitude;
            case STOCK_FIELD_NAME.MAX_PRICE:
                return data.MaxPrice;
            case STOCK_FIELD_NAME.MIN_PRICE:
                return data.MinPrice;
            case STOCK_FIELD_NAME.RISE_FALL_PRICE:
                return data.RFPrice;

            case STOCK_FIELD_NAME.INDEXTOP:
                return data.IndexTop;
            case STOCK_FIELD_NAME.WEEK:
                return data.Week;
            case STOCK_FIELD_NAME.HEAT:
                return data.GetHeatData(this.TagID);
            case STOCK_FIELD_NAME.BUY5:
                return data.GetBuy5(this.TagID);
            case STOCK_FIELD_NAME.SELL5:
                return data.GetSell5(this.TagID);
            case STOCK_FIELD_NAME.DEAL:
                return data.GetDeal(this.TagID);

            //实时计算的衍生数据
            case STOCK_FIELD_NAME.MARKET_VALUE:
            case STOCK_FIELD_NAME.FLOW_MARKET_VALUE:
            case STOCK_FIELD_NAME.BOOK_RATE:
            case STOCK_FIELD_NAME.BOOK_DIFFER:
            case STOCK_FIELD_NAME.PE:
            case STOCK_FIELD_NAME.PB:
            case STOCK_FIELD_NAME.FLOW_IN:
            case STOCK_FIELD_NAME.FLOW_OUT:
                return data.GetDerivative(this.TagID, field);

            //财务数据
            case STOCK_FIELD_NAME.ROE:
            case STOCK_FIELD_NAME.PEG:
            case STOCK_FIELD_NAME.FINANCE_DATE:
            case STOCK_FIELD_NAME.FINANCE_PERSEARNING:
            case STOCK_FIELD_NAME.FINANCE_PERNETASSET:
            case STOCK_FIELD_NAME.FINANCE_NPROFIT:
            case STOCK_FIELD_NAME.FINANCE_NPROFITINCREASE:
            case STOCK_FIELD_NAME.FINANCE_NNETPROFIT:
            case STOCK_FIELD_NAME.FINANCE_NNPROFITINCREASE:
            case STOCK_FIELD_NAME.FINANCE_NNPROFITSPEED:
            case STOCK_FIELD_NAME.FINANCE_EPS:
            case STOCK_FIELD_NAME.FINANCE_BENFORD:
            case STOCK_FIELD_NAME.FINANCE_AVERAGE_BENFORD:
                return data.GetFinance(this.TagID, field);

            //行业分类
            case STOCK_FIELD_NAME.PLATE_INDUSTRY:
            case STOCK_FIELD_NAME.PLATE_CONCEPT:
            case STOCK_FIELD_NAME.PLATE_REGION:
                return data.GetPlate(this.TagID, field);

            case STOCK_FIELD_NAME.COMPANY_NAME:
            case STOCK_FIELD_NAME.COMPANY_BUSINESS:
            case STOCK_FIELD_NAME.COMPANY_VOL:
            case STOCK_FIELD_NAME.COMPANY_PRICE:
            case STOCK_FIELD_NAME.COMPANY_RELEASEDATE:
            case STOCK_FIELD_NAME.COMPANY_COMPETENCE:
                return data.GetCompany(this.TagID, field);

            case STOCK_FIELD_NAME.FINANCE_PERCRESERVE:
            case STOCK_FIELD_NAME.FINANCE_PERUPROFIT:
            case STOCK_FIELD_NAME.FINANCE_PERCCFO:
            case STOCK_FIELD_NAME.FINANCE_OREVENUES:
            case STOCK_FIELD_NAME.FINANCE_MOPROFIT:
            case STOCK_FIELD_NAME.FINANCE_OPROFIT:
            case STOCK_FIELD_NAME.FINANCE_GROSSMARGIN:
            case STOCK_FIELD_NAME.FINANCE_ARECEIVABLE:
            case STOCK_FIELD_NAME.FINANCE_FINANCIALCOST:
            case STOCK_FIELD_NAME.FINANCE_CCFO:
            case STOCK_FIELD_NAME.FINANCE_TOTALASSETS:
            case STOCK_FIELD_NAME.FINANCE_TOTALLIABILITIES:
            case STOCK_FIELD_NAME.FINANCE_TOTALOWNERSEQUITY:
            case STOCK_FIELD_NAME.FINANCE_CURRENTASSETS:
            case STOCK_FIELD_NAME.FINANCE_MONETARYFUNDS:
            case STOCK_FIELD_NAME.FINANCE_INVENTORY:
            case STOCK_FIELD_NAME.FINANCE_CURRENTLIABILITIES:
            case STOCK_FIELD_NAME.FINANCE_NCURRENTLIABILITIES:
            case STOCK_FIELD_NAME.FINANCE_EXPENSES3:
            case STOCK_FIELD_NAME.FINANCE_PCNPROFIT:
                // console.log(data.GetFinanceDetail(this.TagID, field),'data.GetFinanceDetail(this.TagID, field)')
                return data.GetFinanceDetail(this.TagID, field);

            //股权质押
            case STOCK_FIELD_NAME.PLEDGE_PROPORTION:
            case STOCK_FIELD_NAME.PLEDGE_SHAREHOLDER_PROPORTION:
            case STOCK_FIELD_NAME.PLEDGE_SHAREHOLDER_HELD_PROPORTION:
                return data.GetPledge(this.TagID, field);

            //事件 属性
            case STOCK_FIELD_NAME.EVENT_IS_MARGIN:
                return data.GetEvent(this.TagID, field);

            //年涨幅
            case STOCK_FIELD_NAME.YEAR_YEAR1:
                return data.GetYear(this.TagID, field);
            
            //资金流 
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY:
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY3:
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY5:
            case STOCK_FIELD_NAME.CAPITAL_FLOW_DAY10:
                return data.GetCapitalFlowDay(this.TagID, field);
            //DDE
            case STOCK_FIELD_NAME.DDE:
            case STOCK_FIELD_NAME.DDE3:
            case STOCK_FIELD_NAME.DDE5:
            case STOCK_FIELD_NAME.DDE10:
                return data.GetDDE(this.TagID, field);

            default:
                return null;
        }
    }

    //symbol=指数或板块  field=排序字段  order=排序方式
    this.GetSort = function (symbol, field, order) {
        var data = stock.Get(symbol, this.TagID);
        if (data == null) return data;

        return data.GetSortData(this.TagID, field, order);
    }

    //读取完成 isUpdate 是否马上更新数据
    this.EndRead = function (isUpdate) {
        if (isUpdate == true) this.JSStock.ReqeustData();
    }

    //批量设置查询数据字段
    this.SetQueryField=function(symbol, aryField)
    {
        for(var i in aryField)
        {
            this.Get(symbol,aryField[i])
        }
    }
}

//初始化
JSStock.Init = function () {
    var stock = new JSStock();
    return stock;
}

JSStock.SetDomain = function (domain, cacheDomain) {
    if (domain) g_JSStockResource.Domain = domain;
    if (cacheDomain) g_JSStockResource.CacheDomain = cacheDomain;
}

//获取股票搜索类
JSStock.GetSearchStock = function (callback) {
    return new SearchStock(callback);
}

//板块成员
JSStock.GetBlockMember = function (symbol) {
    return new BlockMember(symbol);
}

JSStock.GetShortTerm = function (symbol) {
    return new ShortTerm(symbol);
}

JSStock.GetBlockTop = function () {
    return new BlockTop();
}

JSStock.GetStockHistory = function () {
    return new JSStockHistory();
}

JSStock.GetIndexIncrease = function (symbols, startTime, endTime) {
    return new IndexIncrease(symbols, startTime, endTime);
}

JSStock.GetPledgeDetail = function (symbol, startDate, endDate) {
    return new PledgeDetail(symbol, startDate, endDate);
}

JSStock.GetPolicyList=function()
{
    return new PolicyList();
}

JSStock.GetPolicyDetail=function()
{
    return new PolicyDetail();
}

JSStock.GetAnalylisPlate = function () {
  return new AnalylisPlate();
}

JSStock.GetHotWord = function(){
  return new HotWord();
}

JSStock.GetFinanceIndicators = function(){
  return new financeIndicators();
}


var RECV_DATA_TYPE =
    {
        BASE_DATA: 1,        //股票行情基础数据
        INDEX_BASE_DATA: 2,  //指数行情基础数据(包含 涨跌家数)
        HEAT_DATA: 3,        //热度数据
        SORT_DATA: 4,        //排序数据
        BUY_SELL_DATA: 5,    //买卖盘数据
        DEAL_DATA: 6,        //分笔数据
        DERIVATIVE_DATA: 7,  //实时衍生数据
        FINANCE_DATA: 8,     //财务数据
        SEARCH_STOCK_DATA: 9,//股票搜索

        SELF_STOCK_DATA: 10, //自选股数据
        LOGON_DATA: 11,       //登陆信息
        BLOCK_MEMBER_DATA: 12,  //板块成员
        SHORT_TERM_DATA: 13,       //短线精灵
        BLOCK_TOP_DATA: 14,
        COMPANY_DATA: 15,      //个股资料
        PLATE_DATA: 16,        //板块(行业 概念 地区)

        INDEX_COMPARE: 17,      //指数对比
        FINANCE_DETAIL_DATA: 18,
        PLEDGE_DATA: 19,    //股权质押
        EVENT_DATA: 20,     //事件 属性数据

        POLICY_LIST_DATA:21, //策略列表信息
        POLICY_DETAIL_DATA:22,   //单个策略股票列表

        //资金流
        CAPITAL_FLOW_DAY_DATA:23,
        CAPITAL_FLOW_DAY3_DATA:24,
        CAPITAL_FLOW_DAY5_DATA:25,
        CAPITAL_FLOW_DAY10_DATA:26,
        //DDE
        DDE_DAY_DATA:27,
        DDE_DAY3_DATA:28,
        DDE_DAY5_DATA:29,
        DDE_DAY10_DATA:30,
    }

function JSStock() {
    this.MapStock = new Map();    //key=symbol, value=StockData
    this.MapTagCallback = new Map();  //callback(tagID,arySymbol(更新的股票代码),dataType,this)
    this.RequestVersion = new Array([100, 100, 100]);

    this.RealtimeApiUrl = g_JSStockResource.Domain + "/API/Stock";
    this.PlateQuadrantApiUrl = g_JSStockResource.Domain + "/API/StockPlateQuadrant";    //热度api

    this.IsAutoUpdate = true;
    this.AutoUpateTimeout = 15000;    //更新频率
    this.Timeout;
    this.End = 50;

    this.Stop = function () {
        // console.log("[JSStock::Stop] stop update.")
        this.IsAutoUpdate = false;
        if (this.Timeout) clearTimeout(this.Timeout);   //清空定时器
    }

    this.Start = function () {
        // console.log("[JSStock::Start] start auto update.");
        this.IsAutoUpdate = true;
        this.ReqeustData();
    }

    this.GetStockRead = function (tagID, callback, isDelete) {

        if (isDelete===true)
        {
            for (var item of this.MapStock) 
            {
                item[1].RemoveTagID(tagID);
            }
        }
        for(var item of this.MapStock)
        {
            item[1].RemoveTagID(tagID);
        }

        this.MapTagCallback.set(tagID,callback);

        // if (callback) this.MapTagCallback.set(tagID, callback);

        var read = new StockRead(this, tagID);
        return read;
    }

    //取消某一个控件订阅的股票推送
    this.Unsubscribe = function (tagID) {
        for (var item of this.MapStock) {
            item[1].RemoveTagID(tagID);
        }
    }

    //获取一个股票
    this.Get = function (symbol, tagID) {
        if (!this.MapStock.has(symbol)) {
            this.MapStock.set(symbol, new StockData(symbol));
        }

        var data = this.MapStock.get(symbol);
        if (tagID) data.AttachTagID(tagID);
        return data;
    }

    this.ReqeustData = function () {
        var arySymbol = new Array();  //股票
        var aryIndex = new Array();   //指数
        var aryHeat = new Array();    //热度
        var aryBuySell = new Array(); //5当买卖盘
        var aryDeal = new Array();    //分笔
        var aryDerivative = new Array();  //实时衍生数据
        var aryFinance = new Array();     //财务数据
        var aryCompany = new Array();       //公司资料
        var aryPlate = new Array();         //板块(行业 概念 地址)
        var aryFinanceDetail = new Array();
        var aryPledge = new Array();
        var aryEvent = new Array();
        var aryYear = new Array();//年涨幅
        var aryFlow = [], aryFlow3 = [], aryFlow5 = [], aryFlow10=[];
        var aryDDE=[], aryDDE3=[], aryDDE5=[], aryDDE10=[];

        // console.log("this.MapStock", this.MapStock);

        for (var item of this.MapStock) {
            if (item[1].BuySellTagID.size > 0) {
                aryBuySell.push(item[0]);
            }
            else {
                if (IsIndexSymbol(item[0]))
                    aryIndex.push(item[0]);
                else
                    arySymbol.push(item[0]);
            }

            if (item[1].CapitalFlowDayID.size > 0) aryFlow.push(item[0]);
            if (item[1].CapitalFlowDay3ID.size > 0) aryFlow3.push(item[0]);
            if (item[1].CapitalFlowDay5ID.size > 0) aryFlow5.push(item[0]);
            if (item[1].CapitalFlowDay10ID.size > 0) aryFlow10.push(item[0]);

            if (item[1].DDEID.size > 0) aryDDE.push(item[0]);
            if (item[1].DDE3ID.size > 0) aryDDE3.push(item[0]);
            if (item[1].DDE5ID.size > 0) aryDDE5.push(item[0]);
            if (item[1].DDE10ID.size > 0) aryDDE10.push(item[0]);

            if (item[1].HeatTagID.size > 0)
                aryHeat.push(item[0])

            if (item[1].DealTagID.size > 0)
                aryDeal.push(item[0]);

            if (item[1].DerivativeTagID.size > 0)
                aryDerivative.push(item[0]);

            if (item[1].Finance == null && item[1].FinanceTagID.size > 0)
                aryFinance.push(item[0]);

            if (item[1].Company == null && item[1].CompanyTagID.size > 0)
                aryCompany.push(item[0]);

            if (item[1].Plate == null && item[1].PlateTagID.size > 0)
                aryPlate.push(item[0]);

            if (item[1].FinanceDetail == null && item[1].FinanceDetailTagID.size > 0)
                aryFinanceDetail.push(item[0]);

            if (item[1].Pledge == null && item[1].PledgeTagID.size > 0)
                aryPledge.push(item[0]);

            if (item[1].Event == null && item[1].EventTagID.size > 0)
                aryEvent.push(item[0]);

            if (item[1].Year == null && item[1].YearTagID.size > 0)
                aryYear.push(item[0]);
        }

        if (aryBuySell.length > 0) this.RequestBuySellData(aryBuySell);
        if (arySymbol.length > 0) this.RequestBaseData(arySymbol);
        if (aryIndex.length > 0) this.RequestIndexBaseData(aryIndex);
        if (aryHeat.length > 0) this.RequestIndexHeatData(aryHeat);
        if (aryDeal.length > 0) this.RequestDealData(aryDeal);
        if (aryDerivative.length > 0) this.RequestDerivativeData(aryDerivative);
        if (aryFinance.length > 0) this.RequestFinanceData(aryFinance);
        if (aryCompany.length > 0) this.RequestCompanyData(aryCompany);
        if (aryPlate.length > 0) this.RequestPlateData(aryPlate);
        if (aryFinanceDetail.length > 0) this.RequestFinanceDetailData(aryFinanceDetail);
        if (aryPledge.length > 0) this.RequestPledgeData(aryPledge);
        if (aryEvent.length > 0) this.RequestEventData(aryEvent);
        if (aryYear.length > 0) this.RequestPledgeData(aryYear);

        if (aryFlow.length > 0) this.RequestSubDocumentData(aryFlow, 'flowday');
        if (aryFlow3.length > 0) this.RequestSubDocumentData(aryFlow3, 'flowday3');
        if (aryFlow5.length > 0) this.RequestSubDocumentData(aryFlow5, 'flowday5');
        if (aryFlow10.length > 0) this.RequestSubDocumentData(aryFlow10, 'flowday10');
        if (aryDDE.length > 0) this.RequestSubDocumentData(aryDDE, 'dde');
        if (aryDDE3.length > 0) this.RequestSubDocumentData(aryDDE3, 'dde3');
        if (aryDDE5.length > 0) this.RequestSubDocumentData(aryDDE5, 'dde5');
        if (aryDDE10.length > 0) this.RequestSubDocumentData(aryDDE10, 'dde10');


        this.ReqeustAllSortData();    //成分排序
    }
    this.RequestData = this.ReqeustData;
    //请求基础数据
    this.RequestBaseData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "yclose",
                    "open",
                    "price",
                    "high",
                    "low",
                    "vol",
                    "amount",
                    "date",
                    "time",
                    "week",
                    "increase",
                    "exchangerate",
                    "amplitude",
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": self.End
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.BASE_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.BASE_DATA);
            }
        });
    }

    //请求实时衍生数据
    this.RequestDerivativeData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "marketvalue",
                    "flowmarketvalue",
                    "pe",
                    "pb",
                    "bookrate",
                    "bookdiffer",
                    'flowin',
                    'flowout',
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.DERIVATIVE_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.DERIVATIVE_DATA);
            }
        });
    }

    //请求财务数据
    this.RequestFinanceData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "roe",
                    "peg",
                    "finance"
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                console.log(data, "data财务")
                self.RecvData(data, RECV_DATA_TYPE.FINANCE_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.FINANCE_DATA);
            }
        });
    }

    //请求财务数据
    this.RequestFinanceDetailData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "roe",
                    "finance"
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                // console.log(data,'financeDetail')
                self.RecvData(data, RECV_DATA_TYPE.FINANCE_DETAIL_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.FINANCE_DETAIL_DATA);
            }
        });
    }

    //股权质押
    this.RequestPledgeData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "symbol",
                    "pledge",
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.PLEDGE_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.PLEDGE_DATA);
            }
        });
    }

    //资金流
    this.RequestSubDocumentData = function (arySymbol, id)
    {
        var self = this;
        const mapDay = new Map([
            ['flowday', { Field: 'flowday', RecvID: RECV_DATA_TYPE.CAPITAL_FLOW_DAY_DATA}],
            ['flowday3', { Field: 'flowday3', RecvID: RECV_DATA_TYPE.CAPITAL_FLOW_DAY3_DATA }],
            ['flowday5', { Field: 'flowday5', RecvID: RECV_DATA_TYPE.CAPITAL_FLOW_DAY5_DATA }],
            ['flowday10', { Field: 'flowday10', RecvID: RECV_DATA_TYPE.CAPITAL_FLOW_DAY10_DATA }],
            ['dde', { Field: 'dde', RecvID: RECV_DATA_TYPE.DDE_DAY_DATA }],
            ['dde3', { Field: 'dde3', RecvID: RECV_DATA_TYPE.DDE_DAY3_DATA }],
            ['dde5', { Field: 'dde5', RecvID: RECV_DATA_TYPE.DDE_DAY5_DATA }],
            ['dde10', { Field: 'dde10', RecvID: RECV_DATA_TYPE.DDE_DAY10_DATA }],
            ]);

        if (!mapDay.has(id)) return;
        var value = mapDay.get(id);

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "symbol",
                    value.Field,
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, value.RecvID);
            },
            error: function (request) {
                self.RecvError(request, value.RecvID);
            }
        });
    }

    this.RequestEventData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "symbol",
                    "events.margin","events.shhk","events.hk","events.st",'events.hksymbol','events.hkname','events.szhk'
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.EVENT_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.EVENT_DATA);
            }
        });
    }


    this.RequestCompanyData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "company",
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.COMPANY_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.COMPANY_DATA);
            }
        });
    }

    this.RequestPlateData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "industry",
                    "region",
                    "concept",
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.PLATE_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.PLATE_DATA);
            }
        });
    }


    //请求买卖盘
    this.RequestBuySellData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "yclose",
                    "open",
                    "price",
                    "high",
                    "low",
                    "vol",
                    "amount",
                    "date",
                    "time",
                    "week",
                    "increase",
                    "buy",
                    "sell",
                    "exchangerate",
                    "amplitude"
                ],
                "symbol": arySymbol,
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.BUY_SELL_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.BUY_SELL_DATA);
            }
        });
    }

    //请求分笔
    this.RequestDealData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "price",
                    "high",
                    "low",
                    "vol",
                    "amount",
                    "date",
                    "time",
                    "increase",
                    "deal",
                ],
                "symbol": arySymbol,
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.DEAL_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.DEAL_DATA);
            }
        });
    }

    //指数基础数据(包含上涨下跌家数)
    this.RequestIndexBaseData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "yclose",
                    "open",
                    "price",
                    "high",
                    "low",
                    "vol",
                    "amount",
                    "date",
                    "time",
                    "week",
                    "indextop",
                    "increase"
                ],
                "symbol": arySymbol,
                "start": 0,
                "end": 50
            },
            method: 'POST',
            dataType: "json",
            success: function (data) {
                // console.log(data,"dataaaaaa")
                if (data.data.code != 0) {
                    wx.showModal({
                        title: '提示',
                        content: data.data.message,
                    })
                    return;
                }
                self.RecvData(data, RECV_DATA_TYPE.INDEX_BASE_DATA);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.INDEX_BASE_DATA);
            }
        });
    }

    //热度
    this.RequestIndexHeatData = function (arySymbol) {
        var self = this;

        wx.request({
            url: this.PlateQuadrantApiUrl,
            data: {
                "plate": arySymbol,
            },
            method: 'POST',
            success: function (res) {
                self.RecvData(res.data, RECV_DATA_TYPE.HEAT_DATA);
            },
            fail: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.HEAT_DATA);
            }
        })
        // $.ajax({
        //   url: this.PlateQuadrantApiUrl,
        //   data:
        //   {
        //     "plate": arySymbol,
        //   },
        //   type: "post",
        //   dataType: "json",
        //   async: true,
        //   success: function (data) {
        //     self.RecvData(data, RECV_DATA_TYPE.HEAT_DATA);
        //   },
        //   error: function (request) {
        //     self.RecvError(request, RECV_DATA_TYPE.HEAT_DATA);
        //   }
        // });
    }

    //排序
    this.ReqeustAllSortData = function () {
        var arySort = new Array();
        for (var item of this.MapStock) {
            if (!IsIndexSymbol(item[0])) continue;
            if (item[1].Sort == null || item[1].Sort.size <= 0) continue;

            for (var sortItem of item[1].Sort) {
                var sortData = sortItem[1];
                var data = {
                    "Plate": item[0],
                    "SortField": sortData.SortField,
                    "Order": sortData.Order,
                    "TagID": sortData.TagID
                };
                arySort.push(data);
            }
        }

        for (var i in arySort) {
            var sortItem = arySort[i];
            this.ReqeustSortData(sortItem);
        }
    }

    this.ReqeustSortData = function (sortItem) {
        var self = this;
        var sortData = sortItem;
        var sortFiled = "";

        //字段id 转换成字段名字
        switch (sortData.SortField) {
            case STOCK_FIELD_NAME.INCREASE:
                sortFiled = 'increase';
                break;
            case STOCK_FIELD_NAME.PRICE:
                sortFiled = 'price';
                break;
            default:
                return;
        }

        $.ajax({
            url: this.RealtimeApiUrl,
            data: {
                "field": [
                    "name",
                    "symbol",
                    "yclose",
                    "open",
                    "price",
                    "high",
                    "low",
                    "vol",
                    "amount",
                    "date",
                    "time",
                    "week",
                    "increase",
                    "exchangerate"
                ],
                "plate": [sortItem.Plate],
                "orderfield": sortFiled,
                "order": sortItem.Order,
                "ordernull": 1,      //过滤null字段
                "filterstop": 1      //过滤掉停牌数据
            },
            type: "post",
            dataType: "json",
            async: true,
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.SORT_DATA, sortData);
            },
            error: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.SORT_DATA, sortData);
            }
        });
    }

    this.RecvError = function (request, datatype, requestData) {
        // console.log("RecvError: datatype=" + datatype.toString());
        // console.log(request);

        var self = this;
        if (this.Timeout) clearTimeout(this.Timeout);   //清空定时器
        this.Timeout = setTimeout(function () {
            self.ReqeustData();
        }, this.AutoUpateTimeout * 2);
    }


    //微信数据返回在原始的数据基础上外面包了一层,正式的数据应该在data.data里面
    this.RecvData = function (data, datatype, requestData) {
        var mapTagData;   //key=界面元素id, value=更新的股票列表

        switch (datatype) {
            case RECV_DATA_TYPE.BASE_DATA:
            case RECV_DATA_TYPE.INDEX_BASE_DATA:
                mapTagData = this.RecvBaseData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.HEAT_DATA:
                mapTagData = this.RecvHeatData(data, datatype);
                break;
            case RECV_DATA_TYPE.SORT_DATA:
                mapTagData = this.RecvSortData(data, datatype, requestData);
                break;
            case RECV_DATA_TYPE.BUY_SELL_DATA:
                mapTagData = this.RecvBuySellData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.DEAL_DATA:
                mapTagData = this.RecvDealData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.DERIVATIVE_DATA:
                mapTagData = this.RecvDerivativeData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.FINANCE_DATA:
                mapTagData = this.RecvFinanceData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.COMPANY_DATA:
                mapTagData = this.RecvCompanyData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.PLATE_DATA:
                mapTagData = this.RecvPlateData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.FINANCE_DETAIL_DATA:
                mapTagData = this.RecvFinanceDetailData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.PLEDGE_DATA:
                mapTagData = this.RecvPledgeData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.EVENT_DATA:
                mapTagData = this.RecvEventData(data.data, datatype);
                break;
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY_DATA:
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY3_DATA:
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY5_DATA:
            case RECV_DATA_TYPE.CAPITAL_FLOW_DAY10_DATA:
            case RECV_DATA_TYPE.DDE_DAY_DATA:
            case RECV_DATA_TYPE.DDE_DAY3_DATA:
            case RECV_DATA_TYPE.DDE_DAY5_DATA:
            case RECV_DATA_TYPE.DDE_DAY10_DATA:
                mapTagData = this.RecvSubDocumentData(data.data, datatype);
                break;
        }

        for (var value of mapTagData) {
            if (!this.MapTagCallback.has(value[0])) continue;

            this.MapTagCallback.get(value[0])(value[0], value[1], datatype, this);
        }

        var self = this;
        if (this.IsAutoUpdate) {
            if (this.Timeout) clearTimeout(this.Timeout);   //清空定时器
            //周日 周6 不更新， [9：15-3：30]以外的时间不更新
            var today = new Date();
            var time = today.getHours() * 100 + today.getMinutes();
            if (today.getDay() > 0 && today.getDay() < 6 && time >= 915 && time < 1530)
                this.Timeout = setTimeout(function () {
                    self.ReqeustData();
                }, this.AutoUpateTimeout);
        }
    }


    this.RecvBaseData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            switch (datatype) {
                case RECV_DATA_TYPE.BASE_DATA:
                    stockData.SetBaseData(item);
                    break;
                case RECV_DATA_TYPE.INDEX_BASE_DATA:
                    stockData.SetIndexBaseData(item);
                    break;
                default:
                    continue;
            }

            if (stockData.TagID.size > 0) {
                for (var id of stockData.TagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvBuySellData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetBuySellData(item);

            if (stockData.TagID.size > 0) {
                for (var id of stockData.TagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }

            if (stockData.BuySellTagID.size > 0) {
                for (var id of stockData.BuySellTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvDerivativeData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetDerivativeData(item);

            if (stockData.DerivativeTagID.size > 0) {
                for (var id of stockData.DerivativeTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvFinanceData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetFinanceData(item);
            if (stockData.FinanceTagID.size > 0) {
                for (var id of stockData.FinanceTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvFinanceDetailData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表

        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetFinanceDetailData(item);
            if (stockData.FinanceDetailTagID.size > 0) {
                for (var id of stockData.FinanceDetailTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvPledgeData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表

        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetPledgeData(item);
            if (stockData.PledgeTagID.size > 0) {
                for (var id of stockData.PledgeTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvEventData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表

        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetEventData(item);
            if (stockData.EventTagID.size > 0) {
                for (var id of stockData.EventTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }


    this.RecvCompanyData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetCompanyData(item);

            if (stockData.CompanyTagID.size > 0) {
                for (var id of stockData.CompanyTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvPlateData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetPlateData(item);

            if (stockData.PlateTagID.size > 0) {
                for (var id of stockData.PlateTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }


    this.RecvDealData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.stock) {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetDealData(item);

            if (stockData.DealTagID.size > 0) {
                for (var id of stockData.DealTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvHeatData = function (data, datatype) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for (var i in data.data) {
            var item = data.data[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            stockData.SetHeatData(item);

            if (stockData.HeatTagID.size > 0) {
                for (var id of stockData.HeatTagID) {
                    if (mapTagData.has(id)) {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvSubDocumentData = function(data, datatype)
    {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        for(var i in data.stock)
        {
            var item = data.stock[i];
            var stockData = this.MapStock.get(item.symbol);
            if (!stockData) continue;

            var keyData=null;
            switch (datatype)
            {
                case RECV_DATA_TYPE.CAPITAL_FLOW_DAY_DATA:
                    stockData.SetCapitalFlowDayData(item.flowday, datatype);
                    keyData = stockData.CapitalFlowDayID;
                    break;
                case RECV_DATA_TYPE.CAPITAL_FLOW_DAY3_DATA:
                    stockData.SetCapitalFlowDayData(item.flowday3, datatype);
                    keyData = stockData.CapitalFlowDay3ID;
                    break;
                case RECV_DATA_TYPE.CAPITAL_FLOW_DAY5_DATA:
                    stockData.SetCapitalFlowDayData(item.flowday5, datatype);
                    keyData = stockData.CapitalFlowDay5ID;
                    break;
                case RECV_DATA_TYPE.CAPITAL_FLOW_DAY10_DATA:
                    stockData.SetCapitalFlowDayData(item.flowday10, datatype);
                    keyData = stockData.CapitalFlowDay10ID;
                    break;
                case RECV_DATA_TYPE.DDE_DAY_DATA:
                    stockData.SetDDE(item.dde, datatype);
                    keyData = stockData.DDEID;
                    break;
                case RECV_DATA_TYPE.DDE_DAY3_DATA:
                    stockData.SetDDE(item.dde3, datatype);
                    keyData = stockData.DDE3ID;
                    break;
                case RECV_DATA_TYPE.DDE_DAY5_DATA:
                    stockData.SetDDE(item.dde5, datatype);
                    keyData = stockData.DDE5ID;
                    break;
                case RECV_DATA_TYPE.DDE_DAY10_DATA:
                    stockData.SetDDE(item.dde10, datatype);
                    keyData = stockData.DDE10ID;
                    break;
            }

            if (keyData && keyData.size>0) 
            {
                for (var id of keyData) 
                {
                    if (mapTagData.has(id)) 
                    {
                        mapTagData.get(id).push(stockData.Symbol);
                    }
                    else 
                    {
                        mapTagData.set(id, new Array(stockData.Symbol));
                    }
                }
            }
        }

        return mapTagData;
    }

    this.RecvSortData = function (data, datatype, sortItem) {
        var mapTagData = new Map();   //key=界面元素id, value=更新的股票列表
        var arySymbol = new Array();
        var stockData = this.MapStock.get(sortItem.Plate);

        for (var i in data.stock) {
            var item = data.stock[i];
            arySymbol.push(item.symbol);

            if (this.MapStock.has(item.symbol)) {
                var itemData = this.MapStock.get(item.symbol);
                itemData.SetBaseData(item);
            }
            else {
                var itemData = new StockData(item.symbol);
                itemData.SetBaseData(item);
                this.MapStock.set(item.symbol, itemData);
            }
        }

        var key = sortItem.SortField.toString() + '-' + sortItem.Order.toString();
        if (!stockData.Sort.has(key)) return mapTagData;

        var sortData = stockData.Sort.get(key);
        sortData.arySymbol = arySymbol;

        for (var item of sortItem.TagID) {
            mapTagData.set(item, new Array([stockData.Symbol]));
        }

        return mapTagData;
    }


}

//股票搜索返回数据
function SearchStock(callback) {
    this.SearchStockApiUrl = g_JSStockResource.Domain + "/API/StockSpell";
    this.UpdateUICallback = callback;
    this.PageSize = 50;      //一页几个数据

    this.Count;             //一共的个数
    this.EndOffset;         //当前缓存数据的最后一个位移

    this.Data = new Array();
    this.Search = "";
    this.SearchType = 0;   // 沪深A股=2||0||null；沪深指数=4；港股股票=8；沪深债券=16；

    this.Search = function (input, type) {
        if (this.Search == input && this.SearchType == type) {

        }
        else {
            this.Search = input;
            this.SearchType = type;
            this.Count = 0;
            this.EndOffset = 0;
            this.Data = [];
            var end = this.PageSize - 1;
            this.ReqeustSearchStock(this.Search, this.SearchType, this.EndOffset, end);
        }
    }

    this.IsEndPage = function () {
        if (this.Count <= 0) return true;

        return this.EndOffset > this.Count - 1;
    }

    this.NextPage = function () {
        if (this.EndOffset + 1 > this.Count) return;

        var end = this.EndOffset + this.PageSize;
        this.ReqeustSearchStock(this.Search, this.SearchType, this.EndOffset, end);
    }

    ///////////////////////////////////////////////////////////////////////
    //查询股票
    this.ReqeustSearchStock = function (input, type, start, end) {
        var self = this;

        wx.request({
            url: this.SearchStockApiUrl,
            data: {
                "input": input,
                "start": start,
                "end": end,
                "type": type
            },


            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvSearchStockData(data, RECV_DATA_TYPE.SEARCH_STOCK_DATA);
            },
            fail: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.SEARCH_STOCK_DATA);
            }
        });
    }

    this.RecvSearchStockData = function (recvData) {

        var data = recvData.data;

        for (var i in data.stock) {
            var item = data.stock[i];
            this.Data.push({"Name": item.name, "Symbol": item.symbol, "Type": item.type});
        }

        if (data.count == 0) {
            this.Count = 0;
            this.EndOffset = 0;
        }
        else {
            if (this.Count == 0) this.Count = data.count;

            this.EndOffset = data.end;
            if (this.Count > 0 && this.EndOffset > this.Count) this.EndOffset = this.Count - 1;
        }

        if (typeof (this.UpdateUICallback) == 'function') this.UpdateUICallback(this);

    }

    this.RecvError = function (request, type) {
        // console.log("RecvError: datatype=" + type.toString());
        // console.log(request);

        if (typeof (this.UpdateUICallback) == 'function') this.UpdateUICallback(this, "error");

    }
}


//板块成分
function BlockMember(symbol) {
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSStockResource.Domain + "/API/StockBlockMember";
    this.PageSize = 10;      //一页几个数据
    this.Start = 0;           //取数据的起始位置
    this.OrderField;        //排序字段
    this.Order;             //排序方向 -1 /1
    this.Symbol = symbol;
    this.OrderNull = 0;       //排序是否提出null字段

    this.Field = new Array(); //字段
    this.Data = new Array();  //数据

    this.PageInfo; //分页信息

    this.SetField = function (aryFiled) {
        this.Field = new Array();
        for (let i in aryFiled) {
            let item = aryFiled[i];
            let name = StockDataFieldName.GetFieldName(item);
            if (name == null) continue;

            this.Field.push(name);
        }
        // this.Field = aryFiled.length > 0 ? aryFiled : [];

        return this.Field.length > 0;
    }

    this.SetOrder = function (fieldID, order) {
        this.Order = null;
        this.OrderField = null;

        let name = StockDataFieldName.GetFieldName(fieldID);
        if (name == null) return false;

        this.OrderField = name;
        this.Order = order;
        return true;
    }

    this.RequestData = function () {
        this.Data = [];
        var self = this;

        wx.request(
            {
                url: this.ApiUrl,
                data: {
                    "symbol": this.Symbol,
                    "field": this.Field,
                    "order": this.Order,
                    "orderfield": this.OrderField,
                    "start": this.Start,
                    "end": this.Start + this.PageSize,
                    "ordernull": this.OrderNull
                },
                method: 'POST',
                dataType: 'json',
                success: function (data) {
                    if (data.data.code != 0) {
                        wx.showModal({
                            title: '提示',
                            content: data.data.message,
                        })
                        return;
                    }
                    self.RecvData(data, RECV_DATA_TYPE.BLOCK_MEMBER_DATA);
                },
                fail: function (request) {
                    self.RecvError(request, RECV_DATA_TYPE.BLOCK_MEMBER_DATA);
                }
            });
    }

    this.RecvData = function (recvData, dataType) {

        let data = recvData.data;
        for (let i in data.stock) {
            let item = data.stock[i];
            if (item.symbol == null) continue;

            var stock = new StockData(item.symbol);
            stock.SetData(item);

            this.Data.push(stock);
        }

        this.PageInfo = {Count: data.count, Start: data.start, End: data.end};

        if (typeof(this.UpdateUICallback) == 'function')
            this.UpdateUICallback(this);

        this.AutoUpate(); //自动更新
    }

    this.RecvError = function (reqeust, dataType) {

    }

}

// 股权质押信息详情
function PledgeDetail(symbol, startDate, endDate) {
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSStockResource.Domain + "/API/PledgeDetail";
    this.Symbol = [];
    if (symbol) this.Symbol.push(symbol);
    this.StartDate = startDate;   //开始时间
    this.EndDate = endDate;       //结束时间

    this.Field = new Array(); //字段
    this.Data = new Array();  //数据

    this.RequestData = function () {
        this.Data = [];
        var self = this;

        wx.request(
            {
                url: this.ApiUrl,
                data: {
                    "SymbolList": this.Symbol,
                    "QueryDate": {
                        "StartDate": this.StartDate,
                        "EndDate": this.EndDate
                    }
                },
                method: 'POST',
                dataType: 'json',
                success: function (data) {
                    if (data.data.code != 0) {
                        wx.showModal({
                            title: '提示',
                            content: data.data.message,
                        })
                        return;
                    }
                    self.RecvData(data, RECV_DATA_TYPE.BLOCK_MEMBER_DATA);
                },
                fail: function (request) {
                    self.RecvError(request, RECV_DATA_TYPE.BLOCK_MEMBER_DATA);
                }
            });
    }

    this.RecvData = function (recvData, dataType) {

        let data = recvData.data;
        console.log("PledgeDetail", data);
        for (let i in data.list) {
            let item = data.list[i];
            this.Data.push({
                Symbol: item.symbol, Name: item.name,
                ReportDate: item.reportdate, Relievedate: item.relievedate,
                Patry: item.party, Relievecount: item.relievecount,
                PledgeFreezeCount: item.pledgefreezecount, PledgeFreezeStartDate: item.pledgefreezestartdate,
                Totalsharesrate: item.totalsharesrate
            });
        }


        if (typeof (this.UpdateUICallback) == 'function')
            this.UpdateUICallback(this);

        // this.AutoUpate(); //自动更新
    }

    this.RecvError = function (reqeust, dataType) {

    }

}


function IStockData() {
    this.IsAutoUpdate = true;           //是否自动更新
    this.AutoUpateTimeout = 5000;     //更新频率
    this.Timeout;   //定时器
    this.ApiUrl;
    this.Data;      //数据
    this.UpdateUICallback;            //回调函数

    this.ReqeustData = function () {

    }

    this.Stop = function () {
        // console.log("[IStockData::Stop] stop update.")
        this.IsAutoUpdate = false;
        if (this.Timeout) clearTimeout(this.Timeout);   //清空定时器
    }

    this.AutoUpate = function () {
        if (this.Timeout) clearTimeout(this.Timeout);   //清空定时器

        if (!this.IsAutoUpdate) return;

        //周日 周6 不更新， [9：30-3：30]以外的时间不更新
        var self = this;
        let today = new Date();
        let time = today.getHours() * 100 + today.getMinutes();
        if (today.getDay() > 0 && today.getDay() < 6 && time >= 930 && time < 1530)
            this.Timeout = setTimeout(function () {
                self.ReqeustData();
            }, this.AutoUpateTimeout);

    }
}

//短线精灵
function ShortTerm(symbol) {
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.Symbol = symbol; //数组
    this.ApiUrl = g_JSStockResource.Domain + "/API/StockShortTerm";
    this.Count = 20;  //请求数据个数

    this.ReqeustData = function () {
        var self = this;

        wx.request({
            url: this.ApiUrl,
            data: {
                "count": this.Count,
                "symbol": this.Symbol,
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.SHORT_TERM_DATA);
            },
            fail: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.SHORT_TERM_DATA);
            }
        });
    }

    this.RecvData = function (recvData, dataType) {
        let data = recvData.data;

        this.Data = [];
        for (let i in data.shortterm) {
            let item = data.shortterm[i];
            this.Data.push({
                Date: item.date,
                Name: item.name,
                Symbol: item.symbol,
                Time: item.time,
                Content: item.content,
                TypeInfo: item.typeinfo,
                Type: item.type
            });
        }

        if (this.UpdateUICallback) this.UpdateUICallback(this);

        this.AutoUpate();
    }

    this.RecvError = function (request, dataType) {

    }
}

//板块排名
function BlockTop() {
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.BlockType = 1; //板块类型
    this.Count = 20;

    this.OrderField = 'increase';             //排序字段
    this.Order = -1;                          //排序方向 -1 /1
    this.Field = ["symbol", "price", "name", "vol", "increase", "indextop"];

    this.ApiUrl = g_JSStockResource.Domain + "/API/StockBlockTop";

    this.SetField = function (field) {

    }

    this.ReqeustData = function () {
        var self = this;

        wx.request({
            url: this.ApiUrl,
            data: {
                "blocktype": this.BlockType,
                "start": 0,
                "end": this.Count,
                "field": this.Field,
                "orderfield": this.OrderField,
                "order": this.Order
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) {
                self.RecvData(data, RECV_DATA_TYPE.BLOCK_TOP_DATA);
            },
            fail: function (request) {
                self.RecvError(request, RECV_DATA_TYPE.BLOCK_TOP_DATA);
            }
        });
    }

    this.RecvData = function (recvData, dataType) {
        let data = recvData.data;
        //console.log(data);

        this.Data = [];
        for (let i in data.stock) {
            let item = data.stock[i];
            this.Data.push(
                {
                    Name: item.name,
                    Symbol: item.symbol,
                    Increase: item.increase,
                    IndexTop: {
                        Down: item.indextop.down,
                        Stop: item.indextop.stop,
                        Up: item.indextop.up,
                        Unchanged: item.indextop.unchanged,
                        DownStock: {Name: item.indextop.downstock.name, Symbol: item.indextop.downstock.symbol},
                        UpStock: {Name: item.indextop.upstock.name, Symbol: item.indextop.upstock.symbol}
                    }
                });
        }

        if (this.UpdateUICallback) this.UpdateUICallback(this);

        this.AutoUpate();
    }

    this.RecvError = function (request, dataType) {

    }

}

//是否是指数代码
function IsIndexSymbol(symbol) {
    var upperSymbol = symbol.toUpperCase();
    if (upperSymbol.indexOf('.SH') > 0) {
        upperSymbol = upperSymbol.replace('.SH', '');
        if (upperSymbol.charAt(0) == '0' && parseInt(upperSymbol) <= 3000) return true;

    }
    else if (upperSymbol.indexOf('.SZ') > 0) {
        upperSymbol = upperSymbol.replace('.SZ', '');
        if (upperSymbol.charAt(0) == '3' && upperSymbol.charAt(1) == '9') return true;
    }
    else if (upperSymbol.indexOf('.CI') > 0)  //自定义指数
    {
        return true;
    }

    return false;
}

//自定义指数  获取涨幅
function IndexIncrease(symbols, starttime, endtime) {
    this.IsAutoUpdate = true;          //自动更新
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.ApiUrl = g_JSStockResource.Domain + "/API/IndexIncrease";

    this.Symbol = symbols;
    this.starttime = starttime;
    this.endtime = endtime;
    var data = {
        "symbollist": this.Symbol,
        "querydate": {"startdate": this.starttime, "enddate": this.endtime}
    };

    this.ReqeustData = function () {
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: JSON.stringify(data),
            method: "POST",
            dataType: "json",
            success: function (data) {
                if (data.data.code != 0) {
                    wx.showModal({
                        title: '提示',
                        content: data.data.message,
                    })
                    return;
                }
                self.RecvData(data);
            },
            fail: function (request) {
                self.RecvError(request);
            }
        })
    }

    this.RecvData = function (recvData) {
        // console.log("recvData", recvData.data)

        if (recvData.data.list.length == 0) {
            return false;
        }
        this.Data = [];

        for (var i in recvData.data.list) {
            if (recvData.data.list[i] != null) {
                this.Data.push({
                    Symbol: recvData.data.list[i].symbol,
                    Increase: recvData.data.list[i].increase
                })
            }
        }

        if (this.UpdateUICallback) this.UpdateUICallback(this);

        if (this.IsAutoUpdate) {
            this.AutoUpate();
        }
    }

    this.RecvError = function (recvError) {
        this.Error = "请求失败";
        this.InvokeCallback();
    }
}

/////////////////////////////////////////////////////////////////
//
//  查询策略列表信息
//
function PolicyList()
{
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.IsAutoUpdate = true;          //自动更新
    this.AutoUpateTimeout=1000*30;  //1分钟更新一次
    this.ApiUrl = g_JSStockResource.Domain + "/API/PolicyList";
    this.Name=[];   //查询的策略名字列表

    this.RequestData = function () 
    {
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: 
            {
                "Name": this.Name,
                'stockdatatype':1,  //返回涨幅最高的2个股票信息
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) 
            {
                self.RecvData(data, RECV_DATA_TYPE.POLICY_LIST_DATA);
            },
            fail: function (request) 
            {
                self.RecvError(request, RECV_DATA_TYPE.POLICY_LIST_DATA);
            }
        });
    }

    this.RecvData = function (recvData, dataType) 
    {
        let data = recvData.data;
        if (data.data.length == 0) return false;

        var mapStock=new Map();
        for (let i in data.stockdata)
        {
            let item =data.stockdata[i];
            if (!item) continue;
            let guid=item[1];
            let dataItem={Guid:guid,Stock:[]};
            for(let j=2;j<item.length && j+2<item.length;j+=3)
            {
                let stock = { Symbol: item[j], Name: item[j + 1], Increase:item[j+2] };
                dataItem.Stock.push(stock);
            }

            if (dataItem.Stock.length>0) mapStock.set(dataItem.Guid,dataItem);
        }

        //console.log('[PolicyList:RecvData] mapStock',mapStock);
        
        this.Data = [];
        //0=策略名称 1=GUID 2=股票个数 3=上涨个数 4=下跌个数 5=平盘个数 6=涨停个数 7=跌停 8=策略整体涨幅，单位：%
        for (let i in data.data) //解析数据
        {
            let item = data.data[i];
            if (!item) continue;
            let guid=item[1];
            let dataItem = 
            {
                Name: item[0], Guid: item[1], Count: item[2],
                Up: item[3], Down: item[4], Unchange: item[5],
                UpMax: item[6], DownMax: item[7], Increase: item[8]
            };

            if (mapStock.has(guid)) dataItem.Stock=mapStock.get(guid).Stock;

            this.Data.push(dataItem);            
        }

        //console.log('[PolicyList:RecvData] Data', this.Data);

        if (this.UpdateUICallback) this.UpdateUICallback(this);

        this.AutoUpate();
    }

    this.RecvError = function (request, dataType) {

    }
}

//策略详情
function PolicyDetail()
{
    this.newMethod = IStockData;   //派生
    this.newMethod();
    delete this.newMethod;

    this.IsAutoUpdate=false;
    this.AutoUpateTimeout=1000*30;  //1分钟更新一次
    //https://web7-f5.zealink.com/Help/Api/POST-api-PolicyConfigStockList
    this.ApiUrl = g_JSStockResource.Domain + "/API/PolicyConfigStockList";
    this.Guid;   //查询的策略的Guid
    this.PageIndex=1;
    this.PageSize=20;
    this.Count=0;   //一共的股票个数

    this.RequestData = function () //请求第1页
    {
        this.Data = [];
        this.Request();
    }

    this.RecvData = function (recvData, dataType) 
    {
        let data = recvData.data;
        this.Count=data.count;
        
        var setSymbol=new Set();
        for(let i in this.Data)
        {
            setSymbol.add(this.Data[i].Symbol);
        }

        for (let i in data.list) //解析数据
        {
            let item = data.list[i];
            if (setSymbol.has(item.symbol)) continue;   //去掉重复的
            this.Data.push(
            {
                Name:item.name, Symbol:item.symbol,Price:item.price, DateTime:item.datetime 
            });
        }

        if (this.UpdateUICallback) this.UpdateUICallback(this);
    }

    this.Request=function()
    {
        var self = this;
        wx.request({
            url: this.ApiUrl,
            data: 
            {
                "guid": this.Guid,
                'pageinfo': {'pageindex':this.PageIndex, 'pagesize':this.PageSize}
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) 
            {
                self.RecvData(data, RECV_DATA_TYPE.POLICY_DETAIL_DATA);
            },
            fail: function (request) 
            {
                self.RecvError(request, RECV_DATA_TYPE.POLICY_DETAIL_DATA);
            }
        });
    }

    this.IsEndPage = function ()    //是否到最后一页了
    {
        return this.Count<=this.Data.length;
    }

    this.NextPage=function()        //下一页
    {
        ++this.PageIndex;
        this.Request();
    }

    this.RecvError = function (request, dataType) {

    }
}

//分析板块请求数据
function AnalylisPlate()
{
  this.newMethod = IStockData;   //派生
  this.newMethod();
  delete this.newMethod;

  // 
  this.ApiUrl = g_JSStockResource.Domain + "/api/StockListAnalyze";
  this.ApiUrl = "https://apitest.zealink.com" + "/api/StockListAnalyze";
  this.PolicyGuid;   //查询策略的Guid
  this.Plate = "";      //板块id
  this.SymbolList = [];   //股票列表

  this.RequestData = function()
  {
    var self = this;
    wx.request({
      url: self.ApiUrl,
      data:
      {
        "PolicyGuid": self.PolicyGuid,
        "Plate": self.Plate,
        "Symbol": self.SymbolList
      },
      method: 'POST',
      dataType: 'json',
      success: function (res) {
        if (res.data.code != 0){
          wx.showModal({
            title: '提示',
            content: res.data.message,
          })
          return;
        }
        self.RecvData(res);
      },
      fail: function (request) {
        self.RecvError(request);
      }
    });
  }

  this.RecvData = function(recvData)
  {
    this.Data = {};
    // console.log(recvData.data,"recvData,分析板块")
    var data = recvData.data;
    if (data.count == 0) return;
    
    if (data.concept){    //概念占比
      // 0 = 概念名称 1 = 代码 0 = 占比 3 = 个数 4 = 涨幅 5 = 最新价 6 = 一周涨幅 7 = 四周涨幅
      var conceptList = [];
      for (var i in data.concept.data){
        var item = data.concept.data[i];
        var info = {};
        info.Name = item[0];
        info.Symbol = item[1];
        info.Ratio = item[2];
        info.Count = item[3];
        info.Increase = item[4];
        info.Price = item[5];
        info.Week1 = item[6];
        info.Week4 = item[7];
        conceptList.push(info);
      }
      this.Data.Concept = conceptList;
    }
    if (data.distributed) {    //股票类型占比
      this.Data.Distributed = data.distributed;
    }
    if (data.industry) {    //行业占比
      this.Data.Industry = data.industry;
    }
    if (data.quadrant) {    //四象限占比
      this.Data.Quadrant = data.quadrant;
    }
    if (data.region) {    //四象限占比
      this.Data.Region = data.region;
    }

    // console.log(this.Data,"this.Data")
    if (this.UpdateUICallback) this.UpdateUICallback(this);
  }

  this.RecvError = function (request)
  {
    console.log(request)
  }
}

//热词请求数据
function HotWord(){
  this.newMethod = IStockData;   //派生
  this.newMethod();
  delete this.newMethod;

  this.ApiUrl = g_JSStockResource.Domain + "/api/HotWordAnalyze";
  this.Count = 0;   //一共的热词个数

  this.RequestData = function () {
    this.Data = [];
    var self = this;
    wx.request({
      url: self.ApiUrl,
      data:{},
      method: 'POST',
      dataType: 'json',
      success: function (res) {
        if (res.data.code != 0) {
          wx.showModal({
            title: '提示',
            content: res.data.message,
          })
          return;
        }
        self.RecvData(res);
      },
      fail: function (request) {
        self.RecvError(request);
      }
    });
  }

  this.RecvData = function (recvData) {
    // console.log(recvData, "recvData热词")
    let data = recvData.data;
    this.Count = data.count;
    if (data.count == 0) return;

    for (var i in data.list){
      var item = data.list[i];
      var info = {};
      info.Word = item.word;
      info.Count = item.count;
      info.Ratio = item.ratio;
      info.Topstock = item.topstock;
      this.Data.push(info)
    }

    // console.log(this.Data,"this.Data")
    if (this.UpdateUICallback) this.UpdateUICallback(this);
  }

  this.RecvError = function (request) {
    console.log(request)
  }
}

//财务指标 同时请求多个股票数据
function financeIndicators(){
  this.newMethod = IStockData;   //派生
  this.newMethod();
  delete this.newMethod;

  this.ApiUrl = g_JSStockResource.Domain + "/api/Stock";
  this.SymbolList = ["600000.sh", "000001.sz", "000158.sz"];

  this.RequestData = function () {
    this.Data = [];
    var self = this;
    wx.request({
      url: self.ApiUrl,
      data: {
        "symbol": self.SymbolList,
        "field": ["symbol", "name", "eps", "pe", "pb", "peg", "roe", "events.netprofitrate", "finance.woewa", "finance.alratio", "finance.grossmargin", "finance.perccfo"],
        "orderfield": "increase",
        "order": -1,
        "start": 0,
        "end": 100
      },
      method: 'POST',
      dataType: 'json',
      success: function (res) {
        if (res.data.code != 0) {
          wx.showModal({
            title: '提示',
            content: res.data.message,
          })
          return;
        }
        self.RecvData(res);
      },
      fail: function (request) {
        self.RecvError(request);
      }
    });
  }

  this.RecvData = function (recvData) {
    // console.log(recvData, "recvData财务")
    let data = recvData.data;
    this.Count = data.count;
    if (data.count == 0) return;

    for (var i in data.stock) {
      var item = data.stock[i];
      var info = {};
      info.Name = item.name;
      info.Symbol = item.symbol;
      info.Pb = item.pb;
      info.Pe = item.pe;
      info.Peg = item.peg;
      info.Roe = item.roe;
      info.Eps = item.eps;
      info.EventsNetprofitrate = item.events.netprofitrate;
      info.FinanceAlratio = item.finance.alratio;
      info.FinanceGrossmargin = item.finance.grossmargin;
      info.FinancePerccfo = item.finance.perccfo;
      info.FinanceWoewa = item.finance.woewa;

      this.Data.push(info);
    }

    if (this.UpdateUICallback) this.UpdateUICallback(this);
  }

  this.RecvError = function (request) {
    console.log(request)
  }
  

}


//股票历史数据字段枚举
var STOCK_HISTORY_FIELD_NAME =
    {
        //100-199  1季度
        FINANCE1_NPROFITINCREASE: 100,
        FINANCE1_NNPROFITINCREASE: 102,
        FINANCE1_NNPROFITSPEED: 103,
        FINANCE1_YEAR: 104,                //年报报告期年份
        FINANCE1_QUARTER: 105,             //报告季度
        FINANCE1_BENFORD: 106,

        //200-299 2季度
        FINANCE2_NPROFITINCREASE: 201,
        FINANCE2_NNPROFITINCREASE: 202,
        FINANCE2_NNPROFITSPEED: 203,
        FINANCE2_YEAR: 204,                //年报报告期年份
        FINANCE2_QUARTER: 205,             //报告季度
        FINANCE2_BENFORD: 206,

        //300-399 3季度
        FINANCE3_NPROFITINCREASE: 301,
        FINANCE3_NNPROFITINCREASE: 302,
        FINANCE3_NNPROFITSPEED: 303,
        FINANCE3_YEAR: 304,                //年报报告期年份
        FINANCE3_QUARTER: 305,             //报告季度
        FINANCE3_BENFORD: 306,

        //400-499 4季度
        FINANCE4_NPROFITINCREASE: 401,
        FINANCE4_NNPROFITINCREASE: 402,
        FINANCE4_NNPROFITSPEED: 403,
        FINANCE4_YEAR: 404,                //年报报告期年份
        FINANCE4_QUARTER: 405,             //报告季度
        FINANCE4_BENFORD: 406,             //财务粉饰

        //1001  大宗交易
        BLOCK_TRADING: 1001,                //大宗交易
        HOLDERS_CHANGES: 1002,              //股东减持
        LIFTING: 1003,                      //限售解禁
        PFORECAST: 1004,                    //业绩公告
        SHORTIND_ICATORS: 1005,              //空头指标
    };

//历史数据  个股财务粉饰 || 大宗交易 || 股东减持 || 限售解禁 || 业绩预告 || 空头指标
function JSStockHistory() {
    this.Symbol;
    this.Callback;      //UI回调
    this.Order = -1;      //排序方向
    this.SortField;     //排序字段
    this.Field;         //返回字段
    this.Plate;         //全市场
    this.Data = new Map();          //数据
    this.ApiUrl = g_JSStockResource.Domain + "/API/StockHistoryDay";
    this.PageSize = 20 ;//一页请求10调数据
    this.PageIndex = 1;
    this.Count;//数据总数
    this.currentData = null;//请求入参


    this.RequsetData = function (condition, condition2) {
        var self = this;
        var currentSymbol = typeof(self.Symbol) == "string" ? [this.Symbol] : this.Symbol;
        var currentSymbolLength = currentSymbol ? currentSymbol.length : 0;

        if (this.Plate){
          this.currentData = {
            "plate": this.Plate,//["CNA.ci"],
            "symbol": currentSymbol,
            "start": 0,
            "end": this.PageSize,
            "field": this.Field,
            "orderfield": this.SortField,
            "order": this.Order,
            "condition": condition.GetQuery(),
            "condition2": condition2 ? condition2.GetQuery() : [],
          }
        }else{
          this.currentData = {
            "symbol": currentSymbol,
            "start": 0,
            "end": currentSymbolLength,
            "field": this.Field,
            "orderfield": this.SortField,
            "order": this.Order,
            "condition": condition.GetQuery(),
            "condition2": condition2 ? condition2.GetQuery() : [],
          }
        }
        
        wx.request({
            url: this.ApiUrl,
            data: self.currentData,
            method: 'POST',

            dataType: 'json',
            success: function (data) {
              self.Count = data.data.count;
              self.RecvData(data, condition);
            },
            fail: function (request) {
                self.RecvError(request, condition);
            }
        });
    }

    this.GetNextPage = function () {
      var self = this;

      if (this.PageSize * this.PageIndex < this.Count){
        this.currentData.start = this.PageSize * this.PageIndex;
        this.PageIndex++;
        this.currentData.end = this.PageSize * this.PageIndex;
        
        wx.request({
          url: this.ApiUrl,
          data: self.currentData,
          method: 'POST',
          dataType: 'json',
          success: function (data) {
            self.RecvData(data);
          },
          fail: function (request) {
            self.RecvError(request);
          }
        });
      }else{
        wx.showToast({
          title: "数据已全部加载",
          icon: 'success',
          duration: 1000
        })
      }
  
    }

    //结果处理  个股财务粉饰
    this.RecvData = function (recvData, condition) {
        let data = recvData.data;
        for (let i in data.stock) {
            let item = data.stock[i];
            let strSymbol = item.symbol;
            let stockData = {};
            // console.log("this.Data.has(strSymbol)", this.Data, strSymbol, this.Data.has(strSymbol));
            if (this.Data.has(strSymbol)) {
                stockData = this.Data.get(strSymbol);
            }
            else {
                stockData = {
                    Symbol: item.symbol,
                    Name: item.name,
                    Data: new Map() //Map key=日期  value=Map(key=字段名, value=数值)
                };

                this.Data.set(strSymbol, stockData);
            }

            this.SetStockData(item, stockData);
        }

        if (this.Callback) this.Callback(this, condition);
    }

    this.SetStockData = function (data, stockData) {
        for (let i in data.stockday) {
            let item = data.stockday[i];
            let date = item.date;
            let dataMap = new Map();
            this.SetFinanceData(item, dataMap);
            this.SetBlocktradingData(item, dataMap);
            this.SetChangesData(item, dataMap);
            this.SetLiftingData(item, dataMap);
            this.SetPforecastData(item, dataMap);
            this.SetShortIndicatorsData(item, dataMap);
            stockData.Data.set(date, dataMap);
        }

        return stockData;
    }

    this.SetFinanceData = function (recvData, dataMap) {
        //1季度
        var finnance = recvData.finance1;
        if (finnance) {
            if (!isNaN(finnance.nprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE1_NPROFITINCREASE, finnance.nprofitincrease);
            if (!isNaN(finnance.nnprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE1_NNPROFITINCREASE, finnance.nnprofitincrease);
            if (!isNaN(finnance.nnprofitspeed)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE1_NNPROFITSPEED, finnance.nnprofitspeed);
            if (!isNaN(finnance.benford)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE1_BENFORD, finnance.benford);
        }

        var announcement = recvData.announcement1;
        if (announcement) {
            if (!isNaN(announcement.year)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE1_YEAR, announcement.year);
            if (!isNaN(announcement.quarter)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE1_QUARTER, announcement.quarter);
        }

        //2季度
        var finnance = recvData.finance2;
        if (finnance) {
            if (!isNaN(finnance.nprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE2_NPROFITINCREASE, finnance.nprofitincrease);
            if (!isNaN(finnance.nnprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE2_NNPROFITINCREASE, finnance.nnprofitincrease);
            if (!isNaN(finnance.nnprofitspeed)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE2_NNPROFITSPEED, finnance.nnprofitspeed);
            if (!isNaN(finnance.benford)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE2_BENFORD, finnance.benford);
        }

        var announcement = recvData.announcement2;
        if (announcement) {
            if (!isNaN(announcement.year)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE2_YEAR, announcement.year);
            if (!isNaN(announcement.quarter)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE2_QUARTER, announcement.quarter);
        }

        //3季度
        var finnance = recvData.finance3;
        if (finnance) {
            if (!isNaN(finnance.nprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE3_NPROFITINCREASE, finnance.nprofitincrease);
            if (!isNaN(finnance.nnprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE3_NNPROFITINCREASE, finnance.nnprofitincrease);
            if (!isNaN(finnance.nnprofitspeed)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE3_NNPROFITSPEED, finnance.nnprofitspeed);
            if (!isNaN(finnance.benford)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE3_BENFORD, finnance.benford);
        }

        var announcement = recvData.announcement3;
        if (announcement) {
            if (!isNaN(announcement.year)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE3_YEAR, announcement.year);
            if (!isNaN(announcement.quarter)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE3_QUARTER, announcement.quarter);
        }

        //4季度
        var finnance = recvData.finance4;
        if (finnance) {
            if (!isNaN(finnance.nprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE4_NPROFITINCREASE, finnance.nprofitincrease);
            if (!isNaN(finnance.nnprofitincrease)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE4_NNPROFITINCREASE, finnance.nnprofitincrease);
            if (!isNaN(finnance.nnprofitspeed)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE4_NNPROFITSPEED, finnance.nnprofitspeed);
            if (!isNaN(finnance.benford)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE4_BENFORD, finnance.benford);
        }

        var announcement = recvData.announcement4;
        if (announcement) {
            if (!isNaN(announcement.year)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE4_YEAR, announcement.year);
            if (!isNaN(announcement.quarter)) dataMap.set(STOCK_HISTORY_FIELD_NAME.FINANCE4_QUARTER, announcement.quarter);
        }
    }

    //大宗交易
    this.SetBlocktradingData = function (recvData, dataMap) {
        var blocktrading = recvData.blocktrading;
        if (blocktrading) {
            dataMap.set(
                STOCK_HISTORY_FIELD_NAME.BLOCK_TRADING,
                {
                    Premium: blocktrading.premium,////总溢价
                    Price: blocktrading.price, //总成交价
                    Vol: blocktrading.vol, //总成交量
                    Amount: blocktrading.amount//成交额
                }
            );
        }
    }

    //股东减持
    this.SetChangesData = function (recvData, dataMap) {
        var changes = recvData.changes;
        if (changes) {
            dataMap.set(
                STOCK_HISTORY_FIELD_NAME.HOLDERS_CHANGES, {List: changes.list}
            );
        }
    }

    //限售解禁
    this.SetLiftingData = function (recvData, dataMap) {
        var lifting = recvData.lifting;
        if (lifting) {
            // console.log("lifting",lifting);
            dataMap.set(
                STOCK_HISTORY_FIELD_NAME.LIFTING, {Lifting: lifting}
            );
        }
    }

    //业绩公告
    this.SetPforecastData = function (recvData, dataMap) {
        var pforecast = recvData.pforecast;
        if (pforecast) {
            // console.log("pforecast", pforecast)
            dataMap.set(
                STOCK_HISTORY_FIELD_NAME.PFORECAST,
                {
                    Lowprofit: pforecast[0].lowprofit,////最低利润
                    Highprofit: pforecast[0].highprofit, //最高利润
                    Lowchange: pforecast[0].lowchange, //最小变动幅度
                    Highchange: pforecast[0].highchange, //最小变动幅度
                    Reportdate: pforecast[0].reportdate, //报告期
                }
            );
        }
    }

    //空头指标
    this.SetShortIndicatorsData = function (recvData, dataMap) {
        // console.log("recvData,dataMap", recvData, dataMap);
        var policy = recvData.policy;
        if (policy) {
            const targetedList = ['三只乌鸦', '乌云盖顶', '黄昏之星', '巨量阴线', '头肩顶', '射击之星', '倾盆大雨', '断头铡刀', '淡友反攻', '空方炮', '连续1周空头排列'];
            let targetedCount = 0, timeList = [], latestTime = 0, latestName = '';
            // console.table(policy); //policy
            policy.forEach(e => {
                let isTarget = targetedList.some(c => c === e.name);
                if (isTarget) {
                    targetedCount++;
                    timeList.push(e.time);
                }
            });
            if(!targetedCount){
                latestName = '';
            }else {
                latestTime = Math.max.apply(timeList, timeList);
                latestName = policy.find(e => e.time === latestTime).name;
            }
            console.log(latestName,targetedCount, "latestName-targetedCount");
            dataMap.set(
                STOCK_HISTORY_FIELD_NAME.SHORTIND_ICATORS,
                {
                    latestIndicatorName: latestName,///最新指标名称
                    indicatorCount: targetedCount, //最新指标数量
                }
            );
        }
    }

    this.RecvError = function (request, condition) {

    }

    this.CreateCondition = function (name) {
        return new QueryCondition(name);
    }
}


function QueryCondition(name) {
    this.Data = new Array();
    this.Name = name;

    this.CreateConditionItem = function (filed, fieldType) {
        let item = new QueryConditionItem();
        item.Field = filed;
        item.FieldType = fieldType;
        return item;
    }

    this.AddCondition = function (Item) {
        this.Data.push(Item);
    }

    this.GetQuery = function () {
        let query = new Array();
        for (let i in this.Data) {
            let item = this.Data[i];
            query.push({item: item.GetQuery()});
        }

        return query;
    }
}

function QueryConditionItem() {
    this.Field;             //筛选字段
    this.FieldType;         //字段类型
    this.Condition = Array(); //条件 {OP:操作符 , Value:数值}

    this.AddEqual = function (value) {
        this.Condition.push({OP: "eq", Value: value})
    }

    //>=
    this.AddGTE = function (value) {
        this.Condition.push({OP: "gte", Value: value})
    }

    //<=
    this.AddLTE = function (value) {
        this.Condition.push({OP: "lte", Value: value})
    }

    //Exists
    this.AddExists = function (value) {
        this.Condition.push({OP: 'exists', Value: value});
    }

    //lifting
    this.ADDLifting = function (value) {
        this.Condition.push({OP: "lifting", Value: value})
    }

    //date
    this.ADDDate = function (value) {
        this.Condition.push({OP: "date", Value: value})
    }

    //key value
    this.ADDKEY = function (key, value) {
        this.Condition.push({OP: key, Value: value})
    }

    this.GetQuery = function () {
        let condition = new Array();
        condition[0] = this.Field;
        condition[1] = this.FieldType;
        for (let i in this.Condition) {
            let item = this.Condition[i];
            condition.push(item.OP);
            item.Value = item.Value.toString();
            if (item.Value) {
                condition.push(item.Value.toString());
            }
        }

        // console.log("condition", condition);
        return condition;
    }
}


module.exports =
    {
        JSCommonStock: {
            JSStockInit:JSStock.Init,

            JSStock: JSStock,
            StockRead: StockRead,
            STOCK_FIELD_NAME: STOCK_FIELD_NAME,
            FinanceData: FinanceData,
            RECV_DATA_TYPE: RECV_DATA_TYPE,
            STOCK_HISTORY_FIELD_NAME: STOCK_HISTORY_FIELD_NAME
        }
    };



