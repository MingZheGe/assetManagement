//小程序 分享绘图类


var g_JSShareImageResource =
{
    Domain: "https://opensource.zealink.com",               //API域名
    CacheDomain: "https://opensourcecache.zealink.com",      //缓存域名
    CacheDomain2:"https://opensourcecache2.zealink.com"
}

function JSCanvasElement() 
{
    this.Height;
    this.Width;
    this.ID;
  
    //获取画布
    this.GetContext = function () 
    {
      return wx.createCanvasContext(this.ID);
    }
}
  
function JSShareChart(element) 
{
    this.CanvasElement = element;
    this.SharePaint;
    this.Canvas = element.GetContext("2d"); //画布

    this.ChartBorder = new ShareChartBorder();
    this.ChartBorder.UIElement = element;
    this.Callback;      //事件回调 function(事件名称, this)

    this.OnSize = function () 
    {
        if (this.SharePaint)
        {
            if (typeof(this.SharePaint.SetSizeChage)=='function') this.SharePaint.SetSizeChage(true);
            this.SharePaint.Draw();
        }
    }

    this.SetOption = function (option) 
    {
        var chart=null;
        switch(option.Type)
        {
            case '大V分享':
                chart=new BigVShare();
                break;
            case '调研分享':
                chart=new ResearchShare();
                break;
        }

        if (option.Callback) this.Callback=option.Callback;
        chart.Canvas = this.Canvas;         
        chart.ChartBorder = this.ChartBorder;
        chart.SetOption(option);
        this.SharePaint=chart;
        if (option.DrawSkeleton) this.DrawSkeleton();
        else this.Draw();
    }

    this.Draw=function()
    {
        if (!this.SharePaint) return;
        this.SharePaint.Draw();

        var self =this;
        this.Canvas.draw(false, 
            function()
            {
                console.log('[JSShareChart:draw] finish.');
                if (self.Callback)
                {
                    console.log('[JSShareChart:draw] wait 2s to invoke callback function.');
                    setTimeout( function() { self.Callback('JSShareChart.Draw.Finish', this) }, 2000)    //延迟2秒在通知 确保图已经画好了
                }
            }
        );
    }

    this.Save=function(callback)    //保存到临时目录
    {
        var width = this.ChartBorder.GetChartWidth();
        var height = this.ChartBorder.GetChartHeight();
        wx.canvasToTempFilePath({
            x: 0,
            y: 0,
            width: width,
            height: height,
            canvasId: this.ChartBorder.UIElement.ID,
            success: function (res) 
            {
                var saveFilePath = res.tempFilePath;
                console.log('[JSShareChart::Save]', saveFilePath);
                if (callback) callback(saveFilePath);
            }
        })
    }

    this.DrawSkeleton=function()
    {
        if (!this.SharePaint) return;
        if (!this.SharePaint.DrawSkeleton) return;
        this.SharePaint.DrawSkeleton();
        this.Canvas.draw(false, 
            function()
            {
                console.log('[JSShareChart:DrawSkeleton] finish.');
            }
        );
    }
}

//初始化
JSShareChart.Init = function (uielement) 
{
    console.log('[JSShareChart.Init] uielement', uielement);
    var jsChartControl = new JSShareChart(uielement);
    jsChartControl.OnSize();

    return jsChartControl;
}

JSShareChart.SetDomain = function (domain, cacheDomain, cacheDomain2) 
{
    if (domain) g_JSShareImageResource.Domain = domain;
    if (cacheDomain) g_JSShareImageResource.CacheDomain = cacheDomain;
    if (cacheDomain2) g_JSShareImageResource.CacheDomain2 = cacheDomain2;
}

//批量下载数据
function JSDownloadControl()
{
    this.Callback;      //下载完成通知事件(每下完一个文件都回调用))
    this.FileData;      //Key:url Value: { Local:本地地址, Status: 状态 0=空闲 1=下载中, 2=生成二维码, 20=下载成功 30=失败 , Message:错误信息, QRCode:二维码}
                        //QRCode:{Product:产品id, Path:小程序路径, Url:返回的链接地址}

    this.QRCodeApiUrl ='/api/GetWXACode';

    //设置下载文件
    this.SetFiles=function(files)
    {
        this.FileData=new Map();
        for(var i in files)
        {
            var item=files[i];
            if (typeof(item)=='string')
            {
                if (this.FileData.has(item)) continue;
                this.FileData.set(files[i],{ Status:0 });
            }
            else    //二维码
            {
              this.FileData.set(item.Name, { Status: 0, QRCode: item }); //后期会添加url,修改Status
            }
        }
    }

    //开始下载
    this.Start=function()
    {
        var self=this;
        for (var item of this.FileData)
        {
            console.log('[JSDownloadControl::Start] start dowloand ', item[0]);
            var value = item[1];
            if (value.QRCode)   //二维码 需要先生成
            {
                this.CreateQRCode(value.QRCode,item[0]);
            }
            else
            {
                value.Status=1;
                this.DowloadSingleFile(item[0], item[0]);
            }
        }
    }

    this.GetLocalFile=function(url)
    {
        if (!this.FileData) return null;
        if (!this.FileData.has(url)) return null;

        var item = this.FileData.get(url);
        return item;
    }

    //是否下载完成
    this.IsDoloadFinish=function()
    {
        if (!this.FileData) return true;

        for(var item of this.FileData)  //判断是否全部下载完成
        {
            if (item[1].Status<=10) return false;
        }

        return true;
    }

    //内部方法

    //单个文件下载
    this.DowloadSingleFile = function (file,id) 
    {
        var url = file;
        var key = id;
        var self = this;

        if (url.indexOf('../')===0) //本地图片 不用下载
        {
            var item = self.FileData.get(key);
            item.Status = 20;
            item.Local = url;
        }
        else
        {
            wx.downloadFile({
                url: url,
                success(res) {
                    console.log('[JSDownloadControl::DowloadSingleFile] dowload finish', url);
                    var item = self.FileData.get(key);
                    if (res.statusCode === 200) {
                        item.Status = 20;
                        item.Local = res.tempFilePath;
                    }
                    else {
                        item.Status = 30;
                        item.Message = res.errMsg;
                    }

                    if (self.Callback) self.Callback(self);
                }
            })
        }
    }

    this.CreateQRCode=function(qrParam,id)
    {
        var self=this;
        var key=id;
        console.log('[JSDownloadControl::CreateQRCode] request data', qrParam.Product, qrParam.Path);
        wx.request({
            url: g_JSShareImageResource.Domain + this.QRCodeApiUrl,
            data:
            {
              "Product": qrParam.Product,
              "Path": qrParam.Path,
              "Width": 280,
              "IsHyaline": true
            },
            method: 'POST',
            dataType: 'json',
            success: function (data) 
            {
              if (data.data.code === 0){
                var relativeUrl = data.data.relativeurl;
                var qrUrl = g_JSShareImageResource.CacheDomain2 + '/' + relativeUrl;
                  console.log('[JSDownloadControl::CreateQRCode] QR image url', qrUrl);
                var item = self.FileData.get(key);
                item.Url = qrUrl; //地址
                item.Status = 1;  //下载中
                self.DowloadSingleFile(qrUrl, key);
              }else{
                var item = self.FileData.get(key);
                item.Url = ''; //地址
                item.Status = 30;  //失败
              }
              
            },
            fail:function(data){
              var item = self.FileData.get(key);
              item.Url = ''; //地址
              item.Status = 30;  //失败
            }
        });
    }
}

function ISharePainting()
{
    this.Canvas;                        //画布
    this.ChartBorder;                   //边框信息
    this.Name;                          //名称
    this.ClassName='ISharePainting';    //类名
    this.Data;                          //数据区
    this.IsShow=true;
    this.IsDebug = false;

    //绘制接口
    this.Draw=function()
    {

    }

    //画骨架屏接口
    this.DrawSkeleton=null;

    //设置接口
    this.SetOption=function(option)
    {

    }


    this.SetBorder=function(option)
    {
        if (option.Border) 
        {
            if (option.Border.Left >= 0) this.ChartBorder.Left = option.Border.Left;
            if (option.Border.Top >= 0) this.ChartBorder.Top = option.Border.Top;
            if (option.Border.Right >= 0) this.ChartBorder.Right = option.Border.Right;
            if (option.Border.Bottom >= 0) this.ChartBorder.Bottom = option.Border.Bottom;
        }
    }

    this.CalculateText=function(text,width)
    {
        var aryText=[];
        var outText='';
        var word=null,preWord=null;
        for(var i=0;i<text.length;++i)
        {
            word=text[i];
            if (word=='\r') //换行
            {
                aryText.push(outText);
                outText = '';
            }
            else if (word=='\n')
            {
                if (preWord!='\r')  //\r\n 不处理
                {
                    aryText.push(outText);
                    outText = '';
                }
            }
            else
            {
                outText+=text[i];
                var textWidth = this.Canvas.measureText(outText).width;
                if (textWidth>=width)
                {
                    aryText.push(outText);
                    outText='';
                }
            }

            preWord = word;
        }

        if (outText.length > 0) aryText.push(outText);
        console.log('[ISharePainting::CalculateText]', aryText)
        return aryText;
    }

    this.FillMulitLineText=function(obj)
    {
        var left=obj.Left;
        var top=obj.Top;
        var fontHeight=obj.FontHeight;
        var width=obj.Width;
        var height=obj.Height;
        var lineSpace=obj.LineSpace;    //行间距
        var bottom = top + height;

        for(var i in obj.Text)
        {
            var item = obj.Text[i];
            this.Canvas.fillText(item, left, top, width);
            top += fontHeight + lineSpace;
            if (top + fontHeight>bottom) break;
        }
    }

    this.LogRect = function (left, right, width, height) 
    {
        if (this.IsDebug == false) return;
        this.Canvas.strokeStyle = 'rgb(100,100,100)';
        this.Canvas.strokeRect(left, right, width, height);
    }

    //默认骨架屏画法
    this.Default_DrawSkeleton=function(option)
    {
        var left = this.ChartBorder.GetLeft();
        var right = this.ChartBorder.GetRight();
        var top = this.ChartBorder.GetTop();
        var bottom = this.ChartBorder.GetBottom();
        var  width = this.ChartBorder.GetWidth();

        this.Canvas.fillStyle = 'rgb(192,192,192)';
        this.Canvas.beginPath();
        //标题
        var textLeft = left, textTop = top, textWidth = (right - left), textHeight = 35;
        this.Canvas.rect(textLeft, textTop, textWidth, textHeight);

        //头像(圆)
        var imageSize = 40;
        var imageLeft = left, imageTop = 73;
        var radius = imageSize / 2;
        //this.Canvas.rect(imageLeft, imageTop, imageSize, imageSize);
        this.Canvas.arc(imageLeft + radius, imageTop + radius, radius, 0, 2 * Math.PI);


        //名字
        var textLeft = left + imageSize + 16, textRight = right-20, textHeight=20;
        var textTop = 73 + (imageSize - textHeight)/2;
        this.Canvas.rect(textLeft, textTop, (textRight - textLeft), textHeight);

        //内容:
        var textLeft = left, textTop = 142, textRight = right, textWidth = textRight - textLeft;
        var textHeight = 100;
        this.Canvas.rect(textLeft, textTop, textWidth, textHeight);

        //二维码(圆)
        var imageSize = 80;
        var radius = imageSize/2;
        var imageLeft = left, imageTop = bottom - imageSize;
        //this.Canvas.rect(imageLeft, imageTop, imageSize, imageSize);
        this.Canvas.arc(imageLeft + radius, imageTop + radius, radius, 0, 2 * Math.PI);

        //右边文字
        var textLeft = imageLeft + imageSize + 10, textRight = right, textWidth = textRight - textLeft;
        var textHeight = 20;
        var textTop = bottom - imageSize + (imageSize - (20+16+5)) / 2;
        this.Canvas.rect(textLeft, textTop, textWidth, textHeight);

        textTop+=textHeight+5;
        textHeight=16
        this.Canvas.rect(textLeft, textTop, textWidth-10, textHeight);

        this.Canvas.fill(); //统一最后填充颜色, 提高效率(不单独使用fillRect)
    }
}

//边框信息
function ShareChartBorder()
{
    this.UIElement;

    //四周间距
    this.Left=50;
    this.Right=80;
    this.Top=50;
    this.Bottom=50;

    this.GetChartWidth=function()
    {
        return this.UIElement.Width;
    }

    this.GetChartHeight=function()
    {
        return this.UIElement.Height;
    }

    this.GetLeft=function()
    {
        return this.Left;
    }

    this.GetRight=function()
    {
        return this.UIElement.Width-this.Right;
    }

    this.GetTop=function()
    {
        return this.Top;
    }


    this.GetBottom=function()
    {
        return this.UIElement.Height-this.Bottom;
    }


    this.GetWidth=function()
    {
        return this.UIElement.Width-this.Left-this.Right;
    }

    this.GetHeight=function()
    {
        return this.UIElement.Height-this.Top-this.Bottom;
    }
}

//大V
function BigVShare()
{
    this.newMethod=ISharePainting;   //派生
    this.newMethod();
    delete this.newMethod;

    this.DrawSkeleton = this.Default_DrawSkeleton;    //骨架屏画法用默认的(如果要定制的, 重写这个方法) 
    this.ClassName = 'BigVShare';    //类名
    this.Title;         //标题
    this.Content;       //内容
    this.QRCode;        //二维码图地址
    this.BGImage = 'https://opensourcecache.zealink.com/cache/wechat/shareimage/bigv/bg.png';       //背景图片地址
    this.Avatar;        //头像图片地址
    
    this.Draw=function()
    {
        var left=this.ChartBorder.GetLeft();
        var right=this.ChartBorder.GetRight();
        var top=this.ChartBorder.GetTop();
        var bottom=this.ChartBorder.GetBottom();

        if (this.BGImage) 
        {
            //console.log('[BigVShare::Draw]', this.BGImage);
            this.Canvas.drawImage(this.BGImage, 0, 0, this.ChartBorder.GetChartWidth(), this.ChartBorder.GetChartHeight());
        }

        if (this.Title)
        {
            var textLeft = left, textTop = top, textWidth=(right-left),textHeight=35;
            this.Canvas.font = 'bold 14px PingFang';
            this.Canvas.textAlign = "left";
            this.Canvas.textBaseline = "top";
            this.Canvas.fillStyle = 'rgb(51,51,51)';
            var aryText=this.CalculateText(this.Title, textWidth);

            var drawObject = { Left: textLeft, Top: textTop, Text: aryText, FontHeight: 14, Width: textWidth, Height: textHeight, LineSpace:3};
            this.FillMulitLineText(drawObject);
            
            this.LogRect(textLeft, textTop, textWidth, textHeight);
        }

        var imageSize=0;
        if (this.Avatar)    //头像
        {
            imageSize = 39;
            var imageLeft = left, imageTop = 73;
            this.Canvas.drawImage(this.Avatar, imageLeft, imageTop, imageSize, imageSize);
        }

        if (this.Author)    //作者名字
        {
            var textLeft = left + imageSize+16,textRight = right, textWidth = textRight - textLeft;
            var textHeight = 39;
            var textTop = 73 + textHeight/2;
            this.Canvas.font = 'bold 12px PingFang';
            this.Canvas.textAlign = "left";
            this.Canvas.textBaseline = "middle";
            this.Canvas.fillStyle = 'rgb(51,51,51)';
            this.Canvas.fillText(this.Author, textLeft, textTop, textWidth);
        }

        if (this.Content)
        {
            var textLeft = left + 12, textTop = 142, textRight = right - 12, textWidth = textRight - textLeft;
            var textHeight=92;
            this.Canvas.font = '12px PingFang';
            this.Canvas.textAlign = "left";
            this.Canvas.textBaseline = "top";
            this.Canvas.fillStyle = 'rgb(104,113,120)';
            var aryText = this.CalculateText(this.Content, textWidth);
            var drawObject = { Left: textLeft, Top: textTop, Text: aryText, FontHeight: 12, Width: textWidth, Height: textHeight, LineSpace: 3 };
            this.FillMulitLineText(drawObject);

            this.LogRect(textLeft, textTop, textWidth, textHeight);
        }

        if (this.QRCode)
        {
            var imageSize=80;
            var imageLeft = left, imageTop = bottom - imageSize;
            this.Canvas.drawImage(this.QRCode, imageLeft, imageTop, imageSize, imageSize);
        }

        this.LogRect(0, 0, this.ChartBorder.GetChartWidth(), this.ChartBorder.GetChartHeight());
    }

    this.SetOption=function(option)
    {
        if (!option) return;
        this.SetBorder(option);
        if (option.Title) this.Title=option.Title;
        if (option.Content) this.Content=option.Content;
        if (option.QRCode) this.QRCode = option.QRCode;
        if (option.BGImage) this.BGImage=option.BGImage;
        if (option.Avatar) this.Avatar = option.Avatar;
        if (option.Author) this.Author = option.Author;
    }
}

//调研
function ResearchShare()
{
    this.newMethod = ISharePainting;   //派生
    this.newMethod();
    delete this.newMethod;

    this.DrawSkeleton = this.Default_DrawSkeleton;    //骨架屏画法用默认的(如果要定制的, 重写这个方法)
    this.ClassName = 'ResearchShare';    //类名
    this.Logo;         //公司图标
    this.Content;       //内容
    this.QRCode;        //二维码图地址
    this.Company;       //公司名称
    this.BGImage ='https://opensourcecache.zealink.com/cache/wechat/shareimage/research/bg.png';    //背景图

    this.SetOption = function (option) 
    {
        if (!option) return;
        this.SetBorder(option);
        if (option.Logo) this.Logo = option.Logo;       
        if (option.Company) this.Company = option.Company;
        if (option.Content) this.Content = option.Content;
        if (option.QRCode) this.QRCode = option.QRCode;
        if (option.BGImage) this.BGImage = option.BGImage;
    }

    this.Draw = function () 
    {
        var left = this.ChartBorder.GetLeft();
        var right = this.ChartBorder.GetRight();
        var top = this.ChartBorder.GetTop();
        var bottom = this.ChartBorder.GetBottom();

        if (this.BGImage) this.Canvas.drawImage(this.BGImage, 0, 0, this.ChartBorder.GetChartWidth(), this.ChartBorder.GetChartHeight());

        var imageSize = 0;
        if (this.Logo) {
          imageSize = 39;
          var imgLeft = left,imgTop = 73;
          this.Canvas.drawImage(this.Logo, imgLeft, imgTop, imageSize, imageSize);
        }

        if (this.Company){
          var companyLeft = left + imageSize + 16, companyRight = right, companyWidth = companyRight - companyLeft;
          var companyHeight = 39;
          var companyTop = 73 + companyHeight/ 2;
          this.Canvas.font = 'bold 12px PingFang';
          this.Canvas.textAlign = "left";
          this.Canvas.textBaseline = "middle";
          this.Canvas.fillStyle = 'rgb(51,51,51)';
          this.Canvas.fillText(this.Company,companyLeft,companyTop,companyWidth);
        }

        if (this.Content) {
          var contentLeft = left + 12, contentTop = 142, contentRight = right - 12,contentWidth = contentRight - contentLeft;
          var contentHeight = 92;
          this.Canvas.font = '12px PingFang';
          this.Canvas.textAlign = "left";
          this.Canvas.textBaseline = "top";
          this.Canvas.fillStyle = 'rgb(104,113,120)';
          var textAry = this.CalculateText(this.Content,contentWidth);
          var drawObject = { Left: contentLeft, Top: contentTop, Text: textAry, FontHeight: 12, Width: contentWidth, Height: contentHeight, LineSpace: 3 };
          this.FillMulitLineText(drawObject);
          this.LogRect(contentLeft,contentTop,contentWidth,contentHeight);
        }

        if (this.QRCode) {
          var imageSize = 80;
          var imageLeft = left, imageTop = bottom - imageSize;
          this.Canvas.drawImage(this.QRCode, imageLeft, imageTop, imageSize, imageSize);
        }

        this.LogRect(0, 0, this.ChartBorder.GetChartWidth(), this.ChartBorder.GetChartHeight());
    }
}


//导出统一使用JSCommon命名空间名
module.exports =
{
    JSCommonShare:
    {
        JSCanvasElement: JSCanvasElement,
        JSShareChart: JSShareChart,
        JSDownloadControl: JSDownloadControl,
    },
};