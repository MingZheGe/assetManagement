//账户信息
import { JSCommon } from './umychart.wechat.js';
import { JSCommonStock } from './umychart.stock.wechat.js';
const RECV_DATA_TYPE = JSCommonStock.RECV_DATA_TYPE;

function ZUserResource() 
{
  this.Domain = "https://opensource.zealink.com";               //API域名
  this.CacheDomain = "https://opensourcecache.zealink.com";     //缓存域名
}

var g_ZUserResource = new ZUserResource();

function ZUser(userid) {
  this.SelfStockApiUrl = g_ZUserResource.Domain+ "/API/SelfStock";
  this.LogonApiUrl = g_ZUserResource.Domain+"/API/Logon";
  this.LogonApiUrl_V2 = g_ZUserResource.Domain +"/api/SP_AuthorizationLogon"
  this.SelfStockOpUrl = g_ZUserResource.Domain+ "/API/SelfStockOp";
  this.ShowEntryUrl = g_ZUserResource.Domain + "/API/ShowMenuList";

  //获取openid
  this.OpenIdUrl = g_ZUserResource.Domain+ "/api/GetWeChatOpenId_V3";

  this.RewardUrl = g_ZUserResource.Domain + "/api/CreateRawardOrder";

  this.RawardListUrl = g_ZUserResource.Domain + "/api/RawardOrderList";

  this.UserID = null;
  this.NickName = null;
  this.LogonCallback;
  this.UserOpenID = null; //微信openid
  this.UserCode = null;   //微信Code

  this.SelfStockData; //自选股信息
  this.SelfStockCallback = null;
  this.SelfStockSymbol = new Set();  //保存自选股股票代码

  this.screenHeight = null;//屏幕高度

  this.Product = null;

  //获取用户系统信息（屏幕高度）
  this.getSystemInfo = function () {
    return new Promise((resovle, reject) => {
      wx.getSystemInfo({
        success: res => {
          //将px转换成rpx
          let rpxHeight = res.screenHeight * (750 / res.screenWidth);
          resovle(rpxHeight);
        },
        fail: error => {
          reject(error);
        }
      })
    })
  },

  //是否授权
  this.IsGetSetting = function(callback){
    var self = this;

    // 查看是否授权
    wx.getSetting({
      success: function (res) {
        if (res.authSetting['scope.userInfo']) {
          wx.getUserInfo({
            success: function (res) {
              self.NickName = res.userInfo.nickName;
              self.Logon(callback);
            }
          });
        } else {
          wx.redirectTo({
            url: "/pages/logon/logon"
          })
        }
      }
    })
  },

  this.Logon = function (callback) {
    this.LogonCallback = callback;
    this.GetWechatCode().then(function (user) {
      return user.GetWechatOpenID();
    }).then(function (user) {
      return user.OpenIDLogon();
    });
  }

  //   登录
  this.GetWechatCode = function () {
    var self = this;
    var p = new Promise(function (resovle, reject) {
      wx.login(
        {
          success: res => {
            console.log('code:',res)
            self.UserCode = res.code;
            resovle(self);
          }
        })
    });

    return p;
  }

  this.GetWechatOpenID = function () {
    var self = this;
    var p = new Promise(function (resovle, reject) {
      wx.request(
        {
          url: self.OpenIdUrl,
          data:
          {
            "code": self.UserCode,
            "Product": self.Product
          },
          method: "POST",
          success: function (res) {
            self.UserOpenID = res.data.openid;
            // console.log(res.data.openid)
            resovle(self);
          }
        })
    });

    return p;
  }

  this.OpenIDLogon = function () {
    var self = this;

    var p = new Promise(function (resovle, reject) {

      self.ReqeustLogon(3, self.UserOpenID, null);

    });
  }

  //获取openid
  // this.getOpenID = function (code, callback) {
  //   var self = this;
  //   wx.request({
  //     url: this.OpenIdUrl,
  //     data: {
  //       "code": code
  //     },
  //     method: "GET",
  //     success: function (res) {
  //       console.log(res.data,"res.data")
  //       self.UserOpenID = res.data.openid;
  //       self.LogonWechat(res.data.openid, null, callback)
  //     }
  //   })
  // }
  //获取用户昵称信息
  this.getUserInfo = function () {
    wx.getUserInfo({

    })
  }
  //微信登录
  this.LogonWechat = function (wechartid, nickname, callback) {
    this.LogonCallback = callback;
    this.ReqeustLogon(3, wechartid, nickname)
  }

  //用户名密码登录
  this.UserLogon = function (userid, password,callback) {
    this.LogonCallback = callback;
    this.ReqeustLogon(1, userid, password)
  }

  // 缓存用户名密码
  this.setStorage = function(userid,password){
    let storage = {
      "userid": userid,
      "password": password
    }
    wx.setStorage({
      key: 'userInfo',
      data: storage,
    })
  }

  // 获取缓存
  this.GetStorage = function(key){
    return new Promise((resolve,reject) => {
      wx.getStorage({
        key: key,
        success: function (res) {
          resolve(res);
        },
      })
    })
    
  }

  //是否登录了
  this.IsLogon = function () {
    return this.UserID != null;
  }

  this.ReqeustLogon = function (logonType, userid, password) {
    var self = this;

    if (logonType == 3){
      wx.request({
        url: this.LogonApiUrl_V2,
        data:
          {
            "UserId": self.UserOpenID,
            "NickName": self.NickName,
            "Product": self.Product,
          },
        method: 'POST',
        dataType: "json",
        async: true,
        success: function (data) {
          self.RecvLogonData(data, RECV_DATA_TYPE.LOGON_DATA);
        },
        fail: function (request) {
          self.RecvError(request, RECV_DATA_TYPE.LOGON_DATA);
        }
      });
    }else{
      wx.request({
        url: this.LogonApiUrl,
        data:
          {
            "logontype": logonType,
            "user": userid,
            "password": password,
            "os": "appweb",
            "identifiy": JSCommon.Guid(),
            "ip": "0.0.0.0"
          },
        method: 'POST',
        dataType: "json",
        async: true,
        success: function (data) {
          self.RecvLogonData(data, RECV_DATA_TYPE.LOGON_DATA);
        },
        fail: function (request) {
          self.RecvError(request, RECV_DATA_TYPE.LOGON_DATA);
        }
      });
    }
    
  }

  this.RecvLogonData = function (recvData, dataType) {
    var data = recvData.data;
    console.log('[RecvLogonData:data]', recvData);
    if (data.code != 0) 
    {
      var error = { Code:data.code, Message:data.message };
      if (typeof (this.LogonCallback) == "function") this.LogonCallback(this, error);
      return;
    }

    this.UserID = data.userid;
    this.NickName = data.nickname;

    if (typeof (this.LogonCallback) == "function") this.LogonCallback(this);
  }

  //更新自选股groupName=[]或更新自选组合分组groupName=["自选股一"],区别再也是否传groupName进去，groupName位数组
  this.UpdateSelfStock = function (groupName) {
    this.ReqeustSelfStock(groupName);
  }

  this.SelfStock = function (callback) {
    this.SelfStockCallback = callback;
    this.ReqeustSelfStock();
  }

  this.ReqeustSelfStock = function (groupName) {
    var self = this;

    wx.request({
      url: this.SelfStockApiUrl,
      data:
      {
        "userid": this.UserID,
        "selfstock": groupName
      },
      method: 'POST',
      dataType: "json",
      success: function (data) {
        self.RecvSelfStockData(data, RECV_DATA_TYPE.SELF_STOCK_DATA);
      },
      error: function (request) {
        self.RecvError(request, RECV_DATA_TYPE.SELF_STOCK_DATA);
      }
    });
  }


  this.RecvSelfStockData = function (recvData, dataType) {
    var data = recvData.data;

    this.SelfStockSymbol.clear();
    this.SelfStockData = [];
    for (var i in data.selfstock) {
      var item = data.selfstock[i];
      var SelfStockItem = { Name: item.name, Data: new Array() };
      for (var j in item.list) {
        var stock = item.list[j];

        SelfStockItem.Data.push({ Symbol: stock.symbol, Name: stock.name, date: stock.adddate });
        if (i == 0) {
          if (!this.SelfStockSymbol.has(stock.symbol))
            this.SelfStockSymbol.add(stock.symbol); //只保存自选股一
        }
      }

      this.SelfStockData.push(SelfStockItem);
    }

    if (typeof (this.SelfStockCallback) == "function") this.SelfStockCallback(this);
  }

  this.RecvError = function (request, dataType) {

  }

  //新建自选组合
  this.addSelfCombination = function (groupName, callback) {
    //{"userid":"test","optype":3,"selfstock":[{"name":"自选股测试"}],"returntype":0}
    wx.request({
      url: this.SelfStockOpUrl,
      data: {
        "userid": this.UserID,
        "optype": 3,
        "selfstock": [{ "name": groupName }],
        "returntype": 0
      },
      method: 'POST',
      dataType: "json",
      success: function (res) {
        callback(res.data)
        // console.log(res, '测试删除自选')
      },
      fail: function (error) {

      }
    })
  },

  //删除自选组合
  this.delSelfCombination = function (groupName, callback) {
    //{"userid":"test","optype":4,"selfstock":[{"name":"自选股测试"}],"returntype":0}
    wx.request({
      url: this.SelfStockOpUrl,
      data: {
        "userid": this.UserID,
        "optype": 4,
        "selfstock": [{ "name": groupName }],
        "returntype": 0
      },
      method: 'POST',
      dataType: "json",
      success: function (res) {
        callback(res.data)
        // console.log(res, '测试删除自选')
      },
      fail: function (error) {

      }
    })
  }

  //自选股操作 删除自选股
  this.DeleteSelfStock = function (groupName, aryStock, callback) {
    wx.request({
      url: this.SelfStockOpUrl,
      data: {
        "userid": this.UserID,
        "session": null,
        "optype": 2,
        "selfstock": [{ "name": groupName, "newname": null, "List": aryStock }],
        "returntype": 0
      },
      method: 'POST',
      dataType: "json",
      success: function (res) {
        // callback(res.data)
        // console.log(res, '测试删除自选')
      },
      fail: function (error) {

      }
    })

  }

  //自选股操作 添加自选股
  this.AddSelfStock = function (groupName, aryStock, callback) {
    wx.request({
      url: this.SelfStockOpUrl,
      data: {
        "userid": this.UserID,
        "session": null,
        "optype": 1,
        "selfstock": [{ "name": groupName, "newname": null, "List": aryStock }],
        "returntype": 0
      },
      method: 'POST',
      dataType: "json",
      success: function (res) {
        // callback(res.data)
        // console.log(res, '测试添加自选')
      },
      fail: function (error) {

      }
    })
  }

  //判断股票在自选股里存在 {Symbol:股票代码,IsExist:是否存在}  此方法只对“自选股一”有效
  this.IsExistSelfStock = function (arySymbol) {
    for (var i in arySymbol) {
      var item = arySymbol[i];
      item.IsExist = this.SelfStockSymbol.has(item.Symbol);
    }
  }

  // 判断股票在自选股里存在  通用型
  this.IsExistCommonSelfStock = function (selfSymbol, searchList) {
    // console.log("第一个现存的所有股票selfSymbol", selfSymbol);
    // console.log("第二个搜索出的所有股票searchList", searchList);
    var currrentSelfSymbol = [];
    for (var i in selfSymbol) {
      var item = selfSymbol[i];
      currrentSelfSymbol.push(item)
    }
    // console.log("currrentSelfSymbol", currrentSelfSymbol);
    for (var i in searchList) {
      var item = searchList[i];
      item.IsExist = currrentSelfSymbol.indexOf(item.Symbol) >= 0 ? true : false;
    }
    // console.log("searchList结果", searchList);
    return searchList;
  }




  //大数据入口页面数据
  this.IsShowEntry = function(fn){
    wx.request({
      url: this.ShowEntryUrl,
      data: {},
      method: 'POST',
      dataType: "json",
      success: function (res) {
        // console.log(res,"res")
        if (res.data.code != 0){
          wx.showModal({
            title: '提示',
            content: res.data.message,
          })
          return;
        }
        fn(res);
      },
      fail: function (error) {
        console.log(error)
      }
    })

  }

  // 打赏支付

  this.GetReward = function (money, message,symbolInfo,callback)
  {
    // this.money = money;
    // this.message = message;
    // this.symbolInfo = symbolInfo;
    this.payCallback = callback;
    if (this.UserID != null){
      this.Reward(money, message, symbolInfo);
    }else{
      wx.showToast({
        title: '请先登录',
        icon:'none',
        duration:500,
        success:function(){
          setTimeout(function(){
            wx.navigateTo({
              url: '/pages/logon/logon',
            })
          },500)
        }
      })
      
    }
  }

  this.Reward = function (money, message, symbolInfo)
  {
    console.log(this,'Reward');
    wx.request({
      url: this.RewardUrl,
      data:{
        "UserId": this.UserID,
        "Amount": money*100,
        "OpenId": this.UserOpenID,

        "Symbol": symbolInfo.symbol,
        "Name": symbolInfo.name,
        "Content": message
      },
      method: 'POST',
      dataType:'json',
      success: res => {
        if(res.data.code == 0){
          let timeStamp = res.data.timestamp,
            nonceStr = res.data.noncestr,
            packagePay = res.data.package,
            signType = res.data.signtype,
            paySign = res.data.paysign;

          this.Payment(timeStamp, nonceStr, packagePay, signType, paySign);
        }
        
      }
    })
  }

  this.Payment = function (timeStamp, nonceStr, packagePay, signType, paySign){
    return new Promise(resolve => {
      wx.requestPayment({
        'timeStamp': timeStamp,
        'nonceStr': nonceStr,
        'package': packagePay,
        'signType': signType,
        'paySign': paySign,
        'success': res => {
          this.payCallback(res)
        },
        'fail': res=> {
          this.payCallback(res)
        }
      })
    })
  }

  this.GetRawardList = function(){
    return new Promise(resolve => {
      wx.request({
        url: this.RawardListUrl,
        data: {
          "PageInfo": {
            "PageIndex": 1,
            "PageSize": 10
          }
        },
        method: 'POST',
        success: res => {
          resolve(res)
          
        }
      })
    })
    
  }
}

ZUser.SetDomain = function (domain, cacheDomain) 
{
  if (domain) g_ZUserResource.Domain = domain;
  if (cacheDomain) g_ZUserResource.CacheDomain = cacheDomain;
}



module.exports =
  {
    JSCommonUser:
    {
      ZUser: ZUser
    }
  };


