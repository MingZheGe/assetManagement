{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _map = require('babel-runtime/core-js/map');\nvar _map2 = _interopRequireDefault(_map);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/*\r\n   Copyright (c) 2018 jones\r\n \r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   开源项目 https://github.com/jones2000/HQChart\r\n \r\n   jones_2000@163.com\r\n\r\n   个股指标回测\r\n*/\n\n/*\r\n    指标回测\r\n    计算: Trade: {Count 交易次数  Days:交易天数 Success:成功交易次数 Fail:失败交易次数}\r\n          Day: {Count:总运行  Max:最长运行 Min:最短运行 Average:平均运行}\r\n          Profit: 总收益 StockProfit:个股收益  Excess:超额收益 MaxDropdown:最大回撤 Beta:β(Beta)系数(指标里面需要又大盘数据)\r\n          NetValue: [ {Date:日期, Net:净值, Close:股票收盘价, IndexClose:大盘的收盘价}, ]\r\n*/\n\nfunction RegressionTest() {\n  //只读数据不能修改\n  this.HistoryData; //K线数据\n  this.BuyData; //策略买数据\n  this.SellData; //策略卖数据\n  this.IndexClose; //大盘收盘价\n  this.NetCalculateModel = 0; //净值及收益计算模型 0=使用B点开盘价计算 1=使用B点下一天的开盘价计算\n\n  this.InitialCapital = 10000; //初始资金1W\n\n  //计算结果数据\n  this.Data = new _map2.default(); //key:DATA_NAME value:数据\n\n  this.SetPolicyData = function (obj)\n  //设置策略结果的数据 {KLineData:个股K线数据, BuyData:策略买数据, SellData:策略卖数据, IndexClose:大盘收盘价}\n  {\n    this.HistoryData = obj.KLineData; //K线数据\n    this.BuyData = obj.BuyData; //策略买数据\n    this.SellData = obj.SellData; //策略卖数据\n    if (obj.IndexClose) this.IndexClose = obj.IndexClose; //大盘收盘价 如果没有大盘数据 就不计算β(Beta)系数 和指数涨幅数据\n  };\n\n  this.ClearData = function ()\n  //清空所有的结果数据\n  {\n    this.Data = new _map2.default();\n  };\n  this.GetBSData = function (startDate)\n  //BS点配对 { B:[{Data:K线数据, Count:天数, NextOpen:下一天的开盘价 }], S:{Data:K线数据}}\n  {\n    var index = null;\n    for (var i = 0; i < this.HistoryData.length; ++i) {\n      var item = this.HistoryData[i];\n      if (item.Date >= startDate) {\n        index = i;\n        break;\n      }\n    }\n    if (index === null) return null;\n    console.log('[RegressionTest::GetBSData] startDate=' + startDate + ' index=' + index);\n    var aryBS = [];\n    var bsItem = null;\n    for (var i = index; i < this.HistoryData.length; ++i) {\n      var buyItem = this.BuyData[i];\n      var sellItem = this.SellData[i];\n      var kLineItem = this.HistoryData[i];\n      if (bsItem === null) {\n        if (buyItem > 0) {\n          var bItem = {\n            Data: kLineItem,\n            Count: 0\n          };\n          if (i + 1 < this.HistoryData.length) bItem.NextOpen = this.HistoryData[i + 1].Open; //获取下一天的开盘价\n          bsItem = {\n            B: [bItem],\n            S: null\n          }; //B可以多个，S一个\n        }\n      } else {\n        for (var j in bsItem.B) {\n          ++bsItem.B[j].Count;\n        } //天数+1\n        if (buyItem > 0) {\n          var bItem = {\n            Data: kLineItem,\n            Count: 0\n          };\n          if (i + 1 < this.HistoryData.length) bItem.NextOpen = this.HistoryData[i + 1].Open; //获取下一天的开盘价\n          bsItem.B.push(bItem);\n        } else if (sellItem > 0) {\n          bsItem.S = {\n            Data: kLineItem\n          };\n          aryBS.push(bsItem);\n          bsItem = null;\n        }\n      }\n    }\n    var data = {\n      StartDate: this.HistoryData[index].Date,\n      StartIndex: index,\n      Count: this.HistoryData.length - index,\n      BSData: aryBS\n    };\n    console.log('[RegressionTest::GetBSData] data', data);\n    return data;\n  };\n  this.Calculate = function (data) {\n    var day = {\n      Count: data.Count,\n      Max: null,\n      Min: null,\n      Average: null\n    }; //Count:总运行  Max:最长运行 Min:最短运行 Average:平均运行\n    var trade = {\n      Count: 0,\n      Days: 0,\n      Success: 0,\n      Fail: 0,\n      SuccessRate: 0\n    }; //Count 交易次数  Days:交易天数 Success:成功交易次数 Fail:失败交易次数\n\n    for (var i in data.BSData) {\n      var item = data.BSData[i];\n      for (var j in item.B) {\n        var bItem = item.B[j];\n        if (day.Max === null) day.Max = bItem.Count;else if (day.Max < bItem.Count) day.Max = bItem.Count;\n        if (day.Min === null) day.Min = bItem.Count;else if (day.Min > bItem.Count) day.Min = bItem.Count;\n        ++trade.Count;\n        trade.Days += bItem.Count;\n        if (item.S.Data.Close > bItem.Data.Open) ++trade.Success;else ++trade.Fail;\n      }\n    }\n    if (trade.Count > 0) {\n      day.Average = trade.Days / trade.Count;\n      trade.SuccessRate = trade.Success / trade.Count;\n    }\n\n    //计算收益(总收益)\n    var profit = 1,\n      buyPrice;\n    for (var i in data.BSData) {\n      var item = data.BSData[i];\n      if (this.NetCalculateModel === 1 && item.B[0].NextOpen > 0) buyPrice = item.B[0].NextOpen;else buyPrice = item.B[0].Data.Open;\n      var sellPrice = item.S.Data.Close;\n      var value = (sellPrice - buyPrice) / buyPrice + 1;\n      profit *= value;\n    }\n    profit -= 1; //公式:[（1+收益1）*（1+收益2）*（1+收益3）……（1+收益n）-1] x 100%\n\n    //标的证券收益\n    var yClose = this.HistoryData[data.StartIndex].Close; //使用前收盘\n    var close = this.HistoryData[this.HistoryData.length - 1].Close; //最后一个大盘收盘价\n    var stockProfit = (close - yClose) / yClose;\n    console.log('[RegressionTest::Calculate] stock profit first[' + this.HistoryData[data.StartIndex].Date + ', YClose=' + this.HistoryData[data.StartIndex].YClose + '] end[' + this.HistoryData[this.HistoryData.length - 1].Date + ', Close=' + this.HistoryData[this.HistoryData.length - 1].Close + ']');\n    var netValue = this.CaclulateNetValue(data);\n    var maxDropdown = null,\n      beta = null;\n    if (netValue && netValue.length > 0) {\n      maxDropdown = this.CaclulateMaxDropdown(netValue);\n      if (this.IndexClose) beta = this.CaclulateBeta(netValue);\n    }\n\n    //Profit:收益  StockProfit:标的证券收益 Excess:超额收益(加上BS配对的数据)\n    var result = {\n      Day: day,\n      Trade: trade,\n      Profit: profit,\n      StockProfit: stockProfit,\n      Excess: profit - stockProfit,\n      NetValue: netValue,\n      MaxDropdown: maxDropdown,\n      Beta: beta,\n      BSDataPair: data.BSData\n    };\n    console.log('[RegressionTest::Calculate] NetCalculateModel, result ', this.NetCalculateModel, result);\n    return result;\n  };\n  this.CaclulateNetValue = function (data)\n  //计算净值\n  {\n    var index = data.StartIndex;\n    var aryDay = []; //{Close:收盘 , Open:开盘, Position:持仓数量, Cache:现金 , MarketValue:总市值}\n    var lastDayItem = {\n      Position: 0,\n      Cache: this.InitialCapital\n    };\n    var bsItem = null,\n      buyPrice;\n    for (var i = index; i < this.HistoryData.length; ++i) {\n      var buyItem = this.BuyData[i];\n      var sellItem = this.SellData[i];\n      var kLineItem = this.HistoryData[i];\n      var dayItem = {\n        Date: kLineItem.Date,\n        Position: lastDayItem.Position,\n        Cache: lastDayItem.Cache,\n        Open: kLineItem.Open,\n        Close: kLineItem.Close\n      };\n      dayItem.MarketValue = dayItem.Position * dayItem.Close + dayItem.Cache; //市值 股票+现金\n\n      if (bsItem === null) {\n        if (buyItem > 0)\n          //买\n          {\n            bsItem = {\n              B: {\n                Data: kLineItem\n              },\n              S: null\n            };\n            if (this.NetCalculateModel === 1 && i + 1 < this.HistoryData.length && this.HistoryData[i + 1].Open > 0) buyPrice = this.HistoryData[i + 1].Open; //使用B点下一天的开盘价买\n            else buyPrice = dayItem.Open;\n            var position = parseInt(dayItem.Cache / buyPrice); //开盘价买\n            var cache = dayItem.Cache - buyPrice * position; //剩余的现金\n\n            dayItem.Position = position;\n            dayItem.Cache = cache;\n            dayItem.MarketValue = dayItem.Position * dayItem.Close + dayItem.Cache; //市值 股票+现金\n          }\n      } else {\n        if (sellItem > 0)\n          //卖\n          {\n            bsItem.S = {\n              Data: kLineItem\n            };\n            bsItem = null;\n            var stockValue = dayItem.Position * dayItem.Close; //卖掉的股票钱\n            dayItem.Position = 0;\n            dayItem.Cache += stockValue; //卖掉的钱放到现金里面\n            dayItem.MarketValue = dayItem.Position * dayItem.Close + dayItem.Cache; //市值 股票+现金\n          }\n      }\n\n      //缓存上一天的数据\n      lastDayItem.Position = dayItem.Position;\n      lastDayItem.Cache = dayItem.Cache;\n      dayItem.Net = dayItem.MarketValue / this.InitialCapital; //净值\n      if (this.IndexClose) dayItem.IndexClose = this.IndexClose[i]; //指数收盘价\n      aryDay.push(dayItem);\n    }\n\n    //console.log('[RegressionTest::CaclulateNetValue] aryDay',aryDay);\n    if (aryDay.length <= 0) return [];\n    var netValue = []; //净值 {Date:日期, Net:净值, Close:股票收盘价, IndexClose:大盘的收盘价}\n    for (var i = 0; i < aryDay.length; ++i) {\n      var item = aryDay[i];\n      var dataItem = {\n        Net: item.Net,\n        Date: item.Date,\n        Close: item.Close\n      };\n      if (item.IndexClose) dataItem.IndexClose = item.IndexClose;\n      netValue.push(dataItem);\n    }\n\n    //console.log('[RegressionTest::CaclulateNetValue] netValue',netValue);\n\n    return netValue;\n  };\n  this.CaclulateMaxDropdown = function (data)\n  //最大回撤\n  {\n    var maxNet = data[0].Net; //最大净值\n    var maxValue = 0;\n    var maxDay;\n    for (var i = 1; i < data.length; ++i) {\n      var item = data[i];\n      var value = 1 - item.Net / maxNet; //1-策略当日净值 / 当日之前策略最大净值\n      if (maxValue < value) {\n        maxValue = value;\n        maxDay = item;\n      }\n      if (maxNet < item.Net) maxNet = item.Net; //取当前最大的净值\n    }\n\n    console.log('[RegressionTest::CaclulateMaxDropdown] maxDay', maxDay);\n    return maxValue;\n  };\n  this.CaclulateBeta = function (data)\n  //β(Beta)系数，参数是净值数组NetValue\n  {\n    var lastItem = data[0]; //上一天的数据\n    var indexProfit = []; //大盘涨幅\n    var bsProfit = []; //策略涨幅\n    var indexProfitTotal = 0,\n      bsProfitTotal = 0;\n    for (var i = 1; i < data.length; ++i) {\n      indexProfit[i - 1] = 0;\n      bsProfit[i - 1] = 0;\n      var item = data[i];\n      if (item.IndexClose > 0 && lastItem.IndexClose > 0) indexProfit[i - 1] = (item.IndexClose - lastItem.IndexClose) / lastItem.IndexClose;\n      if (item.Net > 0 && lastItem.Net > 0) bsProfit[i - 1] = (item.Net - lastItem.Net) / lastItem.Net;\n      //if (item.Close>0 && lastItem.Close>0) bsProfit[i-1]=(item.Close-lastItem.Close)/lastItem.Close;\n\n      indexProfitTotal += indexProfit[i - 1];\n      bsProfitTotal += bsProfit[i - 1];\n      lastItem = item;\n    }\n    var averageIndexProfit = indexProfitTotal / indexProfit.length;\n    var averageBSProfit = bsProfitTotal / bsProfit.length;\n    var betaCOV = 0; //协方差\n    for (var i = 0; i < indexProfit.length; ++i) {\n      betaCOV += (bsProfit[i] - averageBSProfit) * (indexProfit[i] - averageIndexProfit);\n    }\n    var betaVAR = 0; //标准差：方差的开2次方\n    for (var i = 0; i < indexProfit.length; ++i) {\n      betaVAR += (indexProfit[i] - averageIndexProfit) * (indexProfit[i] - averageIndexProfit);\n    }\n    return betaCOV / betaVAR;\n  };\n  this.Execute = function (obj)\n  //开始计算[ { Name:名字 , Date:起始日期 格式(20180101) }, ....]\n  {\n    for (var i in obj) {\n      var item = obj[i];\n      if (this.Data.has(item.Name))\n        //已经计算过了不计算\n        {\n          console.log('[RegressionTest::Execute] id=' + i + ' Name=' + item.Name + ' Date:' + item.Date + ' is exsit.');\n          continue;\n        }\n      console.log('[RegressionTest::Execute] id=' + i + ' Name=' + item.Name + ' Date:' + item.Date);\n      var data = this.GetBSData(item.Date);\n      var result = this.Calculate(data);\n      this.Data.set(item.Name, result);\n    }\n  };\n}\n\n//计算叠加数据 (日期必须匹配)\nRegressionTest.CaclulateOverlayData = function (obj)\n//{Main:主数据, Sub:[]//多组叠加数据}\n{\n  if (!obj.Main || !obj.Sub) return null;\n  var count = obj.Main.length;\n  for (var i in obj.Sub) {\n    var item = obj.Sub[i];\n    if (item.length != count) {\n      console.log('[RegressionTest::OverlayData] id=' + i + ' data count not match. MainData count=' + count);\n      return null;\n    }\n  }\n  var result = []; //[0]:主数据 , [1...]:叠加数据 \n\n  var firstData = {\n    Sub: []\n  };\n  firstData.Main = obj.Main[0];\n  result.push([]);\n  for (var i = 0; i < obj.Sub.length; ++i) {\n    var subData = obj.Sub[i];\n    firstData.Sub[i] = subData[0];\n    result.push([]);\n  }\n  for (var i = 0; i < obj.Main.length; ++i) {\n    var value = obj.Main[i];\n    var valuePer = (value - firstData.Main) / firstData.Main;\n    result[0][i] = valuePer;\n    for (var j = 0; j < obj.Sub.length; ++j) {\n      var subData = obj.Sub[j];\n      var subValue = subData[i];\n      var subValuePer = (subValue - firstData.Sub[j]) / firstData.Sub[j];\n      result[j + 1][i] = subValuePer;\n    }\n  }\n  return result;\n};\nRegressionTest.GetPolicyData = function (data)\n//获取指标数据里面需要计算回测的数据\n{\n  var policyData = {\n    KLineData: null,\n    IndexClose: null,\n    BuyData: null,\n    SellData: null\n  };\n  policyData.KLineData = data.HistoryData.Data; //个股K线数据,\n\n  for (var i in data.OutVar) {\n    var item = data.OutVar[i];\n    if (item.Name == 'INDEXCLOSE') {\n      policyData.IndexClose = item.Data; //绑定大盘收盘数据\n    } else if (item.Name == 'DRAWICON')\n      //买卖盘BS函数\n      {\n        if (item.Draw && item.Draw.Icon) {\n          if (item.Draw.Icon.ID === 13) policyData.BuyData = item.Draw.DrawData; //买\n          else if (item.Draw.Icon.ID === 14) policyData.SellData = item.Draw.DrawData; //卖\n        }\n      }\n  }\n\n  if (policyData.KLineData && policyData.BuyData && policyData.SellData) return policyData;\n  return null;\n};\n\n/*暴露外部用的方法*/\nexports.default = {\n  RegressionTest: RegressionTest //个股单策略回测\n};","map":{"version":3,"names":["require","Object","defineProperty","exports","value","_map","_map2","_interopRequireDefault","obj","__esModule","default","RegressionTest","HistoryData","BuyData","SellData","IndexClose","NetCalculateModel","InitialCapital","Data","SetPolicyData","KLineData","ClearData","GetBSData","startDate","index","i","length","item","Date","console","log","aryBS","bsItem","buyItem","sellItem","kLineItem","bItem","Count","NextOpen","Open","B","S","j","push","data","StartDate","StartIndex","BSData","Calculate","day","Max","Min","Average","trade","Days","Success","Fail","SuccessRate","Close","profit","buyPrice","sellPrice","yClose","close","stockProfit","YClose","netValue","CaclulateNetValue","maxDropdown","beta","CaclulateMaxDropdown","CaclulateBeta","result","Day","Trade","Profit","StockProfit","Excess","NetValue","MaxDropdown","Beta","BSDataPair","aryDay","lastDayItem","Position","Cache","dayItem","MarketValue","position","parseInt","cache","stockValue","Net","dataItem","maxNet","maxValue","maxDay","lastItem","indexProfit","bsProfit","indexProfitTotal","bsProfitTotal","averageIndexProfit","averageBSProfit","betaCOV","betaVAR","Execute","has","Name","set","CaclulateOverlayData","Main","Sub","count","firstData","subData","valuePer","subValue","subValuePer","GetPolicyData","policyData","OutVar","Draw","Icon","ID","DrawData"],"sources":["E:/assetManagement/assetManagement/node_modules/hqchart/lib/umychart.regressiontest.vue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _map = require('babel-runtime/core-js/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\r\n   Copyright (c) 2018 jones\r\n \r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   开源项目 https://github.com/jones2000/HQChart\r\n \r\n   jones_2000@163.com\r\n\r\n   个股指标回测\r\n*/\n\n/*\r\n    指标回测\r\n    计算: Trade: {Count 交易次数  Days:交易天数 Success:成功交易次数 Fail:失败交易次数}\r\n          Day: {Count:总运行  Max:最长运行 Min:最短运行 Average:平均运行}\r\n          Profit: 总收益 StockProfit:个股收益  Excess:超额收益 MaxDropdown:最大回撤 Beta:β(Beta)系数(指标里面需要又大盘数据)\r\n          NetValue: [ {Date:日期, Net:净值, Close:股票收盘价, IndexClose:大盘的收盘价}, ]\r\n*/\n\nfunction RegressionTest() {\n    //只读数据不能修改\n    this.HistoryData; //K线数据\n    this.BuyData; //策略买数据\n    this.SellData; //策略卖数据\n    this.IndexClose; //大盘收盘价\n    this.NetCalculateModel = 0; //净值及收益计算模型 0=使用B点开盘价计算 1=使用B点下一天的开盘价计算\n\n    this.InitialCapital = 10000; //初始资金1W\n\n    //计算结果数据\n    this.Data = new _map2.default(); //key:DATA_NAME value:数据\n\n    this.SetPolicyData = function (obj) //设置策略结果的数据 {KLineData:个股K线数据, BuyData:策略买数据, SellData:策略卖数据, IndexClose:大盘收盘价}\n    {\n        this.HistoryData = obj.KLineData; //K线数据\n        this.BuyData = obj.BuyData; //策略买数据\n        this.SellData = obj.SellData; //策略卖数据\n        if (obj.IndexClose) this.IndexClose = obj.IndexClose; //大盘收盘价 如果没有大盘数据 就不计算β(Beta)系数 和指数涨幅数据\n    };\n\n    this.ClearData = function () //清空所有的结果数据\n    {\n        this.Data = new _map2.default();\n    };\n\n    this.GetBSData = function (startDate) //BS点配对 { B:[{Data:K线数据, Count:天数, NextOpen:下一天的开盘价 }], S:{Data:K线数据}}\n    {\n        var index = null;\n        for (var i = 0; i < this.HistoryData.length; ++i) {\n            var item = this.HistoryData[i];\n            if (item.Date >= startDate) {\n                index = i;\n                break;\n            }\n        }\n        if (index === null) return null;\n\n        console.log('[RegressionTest::GetBSData] startDate=' + startDate + ' index=' + index);\n        var aryBS = [];\n        var bsItem = null;\n        for (var i = index; i < this.HistoryData.length; ++i) {\n            var buyItem = this.BuyData[i];\n            var sellItem = this.SellData[i];\n            var kLineItem = this.HistoryData[i];\n            if (bsItem === null) {\n                if (buyItem > 0) {\n                    var bItem = { Data: kLineItem, Count: 0 };\n                    if (i + 1 < this.HistoryData.length) bItem.NextOpen = this.HistoryData[i + 1].Open; //获取下一天的开盘价\n                    bsItem = { B: [bItem], S: null }; //B可以多个，S一个\n                }\n            } else {\n                for (var j in bsItem.B) {\n                    ++bsItem.B[j].Count;\n                } //天数+1\n                if (buyItem > 0) {\n                    var bItem = { Data: kLineItem, Count: 0 };\n                    if (i + 1 < this.HistoryData.length) bItem.NextOpen = this.HistoryData[i + 1].Open; //获取下一天的开盘价\n                    bsItem.B.push(bItem);\n                } else if (sellItem > 0) {\n                    bsItem.S = { Data: kLineItem };\n                    aryBS.push(bsItem);\n                    bsItem = null;\n                }\n            }\n        }\n\n        var data = { StartDate: this.HistoryData[index].Date, StartIndex: index, Count: this.HistoryData.length - index, BSData: aryBS };\n\n        console.log('[RegressionTest::GetBSData] data', data);\n        return data;\n    };\n\n    this.Calculate = function (data) {\n        var day = { Count: data.Count, Max: null, Min: null, Average: null }; //Count:总运行  Max:最长运行 Min:最短运行 Average:平均运行\n        var trade = { Count: 0, Days: 0, Success: 0, Fail: 0, SuccessRate: 0 }; //Count 交易次数  Days:交易天数 Success:成功交易次数 Fail:失败交易次数\n\n        for (var i in data.BSData) {\n            var item = data.BSData[i];\n            for (var j in item.B) {\n                var bItem = item.B[j];\n                if (day.Max === null) day.Max = bItem.Count;else if (day.Max < bItem.Count) day.Max = bItem.Count;\n\n                if (day.Min === null) day.Min = bItem.Count;else if (day.Min > bItem.Count) day.Min = bItem.Count;\n\n                ++trade.Count;\n                trade.Days += bItem.Count;\n\n                if (item.S.Data.Close > bItem.Data.Open) ++trade.Success;else ++trade.Fail;\n            }\n        }\n\n        if (trade.Count > 0) {\n            day.Average = trade.Days / trade.Count;\n            trade.SuccessRate = trade.Success / trade.Count;\n        }\n\n        //计算收益(总收益)\n        var profit = 1,\n            buyPrice;\n        for (var i in data.BSData) {\n            var item = data.BSData[i];\n            if (this.NetCalculateModel === 1 && item.B[0].NextOpen > 0) buyPrice = item.B[0].NextOpen;else buyPrice = item.B[0].Data.Open;\n            var sellPrice = item.S.Data.Close;\n            var value = (sellPrice - buyPrice) / buyPrice + 1;\n            profit *= value;\n        }\n        profit -= 1; //公式:[（1+收益1）*（1+收益2）*（1+收益3）……（1+收益n）-1] x 100%\n\n        //标的证券收益\n        var yClose = this.HistoryData[data.StartIndex].Close; //使用前收盘\n        var close = this.HistoryData[this.HistoryData.length - 1].Close; //最后一个大盘收盘价\n        var stockProfit = (close - yClose) / yClose;\n\n        console.log('[RegressionTest::Calculate] stock profit first[' + this.HistoryData[data.StartIndex].Date + ', YClose=' + this.HistoryData[data.StartIndex].YClose + '] end[' + this.HistoryData[this.HistoryData.length - 1].Date + ', Close=' + this.HistoryData[this.HistoryData.length - 1].Close + ']');\n\n        var netValue = this.CaclulateNetValue(data);\n        var maxDropdown = null,\n            beta = null;\n        if (netValue && netValue.length > 0) {\n            maxDropdown = this.CaclulateMaxDropdown(netValue);\n            if (this.IndexClose) beta = this.CaclulateBeta(netValue);\n        }\n\n        //Profit:收益  StockProfit:标的证券收益 Excess:超额收益(加上BS配对的数据)\n        var result = { Day: day, Trade: trade, Profit: profit, StockProfit: stockProfit, Excess: profit - stockProfit, NetValue: netValue, MaxDropdown: maxDropdown, Beta: beta, BSDataPair: data.BSData };\n\n        console.log('[RegressionTest::Calculate] NetCalculateModel, result ', this.NetCalculateModel, result);\n        return result;\n    };\n\n    this.CaclulateNetValue = function (data) //计算净值\n    {\n        var index = data.StartIndex;\n\n        var aryDay = []; //{Close:收盘 , Open:开盘, Position:持仓数量, Cache:现金 , MarketValue:总市值}\n        var lastDayItem = { Position: 0, Cache: this.InitialCapital };\n        var bsItem = null,\n            buyPrice;\n        for (var i = index; i < this.HistoryData.length; ++i) {\n            var buyItem = this.BuyData[i];\n            var sellItem = this.SellData[i];\n            var kLineItem = this.HistoryData[i];\n            var dayItem = { Date: kLineItem.Date, Position: lastDayItem.Position, Cache: lastDayItem.Cache, Open: kLineItem.Open, Close: kLineItem.Close };\n            dayItem.MarketValue = dayItem.Position * dayItem.Close + dayItem.Cache; //市值 股票+现金\n\n            if (bsItem === null) {\n                if (buyItem > 0) //买\n                    {\n                        bsItem = { B: { Data: kLineItem }, S: null };\n                        if (this.NetCalculateModel === 1 && i + 1 < this.HistoryData.length && this.HistoryData[i + 1].Open > 0) buyPrice = this.HistoryData[i + 1].Open; //使用B点下一天的开盘价买\n                        else buyPrice = dayItem.Open;\n\n                        var position = parseInt(dayItem.Cache / buyPrice); //开盘价买\n                        var cache = dayItem.Cache - buyPrice * position; //剩余的现金\n\n                        dayItem.Position = position;\n                        dayItem.Cache = cache;\n                        dayItem.MarketValue = dayItem.Position * dayItem.Close + dayItem.Cache; //市值 股票+现金\n                    }\n            } else {\n                if (sellItem > 0) //卖\n                    {\n                        bsItem.S = { Data: kLineItem };\n                        bsItem = null;\n\n                        var stockValue = dayItem.Position * dayItem.Close; //卖掉的股票钱\n                        dayItem.Position = 0;\n                        dayItem.Cache += stockValue; //卖掉的钱放到现金里面\n                        dayItem.MarketValue = dayItem.Position * dayItem.Close + dayItem.Cache; //市值 股票+现金\n                    }\n            }\n\n            //缓存上一天的数据\n            lastDayItem.Position = dayItem.Position;\n            lastDayItem.Cache = dayItem.Cache;\n\n            dayItem.Net = dayItem.MarketValue / this.InitialCapital; //净值\n            if (this.IndexClose) dayItem.IndexClose = this.IndexClose[i]; //指数收盘价\n            aryDay.push(dayItem);\n        }\n\n        //console.log('[RegressionTest::CaclulateNetValue] aryDay',aryDay);\n        if (aryDay.length <= 0) return [];\n\n        var netValue = []; //净值 {Date:日期, Net:净值, Close:股票收盘价, IndexClose:大盘的收盘价}\n        for (var i = 0; i < aryDay.length; ++i) {\n            var item = aryDay[i];\n            var dataItem = { Net: item.Net, Date: item.Date, Close: item.Close };\n            if (item.IndexClose) dataItem.IndexClose = item.IndexClose;\n            netValue.push(dataItem);\n        }\n\n        //console.log('[RegressionTest::CaclulateNetValue] netValue',netValue);\n\n        return netValue;\n    };\n\n    this.CaclulateMaxDropdown = function (data) //最大回撤\n    {\n        var maxNet = data[0].Net; //最大净值\n        var maxValue = 0;\n        var maxDay;\n        for (var i = 1; i < data.length; ++i) {\n            var item = data[i];\n            var value = 1 - item.Net / maxNet; //1-策略当日净值 / 当日之前策略最大净值\n            if (maxValue < value) {\n                maxValue = value;\n                maxDay = item;\n            }\n            if (maxNet < item.Net) maxNet = item.Net; //取当前最大的净值\n        }\n\n        console.log('[RegressionTest::CaclulateMaxDropdown] maxDay', maxDay);\n        return maxValue;\n    };\n\n    this.CaclulateBeta = function (data) //β(Beta)系数，参数是净值数组NetValue\n    {\n        var lastItem = data[0]; //上一天的数据\n        var indexProfit = []; //大盘涨幅\n        var bsProfit = []; //策略涨幅\n        var indexProfitTotal = 0,\n            bsProfitTotal = 0;\n        for (var i = 1; i < data.length; ++i) {\n            indexProfit[i - 1] = 0;\n            bsProfit[i - 1] = 0;\n\n            var item = data[i];\n\n            if (item.IndexClose > 0 && lastItem.IndexClose > 0) indexProfit[i - 1] = (item.IndexClose - lastItem.IndexClose) / lastItem.IndexClose;\n            if (item.Net > 0 && lastItem.Net > 0) bsProfit[i - 1] = (item.Net - lastItem.Net) / lastItem.Net;\n            //if (item.Close>0 && lastItem.Close>0) bsProfit[i-1]=(item.Close-lastItem.Close)/lastItem.Close;\n\n            indexProfitTotal += indexProfit[i - 1];\n            bsProfitTotal += bsProfit[i - 1];\n\n            lastItem = item;\n        }\n\n        var averageIndexProfit = indexProfitTotal / indexProfit.length;\n        var averageBSProfit = bsProfitTotal / bsProfit.length;\n\n        var betaCOV = 0; //协方差\n        for (var i = 0; i < indexProfit.length; ++i) {\n            betaCOV += (bsProfit[i] - averageBSProfit) * (indexProfit[i] - averageIndexProfit);\n        }\n\n        var betaVAR = 0; //标准差：方差的开2次方\n        for (var i = 0; i < indexProfit.length; ++i) {\n            betaVAR += (indexProfit[i] - averageIndexProfit) * (indexProfit[i] - averageIndexProfit);\n        }\n\n        return betaCOV / betaVAR;\n    };\n\n    this.Execute = function (obj) //开始计算[ { Name:名字 , Date:起始日期 格式(20180101) }, ....]\n    {\n\n        for (var i in obj) {\n            var item = obj[i];\n            if (this.Data.has(item.Name)) //已经计算过了不计算\n                {\n                    console.log('[RegressionTest::Execute] id=' + i + ' Name=' + item.Name + ' Date:' + item.Date + ' is exsit.');\n                    continue;\n                }\n\n            console.log('[RegressionTest::Execute] id=' + i + ' Name=' + item.Name + ' Date:' + item.Date);\n            var data = this.GetBSData(item.Date);\n            var result = this.Calculate(data);\n            this.Data.set(item.Name, result);\n        }\n    };\n}\n\n//计算叠加数据 (日期必须匹配)\nRegressionTest.CaclulateOverlayData = function (obj) //{Main:主数据, Sub:[]//多组叠加数据}\n{\n    if (!obj.Main || !obj.Sub) return null;\n    var count = obj.Main.length;\n    for (var i in obj.Sub) {\n        var item = obj.Sub[i];\n        if (item.length != count) {\n            console.log('[RegressionTest::OverlayData] id=' + i + ' data count not match. MainData count=' + count);\n            return null;\n        }\n    }\n\n    var result = []; //[0]:主数据 , [1...]:叠加数据 \n\n    var firstData = { Sub: [] };\n    firstData.Main = obj.Main[0];\n    result.push([]);\n    for (var i = 0; i < obj.Sub.length; ++i) {\n        var subData = obj.Sub[i];\n        firstData.Sub[i] = subData[0];\n        result.push([]);\n    }\n\n    for (var i = 0; i < obj.Main.length; ++i) {\n        var value = obj.Main[i];\n        var valuePer = (value - firstData.Main) / firstData.Main;\n        result[0][i] = valuePer;\n\n        for (var j = 0; j < obj.Sub.length; ++j) {\n            var subData = obj.Sub[j];\n            var subValue = subData[i];\n            var subValuePer = (subValue - firstData.Sub[j]) / firstData.Sub[j];\n            result[j + 1][i] = subValuePer;\n        }\n    }\n\n    return result;\n};\n\nRegressionTest.GetPolicyData = function (data) //获取指标数据里面需要计算回测的数据\n{\n    var policyData = { KLineData: null, IndexClose: null, BuyData: null, SellData: null };\n    policyData.KLineData = data.HistoryData.Data; //个股K线数据,\n\n    for (var i in data.OutVar) {\n        var item = data.OutVar[i];\n        if (item.Name == 'INDEXCLOSE') {\n            policyData.IndexClose = item.Data; //绑定大盘收盘数据\n        } else if (item.Name == 'DRAWICON') //买卖盘BS函数\n            {\n                if (item.Draw && item.Draw.Icon) {\n                    if (item.Draw.Icon.ID === 13) policyData.BuyData = item.Draw.DrawData; //买\n                    else if (item.Draw.Icon.ID === 14) policyData.SellData = item.Draw.DrawData; //卖\n                }\n            }\n    }\n\n    if (policyData.KLineData && policyData.BuyData && policyData.SellData) return policyData;\n\n    return null;\n};\n\n/*暴露外部用的方法*/\nexports.default = {\n    RegressionTest: RegressionTest //个股单策略回测\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}