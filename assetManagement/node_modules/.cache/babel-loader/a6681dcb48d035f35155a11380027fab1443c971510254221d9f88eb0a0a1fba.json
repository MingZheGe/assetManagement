{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\n// import axios from \"axios\";\nexport default {\n  name: 'homePage',\n  mounted() {\n    this.test();\n  },\n  methods: {\n    test() {\n      // 官方示例 var myChart = echarts.init(document.getElementById('main'));  \n      const myChart = echarts.init(this.$refs.main); // 我们可以这样写\n      // \n      const time = function () {\n        // 立即执行函数\n        let now = new Date(); // 获得当前的时间\n        let res = []; // 存放时间的数组\n        let len = 5; // 要存几个时间？\n        while (len--) {\n          res.unshift(now.toLocaleTimeString().replace(/^\\D*/, '')); // 转换时间，大家可以打印出来看一下\n          now = new Date(+now - 2000); // 延迟几秒存储一次？\n        }\n\n        return res;\n      }();\n      const dataOne = function () {\n        // 5个随机数，大家可随意定义\n        let res = [];\n        let len = 5;\n        while (len--) {\n          res.push(Math.round(Math.random() * 1000));\n        }\n        return res;\n      }();\n      const dataTwo = function () {\n        // 5个随机数\n        let res = [];\n        let len = 5;\n        while (len--) {\n          res.push(Math.round(Math.random() * 1000));\n        }\n        return res;\n      }();\n      //配置项，可以去查一下官方文档\n      let options = {\n        title: {\n          text: '动态',\n          textStyle: {\n            color: 'black'\n          }\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#283b56'\n            }\n          }\n        },\n        legend: {},\n        xAxis: {\n          type: 'category',\n          data: time,\n          // 把时间组成的数组接过来，放在x轴上\n          boundaryGap: true\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: dataOne,\n          type: 'line',\n          name: '测试一',\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: '最大值'\n            }, {\n              type: 'min',\n              name: '最小值'\n            }]\n          },\n          markLine: {\n            data: [{\n              type: 'average',\n              name: '平均值'\n            }]\n          }\n        }, {\n          data: dataTwo,\n          name: '测试二',\n          type: 'line',\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: '最大值'\n            }, {\n              type: 'min',\n              name: '最小值'\n            }]\n          },\n          markLine: {\n            data: [{\n              type: 'average',\n              name: '平均值'\n            }]\n          }\n        }]\n      };\n      setInterval(function () {\n        let nowTime = new Date().toLocaleTimeString().replace(/^\\D*/, '');\n        time.shift();\n        time.push(nowTime);\n        dataOne.shift();\n        dataOne.push(Math.round(Math.random() * 1000));\n        dataTwo.shift();\n        dataTwo.push(Math.round(Math.random() * 1000));\n        console.log(dataOne);\n        //很多朋友可能要接后端接口,把数据替换下来既可以了\n        // axios.get('你的url').then(res => {\n        //   console.log(res)\n        // })\n        myChart.setOption({\n          xAxis: [{\n            data: time\n          }],\n          series: [{\n            data: dataOne\n          }, {\n            data: dataTwo\n          }]\n        });\n      }, 2000);\n      myChart.setOption(options);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","mounted","test","methods","myChart","init","$refs","main","time","now","Date","res","len","unshift","toLocaleTimeString","replace","dataOne","push","Math","round","random","dataTwo","options","title","text","textStyle","color","tooltip","trigger","axisPointer","type","label","backgroundColor","legend","xAxis","data","boundaryGap","yAxis","series","markPoint","markLine","setInterval","nowTime","shift","console","log","setOption"],"sources":["src/views/test2.vue"],"sourcesContent":["<template>\r\n  <div id=\"main\" style=\"width: 100%;height:600px;\" ref=\"main\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from \"echarts\";\r\n// import axios from \"axios\";\r\nexport default {\r\n  name: 'homePage',\r\n  mounted() {\r\n    this.test()\r\n  },\r\n  methods: {\r\n    test() {\r\n      // 官方示例 var myChart = echarts.init(document.getElementById('main'));  \r\n      const myChart = echarts.init(this.$refs.main); // 我们可以这样写\r\n      // \r\n      const time = (function () { // 立即执行函数\r\n        let now = new Date();  // 获得当前的时间\r\n        let res = []; // 存放时间的数组\r\n        let len = 5; // 要存几个时间？\r\n        while (len--) {\r\n          res.unshift(now.toLocaleTimeString().replace(/^\\D*/, '')); // 转换时间，大家可以打印出来看一下\r\n          now = new Date(+now - 2000) // 延迟几秒存储一次？\r\n        }\r\n        return res;\r\n      })();\r\n      const dataOne = (function () { // 5个随机数，大家可随意定义\r\n        let res = [];\r\n        let len = 5;\r\n        while (len--) {\r\n          res.push(Math.round(Math.random() * 1000));\r\n        }\r\n        return res;\r\n      })();\r\n      const dataTwo = (function () { // 5个随机数\r\n        let res = [];\r\n        let len = 5;\r\n        while (len--) {\r\n          res.push(Math.round(Math.random() * 1000));\r\n        }\r\n        return res;\r\n      })();\r\n      //配置项，可以去查一下官方文档\r\n      let options = {\r\n        title: {\r\n          text: '动态',\r\n          textStyle: {\r\n            color: 'black'\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              backgroundColor: '#283b56'\r\n            }\r\n          }\r\n        },\r\n        legend: {},\r\n        xAxis: {\r\n          type: 'category',\r\n          data: time, // 把时间组成的数组接过来，放在x轴上\r\n          boundaryGap: true\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            data: dataOne,\r\n            type: 'line',\r\n            name: '测试一',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '最大值' },\r\n                { type: 'min', name: '最小值' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [{ type: 'average', name: '平均值' }]\r\n            }\r\n          },\r\n          {\r\n            data: dataTwo,\r\n            name: '测试二',\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '最大值' },\r\n                { type: 'min', name: '最小值' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [{ type: 'average', name: '平均值' }]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      setInterval(function () {\r\n        let nowTime = new Date().toLocaleTimeString().replace(/^\\D*/, '');\r\n        time.shift()\r\n        time.push(nowTime)\r\n        dataOne.shift()\r\n        dataOne.push(Math.round(Math.random() * 1000))\r\n        dataTwo.shift()\r\n        dataTwo.push(Math.round(Math.random() * 1000))\r\n        console.log(dataOne)\r\n        //很多朋友可能要接后端接口,把数据替换下来既可以了\r\n        // axios.get('你的url').then(res => {\r\n        //   console.log(res)\r\n        // })\r\n        myChart.setOption({\r\n          xAxis: [\r\n            {\r\n              data: time\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              data: dataOne\r\n            },\r\n            {\r\n              data: dataTwo\r\n            }\r\n          ]\r\n        })\r\n      }, 2000)\r\n      myChart.setOption(options)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>"],"mappings":";;AAMA,YAAAA,OAAA;AACA;AACA;EACAC,IAAA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,OAAA;IACAD,KAAA;MACA;MACA,MAAAE,OAAA,GAAAL,OAAA,CAAAM,IAAA,MAAAC,KAAA,CAAAC,IAAA;MACA;MACA,MAAAC,IAAA;QAAA;QACA,IAAAC,GAAA,OAAAC,IAAA;QACA,IAAAC,GAAA;QACA,IAAAC,GAAA;QACA,OAAAA,GAAA;UACAD,GAAA,CAAAE,OAAA,CAAAJ,GAAA,CAAAK,kBAAA,GAAAC,OAAA;UACAN,GAAA,OAAAC,IAAA,EAAAD,GAAA;QACA;;QACA,OAAAE,GAAA;MACA;MACA,MAAAK,OAAA;QAAA;QACA,IAAAL,GAAA;QACA,IAAAC,GAAA;QACA,OAAAA,GAAA;UACAD,GAAA,CAAAM,IAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;QACA;QACA,OAAAT,GAAA;MACA;MACA,MAAAU,OAAA;QAAA;QACA,IAAAV,GAAA;QACA,IAAAC,GAAA;QACA,OAAAA,GAAA;UACAD,GAAA,CAAAM,IAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;QACA;QACA,OAAAT,GAAA;MACA;MACA;MACA,IAAAW,OAAA;QACAC,KAAA;UACAC,IAAA;UACAC,SAAA;YACAC,KAAA;UACA;QACA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;YACAC,IAAA;YACAC,KAAA;cACAC,eAAA;YACA;UACA;QACA;QACAC,MAAA;QACAC,KAAA;UACAJ,IAAA;UACAK,IAAA,EAAA3B,IAAA;UAAA;UACA4B,WAAA;QACA;QACAC,KAAA;UACAP,IAAA;QACA;QACAQ,MAAA,GACA;UACAH,IAAA,EAAAnB,OAAA;UACAc,IAAA;UACA9B,IAAA;UACAuC,SAAA;YACAJ,IAAA,GACA;cAAAL,IAAA;cAAA9B,IAAA;YAAA,GACA;cAAA8B,IAAA;cAAA9B,IAAA;YAAA;UAEA;UACAwC,QAAA;YACAL,IAAA;cAAAL,IAAA;cAAA9B,IAAA;YAAA;UACA;QACA,GACA;UACAmC,IAAA,EAAAd,OAAA;UACArB,IAAA;UACA8B,IAAA;UACAS,SAAA;YACAJ,IAAA,GACA;cAAAL,IAAA;cAAA9B,IAAA;YAAA,GACA;cAAA8B,IAAA;cAAA9B,IAAA;YAAA;UAEA;UACAwC,QAAA;YACAL,IAAA;cAAAL,IAAA;cAAA9B,IAAA;YAAA;UACA;QACA;MAEA;MACAyC,WAAA;QACA,IAAAC,OAAA,OAAAhC,IAAA,GAAAI,kBAAA,GAAAC,OAAA;QACAP,IAAA,CAAAmC,KAAA;QACAnC,IAAA,CAAAS,IAAA,CAAAyB,OAAA;QACA1B,OAAA,CAAA2B,KAAA;QACA3B,OAAA,CAAAC,IAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;QACAC,OAAA,CAAAsB,KAAA;QACAtB,OAAA,CAAAJ,IAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;QACAwB,OAAA,CAAAC,GAAA,CAAA7B,OAAA;QACA;QACA;QACA;QACA;QACAZ,OAAA,CAAA0C,SAAA;UACAZ,KAAA,GACA;YACAC,IAAA,EAAA3B;UACA,EACA;UACA8B,MAAA,GACA;YACAH,IAAA,EAAAnB;UACA,GACA;YACAmB,IAAA,EAAAd;UACA;QAEA;MACA;MACAjB,OAAA,CAAA0C,SAAA,CAAAxB,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}