{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  watch: {\n    \"zoom.value\"(val) {\n      const zoom = val / 100;\n      this.jm.view.setZoom(zoom);\n    },\n    selectTypes(v) {\n      this.loopTreeData(this.mind.data.children, item => {\n        if (v.length) {\n          if (v.includes(item.type)) {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].bgcolor, this.bgMap[item.type].fgcolor);\n          } else {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, this.bgMap[item.type].fgcolor);\n          }\n        } else {\n          this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, this.bgMap[item.type].fgcolor);\n        }\n      });\n    }\n  },\n  computed: {\n    pathColor() {\n      return function (type) {\n        return this.structure.active === type ? this.structure.pathActiveColor : this.structure.pathOrginalColor;\n      };\n    },\n    rectColor() {\n      return function (type) {\n        return this.structure.active === type ? this.structure.rectActiveColor : this.structure.rectOrginalColor;\n      };\n    }\n  },\n  data() {\n    return {\n      lista: [],\n      listb: [],\n      input: \"\",\n      mind: {\n        meta: {\n          name: \"脑图\",\n          author: \"\",\n          version: \"0.2\"\n        },\n        format: \"node_tree\",\n        data: {\n          id: \"root\",\n          topic: \"主产品\",\n          type: \"1\",\n          expanded: false,\n          children: [{\n            id: \"table\",\n            type: \"2\",\n            topic: \"<table ><tr><th>Month</th><th>Savings</th></tr><tr><td>January</td><td>$100</td></tr></table>\",\n            width: \"300\",\n            height: \"100\"\n          }]\n        }\n      },\n      options: {\n        container: \"jsmind_container\",\n        // [必选] 容器的ID\n        editable: true,\n        // [可选] 是否启用编辑\n\n        theme: \"\",\n        // [可选] 主题\n        view: {\n          engine: \"svg\",\n          // 思维导图各节点之间线条的绘制引擎\n          hmargin: 120,\n          // 思维导图距容器外框的最小水平距离\n          vmargin: 50,\n          // 思维导图距容器外框的最小垂直距离\n          line_width: 1,\n          // 思维导图线条的粗细\n          line_color: \"\t#DCDCDC\" // 思维导图线条的颜色\n        },\n\n        layout: {\n          hspace: 120,\n          // 节点之间的水平间距\n          vspace: 25,\n          // 节点之间的垂直间距\n          pspace: 14 // 节点与连接线之间的水平间距（用于容纳节点收缩/展开控制器）\n        },\n\n        shortcut: {\n          // 禁用快捷键\n          enable: false\n        }\n      },\n      zoom: {\n        value: 100,\n        // 层级大小\n        min: 10,\n        // 最小层级\n        max: 400 // 最大层级\n      },\n\n      bgMap: {\n        //公司\n        1: {\n          bgcolor: \"#0014B7 \",\n          fgcolor: \" #fff\",\n          original: \"rgb(25, 144, 255)\",\n          transparent: \"rgb(25, 144, 255, 0.2)\"\n        },\n        //产品\n        2: {\n          bgcolor: \"#A16222\",\n          fgcolor: \"#fff\",\n          original: \"rgb(100, 201, 53)\",\n          transparent: \"rgb(100, 201, 53, 0.2)\"\n        },\n        3: {\n          //其他\n          bgcolor: \" \",\n          fgcolor: \"#000\"\n        }\n      },\n      structure: {\n        active: \"right\",\n        pathOrginalColor: \"#2B2F36\",\n        pathActiveColor: \"#3370FF\",\n        rectOrginalColor: \"#C3C6CB\",\n        rectActiveColor: \"#BACEFD\"\n      },\n      dialogVisible: false,\n      selectNodeInfo: {\n        id: null,\n        Name: \"\"\n      },\n      // 选中节点信息\n      tempNodeInfo: null,\n      // 保存修改之前的信息\n      createType: \"\",\n      // 添加平级or子级\n      showMenu: false,\n      // 是否显示右键菜单栏\n      menuStyle: {\n        top: \"\",\n        bottom: \"\",\n        left: \"\",\n        right: \"\"\n      },\n      typeQueue: new Set([\"1\", \"2\", \"3\", \"4\"]),\n      // 选中types Set\n      selectTypes: [\"1\", \"2\", \"3\", \"4\"] // 选中types Array\n    };\n  },\n\n  methods: {\n    search() {\n      // this.jm.show(this.mind);\n      this.jm.update_node(\"root\", this.input);\n      const selectedNode1 = this.jm.get_node(\"root1\");\n      const selectedNode2 = this.jm.get_node(\"root2\");\n      if (selectedNode1.children.length != 0 || selectedNode2.children.length != 0) {\n        this.jm.remove_node(selectedNode1);\n        this.jm.remove_node(selectedNode2);\n        let nodeid = \"root1\";\n        let topic = \"下游产品\";\n        let nodeid2 = \"root2\";\n        let topic2 = \"公司\";\n        let newNode1 = this.jm.add_node(\"root\", nodeid, topic);\n        newNode1.type = \"3\";\n        this.jm.set_node_color(newNode1.id, this.bgMap[newNode1.type].bgcolor, this.bgMap[newNode1.type].fgcolor);\n        let newNode2 = this.jm.add_node(\"root\", nodeid2, topic2);\n        newNode2.type = \"3\";\n        this.jm.set_node_color(newNode2.id, this.bgMap[newNode2.type].bgcolor, this.bgMap[newNode2.type].fgcolor);\n\n        //this.add(newNode2, this.input);\n      }\n\n      const selectedNode1_ = this.jm.get_node(\"root1\");\n      const selectedNode2_ = this.jm.get_node(\"root2\");\n      this.add(selectedNode1_, this.input);\n      this.add(selectedNode2_, this.input);\n    },\n    // 重置视图\n    reset() {\n      document.querySelector(\".root\").scrollIntoView({\n        block: \"center\",\n        behavior: \"smooth\"\n      });\n    },\n    // 缩小\n    zoomOut() {\n      this.jm.view.zoomOut();\n      this.zoom.value = parseInt(this.jm.view.actualZoom * 100);\n    },\n    // 放大\n    zoomIn() {\n      this.jm.view.zoomIn();\n      this.zoom.value = parseInt(this.jm.view.actualZoom * 100);\n    },\n    // 循环树结构\n    loopTreeData(list, callback) {\n      (function doOneFloor(list) {\n        if (Array.isArray(list)) {\n          for (let i = 0; i < list.length; i++) {\n            const item = list[i];\n            callback(item, i);\n            if (item.children && item.children.length > 0) {\n              doOneFloor(item.children);\n            }\n          }\n        }\n      })(list);\n    },\n    // 设置背景颜色\n    setColor() {\n      this.jm.set_node_color(\"root\", this.bgMap[2].bgcolor, this.bgMap[2].fgcolor);\n      this.jm.set_node_font_style(\"root\", 17, \"normal\", \"normal\");\n      this.loopTreeData(this.mind.data.children, item => {\n        if (this.selectTypes.length) {\n          if (this.selectTypes.includes(item.type)) {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].bgcolor, this.bgMap[item.type].fgcolor);\n          } else {\n            this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, \"#fff\");\n          }\n        } else {\n          this.jm.set_node_color(item.id, this.bgMap[item.type].transparent, \"#fff\");\n        }\n      });\n    },\n    // 初始化配置\n    init() {\n      this.jm.view.minZoom = 0.1;\n      this.jm.view.maxZoom = 5;\n      //this.jm.expand_all();\n      let nodeid = \"root1\";\n      let topic = \"下游产品\";\n      let nodeid2 = \"root2\";\n      let topic2 = \"公司\";\n      let newNode1 = this.jm.add_node(\"root\", nodeid, topic);\n      newNode1.type = \"3\";\n      this.jm.set_node_color(newNode1.id, this.bgMap[newNode1.type].bgcolor, this.bgMap[newNode1.type].fgcolor);\n      let newNode2 = this.jm.add_node(\"root\", nodeid2, topic2);\n      newNode2.type = \"3\";\n      this.jm.set_node_color(newNode2.id, this.bgMap[newNode2.type].bgcolor, this.bgMap[newNode2.type].fgcolor);\n      this.setColor();\n\n      //右键菜单\n      this.jm.view.add_event(this.editor, \"contextmenu\", e => {\n        console.log(\"A\");\n        const selectedNode = this.jm.get_selected_node();\n        console.log(selectedNode);\n        if (selectedNode && selectedNode.type) {\n          e.preventDefault();\n          const el = document.querySelector(\".context-menu .el-menu-item\");\n          const width = parseFloat(window.getComputedStyle(el).width);\n          const height = parseFloat(window.getComputedStyle(el).height) * 3 + 12;\n          const windowHeight = window.innerHeight;\n          const windowWidth = window.innerWidth;\n\n          // 极限位置 避免越界\n          if (e.clientY + height > windowHeight) {\n            this.menuStyle.left = e.clientX + \"px\";\n            this.menuStyle.top = \"unset\";\n            this.menuStyle.bottom = 0;\n          } else if (e.clientX + width > windowWidth) {\n            this.menuStyle.top = e.clientY + \"px\";\n            this.menuStyle.left = \"unset\";\n            this.menuStyle.right = 0;\n          } else {\n            this.menuStyle.left = e.clientX + \"px\";\n            this.menuStyle.top = e.clientY + \"px\";\n            this.menuStyle.bottom = \"unset\";\n          }\n          this.showMenu = true;\n        } else {\n          this.showMenu = false;\n        }\n      });\n    },\n    delChild(node) {\n      if (node.children.length != 0) {\n        console.log(node.children);\n        let len = node.children.length;\n        for (var deli = 0; deli < len;) {\n          console.log(node.children[0]);\n          this.jm.remove_node(node.children[0]);\n          deli = deli + 1;\n        }\n      }\n    },\n    // 获取选中标签的 ID\n    get_selected_nodeid() {\n      const selectedNode = this.jm.get_selected_node();\n      if (selectedNode) {\n        return selectedNode.id;\n      } else {\n        return null;\n      }\n    },\n    // 拖拽\n    handleDrop(draggingNode, dropNode) {\n      // 前一个兄弟节点\n      const prevNode = this.jm.find_node_before(dropNode);\n      // 获取移动后的node\n      const dragForm = {\n        modelId: \"\",\n        treeNum: !prevNode ? draggingNode : prevNode.id,\n        thisTreeNum: dropNode\n      };\n      //console.log(\"dragForm\", dragForm);\n\n      // TODO 调接口\n    },\n\n    add(addnode, product) {\n      //console.log(addnode);\n      if (addnode.data && addnode.topic == \"下游产品\") {\n        axios.post(\"http://localhost:8086/index\", {\n          select_name: product,\n          relation: \"下游产品\"\n        }).then(response => {\n          if (!response.data.length) {\n            this.$message({\n              showClose: true,\n              message: \"没有下游产品\"\n            });\n          }\n          this.lista = response.data;\n          var len = this.lista.length;\n          for (var i = 0; i < this.lista.length && i < 12; i++) {\n            let nodeid = jsMind.util.uuid.newid();\n            let topic = this.lista[i];\n            let newNode1 = this.jm.add_node(addnode, nodeid, topic);\n            newNode1.type = \"2\";\n            newNode1.expanded = \"false\";\n            this.jm.set_node_color(newNode1.id, this.bgMap[newNode1.type].bgcolor, this.bgMap[newNode1.type].fgcolor);\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else if (addnode.topic == \"公司\") {\n        axios.post(\"http://localhost:8086/index\", {\n          select_name: product,\n          relation: \"生产公司\"\n        }).then(response => {\n          //console.log(\"生产公司\" + response);\n          if (!response.data.length) {\n            this.$message({\n              showClose: true,\n              message: \"没有所属公司\"\n            });\n          } else {\n            this.listb = response.data;\n            for (var i = 0; i < this.listb.length && i < 12; i++) {\n              let nodeid = jsMind.util.uuid.newid();\n              let topic = this.listb[i];\n              let newNode1 = this.jm.add_node(addnode, nodeid, topic);\n              newNode1.type = \"1\";\n              this.jm.set_node_color(newNode1.id, this.bgMap[newNode1.type].bgcolor, this.bgMap[newNode1.type].fgcolor);\n            }\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        this.$message.error(\"something wrong\");\n      }\n      this.jm.collapse_node(addnode);\n    },\n    nodeClick() {\n      const selectedNode = this.jm.get_selected_node();\n      if (selectedNode.data) {\n        if (selectedNode.children.length != 0) {\n          this.jm.toggle_node(selectedNode);\n        } else if (\n        //没有子节点，产品\n        selectedNode.topic != \"下游产品\" && selectedNode.topic.indexOf(\"公司\") == -1) {\n          let nodeid = jsMind.util.uuid.newid();\n          let topic = \"下游产品\";\n          let nodeid2 = jsMind.util.uuid.newid();\n          let topic2 = \"公司\";\n          let newNode1 = this.jm.add_node(selectedNode, nodeid, topic);\n          newNode1.type = \"3\";\n          this.jm.set_node_color(newNode1.id, this.bgMap[newNode1.type].bgcolor, this.bgMap[newNode1.type].fgcolor);\n          let newNode2 = this.jm.add_node(selectedNode, nodeid2, topic2);\n          newNode2.type = \"3\";\n          this.jm.set_node_color(newNode2.id, this.bgMap[newNode2.type].bgcolor, this.bgMap[newNode2.type].fgcolor);\n        } else {\n          //没有子节点，下游产品或公司\n          if (selectedNode.topic == \"下游产品\" || selectedNode.topic == \"公司\") {\n            let parent = selectedNode.parent;\n            this.add(selectedNode, parent.topic);\n          } else {\n            this.$message.error(\"无\" + selectedNode.topic);\n          }\n        }\n      } else {\n        this.$message.error(\"wrong\");\n      }\n    },\n    delCard() {\n      const selectedNode = this.jm.get_selected_node();\n      /*if (selectedNode.data) {\n        // TODO\n        this.jm.remove_node(selectedNode.id);\n        // 获取数据\n        console.log(this.jm.get_data(\"node_tree\"));\n      } else {\n        this.$message.error(\"请选择卡片\");\n      }\n      this.showMenu = false;*/\n      this.delChild(selectedNode);\n    },\n    // 鼠标滚轮放大缩小\n    mouseWheel() {\n      if (document.addEventListener) {\n        document.addEventListener(\"domMouseScroll\", this.scrollFunc, false);\n      }\n      this.$refs.container.onmousewheel = this.scrollFunc;\n    },\n    // 滚轮缩放\n    scrollFunc(e) {\n      e = e || window.event;\n      if (e.wheelDelta) {\n        if (e.wheelDelta > 0) {\n          this.zoomIn();\n        } else {\n          this.zoomOut();\n        }\n      } else if (e.detail) {\n        if (e.detail > 0) {\n          this.zoomIn();\n        } else {\n          this.zoomOut();\n        }\n      }\n      e.preventDefault();\n      this.jm.resize();\n    },\n    // 导出图片\n    screen_shot() {\n      // 去除透明度\n      this.loopTreeData(this.mind.data.children, item => this.jm.set_node_color(item.id, this.bgMap[item.type].bgcolor, this.bgMap[item.type].fgcolor));\n      try {\n        this.jm.screenshot.shootDownload();\n      } catch (error) {\n        console.log(error);\n      }\n      setTimeout(() => {\n        this.setColor();\n      }, 1000);\n    },\n    // 鼠标拖拽\n    mouseDrag() {\n      // 里层\n      const el = document.querySelector(\".jsmind-inner\");\n      // 选中节点\n      let selected;\n      el.onmousedown = ev => {\n        // 选中节点\n        selected = this.jm.get_selected_node();\n        // 标识 是否拖拽节点 避免冲突\n        this.dragNodeFlag = !!selected;\n        const disX = ev.clientX;\n        const disY = ev.clientY;\n        const originalScrollLeft = el.scrollLeft;\n        const originalScrollTop = el.scrollTop;\n        const originalScrollBehavior = el.style[\"scroll-behavior\"];\n        const originalPointerEvents = el.style[\"pointer-events\"];\n        // auto: 默认值，表示滚动框立即滚动到指定位置。\n        el.style[\"scroll-behavior\"] = \"auto\";\n        // 鼠标移动事件是监听的整个document，这样可以使鼠标能够在元素外部移动的时候也能实现拖动\n        document.onmousemove = ev => {\n          if (this.dragNodeFlag) return;\n          this.drag = false;\n          ev.preventDefault();\n          // 计算拖拽的偏移距离\n          const distanceX = ev.clientX - disX;\n          const distanceY = ev.clientY - disY;\n          el.scrollTo(originalScrollLeft - distanceX, originalScrollTop - distanceY);\n\n          // 在鼠标拖动的时候将点击事件屏蔽掉\n          el.style[\"pointer-events\"] = \"none\";\n          el.style.cursor = \"grabbing\";\n        };\n        document.onmouseup = () => {\n          if (!this.dragNodeFlag) {\n            el.style[\"scroll-behavior\"] = originalScrollBehavior;\n            el.style[\"pointer-events\"] = originalPointerEvents;\n            el.style.cursor = \"grab\";\n          }\n          document.onmousemove = document.onmouseup = null;\n        };\n      };\n    }\n  },\n  mounted() {\n    this.jm = jsMind.show(this.options, this.mind);\n    this.init();\n    this.mouseWheel();\n    this.mouseDrag();\n  },\n  beforeDestroy() {\n    document.removeEventListener(\"domMouseScroll\", this.scrollFunc, false);\n  }\n};","map":{"version":3,"names":["axios","watch","zoom.value","val","zoom","jm","view","setZoom","selectTypes","v","loopTreeData","mind","data","children","item","length","includes","type","set_node_color","id","bgMap","bgcolor","fgcolor","transparent","computed","pathColor","structure","active","pathActiveColor","pathOrginalColor","rectColor","rectActiveColor","rectOrginalColor","lista","listb","input","meta","name","author","version","format","topic","expanded","width","height","options","container","editable","theme","engine","hmargin","vmargin","line_width","line_color","layout","hspace","vspace","pspace","shortcut","enable","value","min","max","original","dialogVisible","selectNodeInfo","Name","tempNodeInfo","createType","showMenu","menuStyle","top","bottom","left","right","typeQueue","Set","methods","search","update_node","selectedNode1","get_node","selectedNode2","remove_node","nodeid","nodeid2","topic2","newNode1","add_node","newNode2","selectedNode1_","selectedNode2_","add","reset","document","querySelector","scrollIntoView","block","behavior","zoomOut","parseInt","actualZoom","zoomIn","list","callback","doOneFloor","Array","isArray","i","setColor","set_node_font_style","init","minZoom","maxZoom","add_event","editor","e","console","log","selectedNode","get_selected_node","preventDefault","el","parseFloat","window","getComputedStyle","windowHeight","innerHeight","windowWidth","innerWidth","clientY","clientX","delChild","node","len","deli","get_selected_nodeid","handleDrop","draggingNode","dropNode","prevNode","find_node_before","dragForm","modelId","treeNum","thisTreeNum","addnode","product","post","select_name","relation","then","response","$message","showClose","message","jsMind","util","uuid","newid","catch","error","collapse_node","nodeClick","toggle_node","indexOf","parent","delCard","mouseWheel","addEventListener","scrollFunc","$refs","onmousewheel","event","wheelDelta","detail","resize","screen_shot","screenshot","shootDownload","setTimeout","mouseDrag","selected","onmousedown","ev","dragNodeFlag","disX","disY","originalScrollLeft","scrollLeft","originalScrollTop","scrollTop","originalScrollBehavior","style","originalPointerEvents","onmousemove","drag","distanceX","distanceY","scrollTo","cursor","onmouseup","mounted","show","beforeDestroy","removeEventListener"],"sources":["src/components/demo.vue"],"sourcesContent":["<template>\n  <div class=\"jsmind\">\n    <!-- 右上角菜单 -->\n    <div class=\"toolbar\">\n      <ul class=\"toolbar-list\">\n        <li class=\"item\">\n          <span\n            size=\"16\"\n            class=\"percent\"\n            style=\"font-size: 14px; color: rgb(29, 29, 31)\"\n            @click=\"zoom.value = 100\"\n            >{{ zoom.value }}%\n          </span>\n          <div class=\"scale-slide\">\n            <ul>\n              <li class=\"normal-item\" title=\"缩小\" @click=\"zoomOut\">\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M12.98 11.95l2.91 2.9c.15.15.15.38 0 .53l-.51.51a.37.37 0 01-.52 0L11.95 13a7.32 7.32 0 111.03-1.03zm-5.66 1.22a5.85 5.85 0 100-11.7 5.85 5.85 0 000 11.7zM4.76 6.6h5.12c.2 0 .37.16.37.36v.73c0 .2-.17.37-.37.37H4.76a.37.37 0 01-.37-.37v-.73c0-.2.16-.36.37-.36z\"\n                    fill=\"#2B2F36\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                </svg>\n              </li>\n\n              <li class=\"slider\">\n                <el-slider\n                  v-model=\"zoom.value\"\n                  :show-tooltip=\"false\"\n                  :min=\"zoom.min\"\n                  :max=\"zoom.max\"\n                ></el-slider>\n              </li>\n\n              <li class=\"normal-item\" title=\"画布放大\" @click=\"zoomIn\">\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M12.98 11.95l2.91 2.9c.15.15.15.38 0 .53l-.51.51a.37.37 0 01-.52 0L11.95 13a7.32 7.32 0 111.03-1.03zm-6.4-5.36V4.76c0-.2.17-.37.37-.37h.73c.2 0 .37.16.37.37v1.83h1.83c.2 0 .37.16.37.36v.73c0 .2-.17.37-.37.37H8.05v1.83c0 .2-.16.37-.37.37h-.73a.37.37 0 01-.36-.37V8.05H4.76a.37.37 0 01-.37-.37v-.73c0-.2.16-.36.37-.36h1.83zm.74 6.58a5.85 5.85 0 100-11.7 5.85 5.85 0 000 11.7z\"\n                    fill=\"#2B2F36\"\n                    fill-rule=\"nonzero\"\n                  ></path>\n                </svg>\n              </li>\n            </ul>\n          </div>\n        </li>\n\n        <div\n          class=\"reset item normal-item\"\n          title=\"定位到中心主题\"\n          @click=\"reset\"\n        >\n          <svg\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M.77 0h3.46c.21 0 .38.17.38.38v.77c0 .22-.17.39-.38.39h-2.7v2.7c0 .2-.16.38-.38.38H.38A.38.38 0 010 4.23V.77C0 .34.34 0 .77 0zm14.45 16h-3.46a.38.38 0 01-.38-.39v-.76c0-.22.17-.39.38-.39h2.7v-2.7c0-.2.17-.38.38-.38h.77c.21 0 .38.18.38.39v3.46c0 .43-.34.77-.77.77zM0 15.23v-3.46c0-.21.17-.39.38-.39h.77c.22 0 .39.18.39.39v2.7h2.69c.21 0 .38.16.38.38v.77c0 .2-.17.38-.38.38H.77a.77.77 0 01-.77-.77zM16 .78v3.46c0 .21-.17.38-.38.38h-.77a.38.38 0 01-.39-.38v-2.7h-2.69a.38.38 0 01-.38-.38V.4c0-.2.17-.38.38-.38h3.46c.43 0 .77.34.77.77zm-8 9.99a2.77 2.77 0 110-5.54 2.77 2.77 0 010 5.54z\"\n              fill=\"#2B2F36\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </svg>\n        </div>\n      </ul>\n    </div>\n    <div class=\"top-bar\">\n      <el-row :gutter=\"20\">\n        <el-col :span=\"6\">\n          <el-input\n            v-model=\"input\"\n            placeholder=\"请输入产品名称\"\n            size=\"medium\"\n          ></el-input\n        ></el-col>\n        <el-col :span=\"3\">\n          <el-button icon=\"el-icon-search\" circle @click=\"search\"></el-button\n        ></el-col>\n        <el-col :span=\"6\" :offset=\"9\"\n          ><span class=\"export\" @click=\"screen_shot\">导出图片</span></el-col\n        >\n      </el-row>\n    </div>\n    <div class=\"jsmind_layout\">\n      <div\n        id=\"jsmind_container\"\n        ref=\"container\"\n        @click=\"nodeClick\"\n        @contextmenu.prevent=\"\"\n      ></div>\n      <el-dialog\n        :title=\"createType === 'bro' ? '插入平级' : '插入子级'\"\n        :visible.sync=\"dialogVisible\"\n        width=\"600px\"\n        @closed=\"form = {}\"\n        :destroy-on-close=\"true\"\n        :lock-scroll=\"false\"\n        :append-to-body=\"true\"\n        v-if=\"selectNodeInfo\"\n      >\n        <el-form label-width=\"80px\" class=\"form-con\">\n          <el-form-item label=\"卡片标题\">\n            <el-input\n              type=\"textarea\"\n              :rows=\"2\"\n              v-model=\"selectNodeInfo.Name\"\n              class=\"ele-width\"\n              maxLength=\"64\"\n            ></el-input>\n          </el-form-item>\n        </el-form>\n        <template v-slot:footer>\n          <div class=\"right mr-10\">\n            <el-button\n              type=\"primary\"\n              class=\"common-btn\"\n              @click=\"sureEditNode\"\n              size=\"medium\"\n              >确 定</el-button\n            >\n          </div>\n        </template>\n      </el-dialog>\n    </div>\n    <!-- 右键菜单 -->\n    <el-menu\n      class=\"context-menu\"\n      v-show=\"showMenu\"\n      :style=\"{\n        left: menuStyle.left,\n        top: menuStyle.top,\n        bottom: menuStyle.bottom,\n        right: menuStyle.right,\n      }\"\n      ref=\"context\"\n    >\n      <slot>\n        <el-menu-item @click=\"query_conditional\">条件查询</el-menu-item>\n        <el-menu-item @click=\"delCard\">隐藏节点</el-menu-item>\n      </slot>\n    </el-menu>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nexport default {\n  watch: {\n    \"zoom.value\"(val) {\n      const zoom = val / 100;\n      this.jm.view.setZoom(zoom);\n    },\n    selectTypes(v) {\n      this.loopTreeData(this.mind.data.children, (item) => {\n        if (v.length) {\n          if (v.includes(item.type)) {\n            this.jm.set_node_color(\n              item.id,\n              this.bgMap[item.type].bgcolor,\n              this.bgMap[item.type].fgcolor\n            );\n          } else {\n            this.jm.set_node_color(\n              item.id,\n              this.bgMap[item.type].transparent,\n              this.bgMap[item.type].fgcolor,\n            );\n          }\n        } else {\n          this.jm.set_node_color(\n            item.id,\n            this.bgMap[item.type].transparent,\n            this.bgMap[item.type].fgcolor,\n          );\n        }\n      });\n    },\n  },\n  computed: {\n    pathColor() {\n      return function (type) {\n        return this.structure.active === type\n          ? this.structure.pathActiveColor\n          : this.structure.pathOrginalColor;\n      };\n    },\n    rectColor() {\n      return function (type) {\n        return this.structure.active === type\n          ? this.structure.rectActiveColor\n          : this.structure.rectOrginalColor;\n      };\n    },\n  },\n  data() {\n    return {\n      lista: [],\n      listb: [],\n      input: \"\",\n      mind: {\n        meta: {\n          name: \"脑图\",\n          author: \"\",\n          version: \"0.2\",\n        },\n        format: \"node_tree\",\n        data: {\n          id: \"root\",\n          topic: \"主产品\",\n          type: \"1\",\n          expanded: false,\n          children:[ {\n              id: \"table\",\n              type: \"2\",\n              topic:\n                \"<table ><tr><th>Month</th><th>Savings</th></tr><tr><td>January</td><td>$100</td></tr></table>\",\n              width: \"300\",\n              height: \"100\",\n            }],\n         \n        },\n\n      },\n      options: {\n        container: \"jsmind_container\", // [必选] 容器的ID\n        editable: true, // [可选] 是否启用编辑\n\n        theme: \"\", // [可选] 主题\n        view: {\n          engine: \"svg\", // 思维导图各节点之间线条的绘制引擎\n          hmargin: 120, // 思维导图距容器外框的最小水平距离\n          vmargin: 50, // 思维导图距容器外框的最小垂直距离\n          line_width: 1, // 思维导图线条的粗细\n          line_color: \"\t#DCDCDC\", // 思维导图线条的颜色\n        },\n        layout: {\n          hspace: 120, // 节点之间的水平间距\n          vspace: 25, // 节点之间的垂直间距\n          pspace: 14, // 节点与连接线之间的水平间距（用于容纳节点收缩/展开控制器）\n        },\n        shortcut: {\n          // 禁用快捷键\n          enable: false,\n        },\n      },\n      zoom: {\n        value: 100, // 层级大小\n        min: 10, // 最小层级\n        max: 400, // 最大层级\n      },\n      bgMap: {\n        //公司\n        1: {\n          bgcolor: \"#0014B7 \",\n          fgcolor: \" #fff\",\n          original: \"rgb(25, 144, 255)\",\n          transparent: \"rgb(25, 144, 255, 0.2)\",\n        },\n        //产品\n        2: {\n          bgcolor:\"#A16222\",\n          fgcolor:\"#fff\",\n          original: \"rgb(100, 201, 53)\",\n          transparent: \"rgb(100, 201, 53, 0.2)\",\n        },\n        3:{\n          //其他\n          bgcolor:\" \",\n          fgcolor:\"#000\"\n\n        }\n      },\n      structure: {\n        active: \"right\",\n        pathOrginalColor: \"#2B2F36\",\n        pathActiveColor: \"#3370FF\",\n        rectOrginalColor: \"#C3C6CB\",\n        rectActiveColor: \"#BACEFD\",\n      },\n      dialogVisible: false,\n      selectNodeInfo: {\n        id: null,\n        Name: \"\",\n      }, // 选中节点信息\n      tempNodeInfo: null, // 保存修改之前的信息\n      createType: \"\", // 添加平级or子级\n      showMenu: false, // 是否显示右键菜单栏\n      menuStyle: {\n        top: \"\",\n        bottom: \"\",\n        left: \"\",\n        right: \"\",\n      },\n      typeQueue: new Set([\"1\", \"2\", \"3\", \"4\"]), // 选中types Set\n      selectTypes: [\"1\", \"2\", \"3\", \"4\"], // 选中types Array\n    };\n  },\n  methods: {\n    search() {\n      // this.jm.show(this.mind);\n      this.jm.update_node(\"root\", this.input);\n      const selectedNode1 = this.jm.get_node(\"root1\");\n      const selectedNode2 = this.jm.get_node(\"root2\");\n      if (\n        selectedNode1.children.length != 0 ||\n        selectedNode2.children.length != 0\n      ) {\n        this.jm.remove_node(selectedNode1);\n        this.jm.remove_node(selectedNode2);\n        let nodeid = \"root1\";\n        let topic = \"下游产品\";\n        let nodeid2 = \"root2\";\n        let topic2 = \"公司\";\n        let newNode1 = this.jm.add_node(\"root\", nodeid, topic);\n        newNode1.type = \"3\";\n        this.jm.set_node_color(\n          newNode1.id,\n          this.bgMap[newNode1.type].bgcolor,\n          this.bgMap[newNode1.type].fgcolor,\n        );\n        let newNode2 = this.jm.add_node(\"root\", nodeid2, topic2);\n        newNode2.type = \"3\";\n        this.jm.set_node_color(\n          newNode2.id,\n          this.bgMap[newNode2.type].bgcolor,\n          this.bgMap[newNode2.type].fgcolor,\n        );\n\n        //this.add(newNode2, this.input);\n      }\n      const selectedNode1_ = this.jm.get_node(\"root1\");\n      const selectedNode2_ = this.jm.get_node(\"root2\");\n      this.add(selectedNode1_, this.input);\n      this.add(selectedNode2_, this.input);\n    },\n\n    // 重置视图\n    reset() {\n      document.querySelector(\".root\").scrollIntoView({\n        block: \"center\",\n        behavior: \"smooth\",\n      });\n    },\n\n    // 缩小\n    zoomOut() {\n      this.jm.view.zoomOut();\n      this.zoom.value = parseInt(this.jm.view.actualZoom * 100);\n    },\n    // 放大\n    zoomIn() {\n      this.jm.view.zoomIn();\n      this.zoom.value = parseInt(this.jm.view.actualZoom * 100);\n    },\n\n    // 循环树结构\n    loopTreeData(list, callback) {\n      (function doOneFloor(list) {\n        if (Array.isArray(list)) {\n          for (let i = 0; i < list.length; i++) {\n            const item = list[i];\n            callback(item, i);\n            if (item.children && item.children.length > 0) {\n              doOneFloor(item.children);\n            }\n          }\n        }\n      })(list);\n    },\n\n    // 设置背景颜色\n    setColor() {\n      this.jm.set_node_color(\"root\", this.bgMap[2].bgcolor, this.bgMap[2].fgcolor);\n      this.jm.set_node_font_style(\"root\", 17, \"normal\", \"normal\" )\n      this.loopTreeData(this.mind.data.children, (item) => {\n        if (this.selectTypes.length) {\n          if (this.selectTypes.includes(item.type)) {\n            this.jm.set_node_color(\n              item.id,\n              this.bgMap[item.type].bgcolor,\n              this.bgMap[item.type].fgcolor,\n            );\n          } else {\n            this.jm.set_node_color(\n              item.id,\n              this.bgMap[item.type].transparent,\n              \"#fff\"\n            );\n          }\n        } else {\n          this.jm.set_node_color(\n            item.id,\n            this.bgMap[item.type].transparent,\n            \"#fff\"\n          );\n        }\n      });\n    },\n\n    // 初始化配置\n    init() {\n      this.jm.view.minZoom = 0.1;\n      this.jm.view.maxZoom = 5;\n      //this.jm.expand_all();\n      let nodeid = \"root1\";\n      let topic = \"下游产品\";\n      let nodeid2 = \"root2\";\n      let topic2 = \"公司\";\n      let newNode1 = this.jm.add_node(\"root\", nodeid, topic);\n      newNode1.type = \"3\";\n      this.jm.set_node_color(\n        newNode1.id,\n        this.bgMap[newNode1.type].bgcolor,\n        this.bgMap[newNode1.type].fgcolor\n      );\n      let newNode2 = this.jm.add_node(\"root\", nodeid2, topic2);\n      newNode2.type = \"3\";\n      this.jm.set_node_color(\n        newNode2.id,\n        this.bgMap[newNode2.type].bgcolor,\n        this.bgMap[newNode2.type].fgcolor,\n      );\n      this.setColor();\n\n      //右键菜单\n      this.jm.view.add_event(this.editor, \"contextmenu\", (e) => {\n        console.log(\"A\");\n        const selectedNode = this.jm.get_selected_node();\n        console.log(selectedNode);\n        if (selectedNode && selectedNode.type) {\n          e.preventDefault();\n          const el = document.querySelector(\".context-menu .el-menu-item\");\n          const width = parseFloat(window.getComputedStyle(el).width);\n          const height =\n            parseFloat(window.getComputedStyle(el).height) * 3 + 12;\n          const windowHeight = window.innerHeight;\n          const windowWidth = window.innerWidth;\n\n          // 极限位置 避免越界\n          if (e.clientY + height > windowHeight) {\n            this.menuStyle.left = e.clientX + \"px\";\n            this.menuStyle.top = \"unset\";\n            this.menuStyle.bottom = 0;\n          } else if (e.clientX + width > windowWidth) {\n            this.menuStyle.top = e.clientY + \"px\";\n            this.menuStyle.left = \"unset\";\n            this.menuStyle.right = 0;\n          } else {\n            this.menuStyle.left = e.clientX + \"px\";\n            this.menuStyle.top = e.clientY + \"px\";\n            this.menuStyle.bottom = \"unset\";\n          }\n          this.showMenu = true;\n        } else {\n          this.showMenu = false;\n        }\n      });\n    },\n    delChild(node){\n      if (node.children.length != 0){\n        console.log(node.children);\n        let len=node.children.length;\n        for(var deli=0;deli<len;)\n        {\n          console.log(node.children[0]);\n          this.jm.remove_node(node.children[0]);\n          deli=deli+1;\n        }\n      }\n    },\n    // 获取选中标签的 ID\n    get_selected_nodeid() {\n      const selectedNode = this.jm.get_selected_node();\n      if (selectedNode) {\n        return selectedNode.id;\n      } else {\n        return null;\n      }\n    },\n    // 拖拽\n    handleDrop(draggingNode, dropNode) {\n      // 前一个兄弟节点\n      const prevNode = this.jm.find_node_before(dropNode);\n      // 获取移动后的node\n      const dragForm = {\n        modelId: \"\",\n        treeNum: !prevNode ? draggingNode : prevNode.id,\n        thisTreeNum: dropNode,\n      };\n      //console.log(\"dragForm\", dragForm);\n\n      // TODO 调接口\n    },\n\n    add(addnode, product) {\n      //console.log(addnode);\n      if (addnode.data && addnode.topic == \"下游产品\") {\n        axios\n          .post(\"http://localhost:8086/index\", {\n            select_name: product,\n            relation: \"下游产品\",\n          })\n          .then((response) => {\n            if (!response.data.length) {\n              this.$message({\n                showClose: true,\n                message: \"没有下游产品\",\n              });\n            }\n            this.lista = response.data;\n            var len = this.lista.length;\n\n            for (var i = 0; i < this.lista.length && i < 12; i++) {\n              let nodeid = jsMind.util.uuid.newid();\n              let topic = this.lista[i];\n              let newNode1 = this.jm.add_node(addnode, nodeid, topic);\n              newNode1.type = \"2\";\n              newNode1.expanded = \"false\";\n\n              this.jm.set_node_color(\n                newNode1.id,\n                this.bgMap[newNode1.type].bgcolor,\n                this.bgMap[newNode1.type].fgcolor,\n              );\n            }\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      } else if (addnode.topic == \"公司\") {\n        axios\n          .post(\"http://localhost:8086/index\", {\n            select_name: product,\n            relation: \"生产公司\",\n          })\n          .then((response) => {\n            //console.log(\"生产公司\" + response);\n            if (!response.data.length) {\n              this.$message({\n                showClose: true,\n                message: \"没有所属公司\",\n              });\n\n            } else {\n              this.listb = response.data;\n\n              for (var i = 0; i < this.listb.length && i < 12; i++) {\n                let nodeid = jsMind.util.uuid.newid();\n                let topic = this.listb[i];\n                let newNode1 = this.jm.add_node(addnode, nodeid, topic);\n                newNode1.type = \"1\";\n                this.jm.set_node_color(\n                  newNode1.id,\n                  this.bgMap[newNode1.type].bgcolor,\n                  this.bgMap[newNode1.type].fgcolor,\n                );\n              }\n            }\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      } else {\n        this.$message.error(\"something wrong\");\n      }\n      this.jm.collapse_node(addnode);\n    },\n    nodeClick() {\n      const selectedNode = this.jm.get_selected_node();\n      if (selectedNode.data) {\n        if (selectedNode.children.length != 0) {\n          this.jm.toggle_node(selectedNode);\n        } else if (\n          //没有子节点，产品\n          selectedNode.topic != \"下游产品\" &&\n          selectedNode.topic.indexOf(\"公司\") == -1\n        ) {\n          let nodeid = jsMind.util.uuid.newid();\n          let topic = \"下游产品\";\n          let nodeid2 = jsMind.util.uuid.newid();\n          let topic2 = \"公司\";\n          let newNode1 = this.jm.add_node(selectedNode, nodeid, topic);\n          newNode1.type = \"3\";\n          this.jm.set_node_color(\n            newNode1.id,\n            this.bgMap[newNode1.type].bgcolor,\n            this.bgMap[newNode1.type].fgcolor,\n          );\n          let newNode2 = this.jm.add_node(selectedNode, nodeid2, topic2);\n          newNode2.type = \"3\";\n          this.jm.set_node_color(\n            newNode2.id,\n            this.bgMap[newNode2.type].bgcolor,\n            this.bgMap[newNode2.type].fgcolor,\n          );\n        } else {\n          //没有子节点，下游产品或公司\n          if (\n            selectedNode.topic == \"下游产品\" ||\n            selectedNode.topic == \"公司\"\n          ) {\n            let parent = selectedNode.parent;\n            this.add(selectedNode, parent.topic);\n          } else {\n            this.$message.error(\"无\" + selectedNode.topic);\n          }\n        }\n      } else {\n        this.$message.error(\"wrong\");\n      }\n    },\n    delCard() {\n      const selectedNode = this.jm.get_selected_node();\n      /*if (selectedNode.data) {\n        // TODO\n        this.jm.remove_node(selectedNode.id);\n        // 获取数据\n        console.log(this.jm.get_data(\"node_tree\"));\n      } else {\n        this.$message.error(\"请选择卡片\");\n      }\n      this.showMenu = false;*/\n      this.delChild(selectedNode);\n    },\n    // 鼠标滚轮放大缩小\n    mouseWheel() {\n      if (document.addEventListener) {\n        document.addEventListener(\"domMouseScroll\", this.scrollFunc, false);\n      }\n      this.$refs.container.onmousewheel = this.scrollFunc;\n    },\n    // 滚轮缩放\n    scrollFunc(e) {\n      e = e || window.event;\n      if (e.wheelDelta) {\n        if (e.wheelDelta > 0) {\n          this.zoomIn();\n        } else {\n          this.zoomOut();\n        }\n      } else if (e.detail) {\n        if (e.detail > 0) {\n          this.zoomIn();\n        } else {\n          this.zoomOut();\n        }\n      }\n      e.preventDefault();\n      this.jm.resize();\n    },\n\n    // 导出图片\n    screen_shot() {\n      // 去除透明度\n      this.loopTreeData(this.mind.data.children, (item) =>\n        this.jm.set_node_color(item.id, this.bgMap[item.type].bgcolor, this.bgMap[item.type].fgcolor)\n      );\n      try {\n        this.jm.screenshot.shootDownload();\n      } catch (error) {\n        console.log(error);\n      }\n      setTimeout(() => {\n        this.setColor();\n      }, 1000);\n    },\n    // 鼠标拖拽\n    mouseDrag() {\n      // 里层\n      const el = document.querySelector(\".jsmind-inner\");\n      // 选中节点\n      let selected;\n\n      el.onmousedown = (ev) => {\n        // 选中节点\n        selected = this.jm.get_selected_node();\n        // 标识 是否拖拽节点 避免冲突\n        this.dragNodeFlag = !!selected;\n\n        const disX = ev.clientX;\n        const disY = ev.clientY;\n        const originalScrollLeft = el.scrollLeft;\n        const originalScrollTop = el.scrollTop;\n        const originalScrollBehavior = el.style[\"scroll-behavior\"];\n        const originalPointerEvents = el.style[\"pointer-events\"];\n        // auto: 默认值，表示滚动框立即滚动到指定位置。\n        el.style[\"scroll-behavior\"] = \"auto\";\n        // 鼠标移动事件是监听的整个document，这样可以使鼠标能够在元素外部移动的时候也能实现拖动\n        document.onmousemove = (ev) => {\n          if (this.dragNodeFlag) return;\n          this.drag = false;\n          ev.preventDefault();\n          // 计算拖拽的偏移距离\n          const distanceX = ev.clientX - disX;\n          const distanceY = ev.clientY - disY;\n\n          el.scrollTo(\n            originalScrollLeft - distanceX,\n            originalScrollTop - distanceY\n          );\n\n          // 在鼠标拖动的时候将点击事件屏蔽掉\n          el.style[\"pointer-events\"] = \"none\";\n          el.style.cursor = \"grabbing\";\n        };\n        document.onmouseup = () => {\n          if (!this.dragNodeFlag) {\n            el.style[\"scroll-behavior\"] = originalScrollBehavior;\n            el.style[\"pointer-events\"] = originalPointerEvents;\n            el.style.cursor = \"grab\";\n          }\n          document.onmousemove = document.onmouseup = null;\n        };\n      };\n    },\n  },\n  mounted() {\n    this.jm = jsMind.show(this.options, this.mind);\n    this.init();\n    this.mouseWheel();\n    this.mouseDrag();\n  },\n  beforeDestroy() {\n    document.removeEventListener(\"domMouseScroll\", this.scrollFunc, false);\n  },\n};\n</script>\n\n<style lang=\"less\">\n@import \"../assets/css/style.less\";\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}