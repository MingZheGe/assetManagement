{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\nimport SZHourData from \"./data/hourData.TS\";\nexport default {\n  data() {\n    return {\n      upcolor: \"#FF0000\",\n      //增长颜色\n      upBorderColor: \"#8A0000\",\n      downColor: \"#008000\",\n      // 下跌颜色\n      downBorderColor: \"#008F28\",\n      klineData: [],\n      //k线图数据\n      hourData: [],\n      //charts表格小时数据\n      xData: [],\n      culomnColor: [],\n      //颜色\n      culomnValue: []\n    };\n  },\n  mounted() {\n    // 数据初始化\n    this.initData();\n    // 图标初始化\n    this.initEcharts();\n  },\n  methods: {\n    initData() {\n      this.klineData = SZHourData.priceinfo;\n      this.hourData = this.splitData(this.klineData);\n      this.initxData();\n    },\n    initEcharts() {\n      const option = {\n        title: {\n          text: \"上证指数\",\n          left: 0\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\" //十字准星指示器\n          },\n\n          borderWidth: 1,\n          borderColor: \"#ccc\",\n          padding: 10,\n          textStyle: {\n            color: \"#000\"\n          },\n          formatter: function (param) {\n            param = param[0];\n            return [\"时间: \" + param.data[6] + '<hr size=1 style=\"margin: 3px 0\">', \"价格: \" + param.data[1] + \"<br/>\", \"涨跌额: \" + param.data[2] + \"<br/>\", \"成交量: \" + param.data[3] + \"<br/>\", \"涨跌幅: \" + param.data[4] + \"<br/>\"].join(\"\");\n          }\n        },\n        visualMap: {\n          type: \"piecewise\",\n          show: false,\n          //不展示map，只应用对应颜色划分逻辑\n          seriesIndex: 1,\n          //指定取哪个系列的数据\n          dimension: 2,\n          // 定义每一段的颜色\n          pieces: [{\n            value: -1,\n            color: this.downColor\n          }, {\n            value: 1,\n            color: this.upcolor\n          }]\n        },\n        // 图像位置配置\n        grid: [{\n          left: \"10%\",\n          right: \"10%\",\n          height: \"50%\"\n        }, {\n          left: \"10%\",\n          right: \"10%\",\n          top: \"65%\",\n          height: \"18%\"\n        }],\n        // 横坐标数据\n        xAxis: [\n        // 折线图\n        {\n          type: \"category\",\n          data: this.xData,\n          boundaryGap: false,\n          axisLine: {\n            onZero: false\n          },\n          splitLine: {\n            show: false\n          },\n          min: \"dataMin\",\n          max: \"dataMax\"\n        },\n        // 柱状图\n        {\n          type: \"category\",\n          gridIndex: 1,\n          //x 轴所在的 grid 的索引，默认位于第一个 grid。\n          data: this.xData,\n          boundaryGap: false,\n          axisLine: {\n            onZero: false\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: false\n          },\n          min: \"dataMin\",\n          max: \"dataMax\"\n        }],\n        // 纵坐标配置\n        yAxis: [{\n          scale: true,\n          splitArea: {\n            show: true\n          }\n        }, {\n          scale: true,\n          gridIndex: 1,\n          // y 轴所在的 grid 的索引，默认位于第一个 grid\n          splitNumber: 2,\n          axisLabel: {\n            show: false\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            show: false\n          }\n        }],\n        dataZoom: [{\n          type: \"inside\",\n          xAxisIndex: [0, 1],\n          start: 50,\n          //展示的数据范围，默认为50%-100%\n          end: 100\n        }, {\n          show: true,\n          xAxisIndex: [0, 1],\n          type: \"slider\",\n          top: \"90%\",\n          start: 50,\n          //展示的数据范围，默认为50%-100%\n          end: 100\n        }],\n        series: [{\n          type: \"line\",\n          data: this.hourData,\n          symbol: \"none\",\n          //无标记图案\n          lineStyle: {\n            width: 1\n          }\n        }, {\n          name: \"Volume\",\n          type: \"bar\",\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          data: this.culomnValue\n        }]\n      };\n      const myChart = echarts.init(document.getElementById(\"mychart\"));\n      myChart.setOption(option);\n      //随着屏幕大小调节图表\n      window.addEventListener(\"resize\", () => {\n        myChart.resize();\n      });\n    },\n    // 横坐标数据处理\n    initxData() {\n      for (let i = 0; i < this.klineData.length; i++) {\n        this.xData[i] = this.klineData[i].datetime;\n      }\n      this.initCulomnColor();\n    },\n    // 初始化交易数据和交易柱状图颜色参数\n    initCulomnColor() {\n      this.culomnColor[0] = this.klineData[0].increase > 0 ? 1 : -1;\n      this.culomnValue[0] = [0, this.klineData[0].volume, -1];\n      for (let i = 1; i < this.klineData.length; i++) {\n        this.culomnColor[i] = this.klineData[i].price > this.klineData[i - 1].price ? 1 : -1;\n        this.culomnValue[i] = [i, this.klineData[i].volume, this.culomnColor[i]];\n      }\n    },\n    // 数据计算以及拆分，将json数据转为数组数据\n    splitData(jsonData) {\n      const hourData = [];\n      for (let i = 0; i < jsonData.length; i++) {\n        hourData.push([i, jsonData[i].price, jsonData[i].increase, jsonData[i].volume, jsonData[i].ratio, jsonData[i].amount, jsonData[i].datetime]);\n      }\n      return hourData;\n    }\n  }\n};","map":{"version":3,"names":["echarts","SZHourData","data","upcolor","upBorderColor","downColor","downBorderColor","klineData","hourData","xData","culomnColor","culomnValue","mounted","initData","initEcharts","methods","priceinfo","splitData","initxData","option","title","text","left","tooltip","trigger","axisPointer","type","borderWidth","borderColor","padding","textStyle","color","formatter","param","join","visualMap","show","seriesIndex","dimension","pieces","value","grid","right","height","top","xAxis","boundaryGap","axisLine","onZero","splitLine","min","max","gridIndex","axisTick","axisLabel","yAxis","scale","splitArea","splitNumber","dataZoom","xAxisIndex","start","end","series","symbol","lineStyle","width","name","yAxisIndex","myChart","init","document","getElementById","setOption","window","addEventListener","resize","i","length","datetime","initCulomnColor","increase","volume","price","jsonData","push","ratio","amount"],"sources":["src/views/test2.vue"],"sourcesContent":["<template>\r\n  <div class=\"echart\" id=\"mychart\" style=\"width:100%; height: 500px;\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from \"echarts\";\r\nimport SZHourData from \"./data/hourData.TS\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      upcolor: \"#FF0000\", //增长颜色\r\n      upBorderColor: \"#8A0000\",\r\n      downColor: \"#008000\", // 下跌颜色\r\n      downBorderColor: \"#008F28\",\r\n      klineData: [], //k线图数据\r\n      hourData: [], //charts表格小时数据\r\n      xData: [],\r\n      culomnColor: [], //颜色\r\n      culomnValue: []\r\n    };\r\n  },\r\n  mounted() {\r\n    // 数据初始化\r\n    this.initData();\r\n    // 图标初始化\r\n    this.initEcharts();\r\n  },\r\n  methods: {\r\n    initData() {\r\n      this.klineData = SZHourData.priceinfo;\r\n      this.hourData = this.splitData(this.klineData);\r\n      this.initxData();\r\n    },\r\n    initEcharts() {\r\n      const option = {\r\n        title: {\r\n          text: \"上证指数\",\r\n          left: 0\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"cross\" //十字准星指示器\r\n          },\r\n          borderWidth: 1,\r\n          borderColor: \"#ccc\",\r\n          padding: 10,\r\n          textStyle: {\r\n            color: \"#000\"\r\n          },\r\n          formatter: function(param) {\r\n            param = param[0];\r\n            return [\r\n              \"时间: \" + param.data[6] + '<hr size=1 style=\"margin: 3px 0\">',\r\n              \"价格: \" + param.data[1] + \"<br/>\",\r\n              \"涨跌额: \" + param.data[2] + \"<br/>\",\r\n              \"成交量: \" + param.data[3] + \"<br/>\",\r\n              \"涨跌幅: \" + param.data[4] + \"<br/>\"\r\n            ].join(\"\");\r\n          }\r\n        },\r\n\r\n        visualMap: {\r\n          type: \"piecewise\",\r\n          show: false, //不展示map，只应用对应颜色划分逻辑\r\n          seriesIndex: 1, //指定取哪个系列的数据\r\n          dimension: 2,\r\n          // 定义每一段的颜色\r\n          pieces: [\r\n            {\r\n              value: -1,\r\n              color: this.downColor\r\n            },\r\n            {\r\n              value: 1,\r\n              color: this.upcolor\r\n            }\r\n          ]\r\n        },\r\n        // 图像位置配置\r\n        grid: [\r\n          {\r\n            left: \"10%\",\r\n            right: \"10%\",\r\n            height: \"50%\"\r\n          },\r\n          {\r\n            left: \"10%\",\r\n            right: \"10%\",\r\n            top: \"65%\",\r\n            height: \"18%\"\r\n          }\r\n        ],\r\n        // 横坐标数据\r\n        xAxis: [\r\n          // 折线图\r\n          {\r\n            type: \"category\",\r\n            data: this.xData,\r\n            boundaryGap: false,\r\n            axisLine: { onZero: false },\r\n            splitLine: { show: false },\r\n            min: \"dataMin\",\r\n            max: \"dataMax\"\r\n          },\r\n          // 柱状图\r\n          {\r\n            type: \"category\",\r\n            gridIndex: 1, //x 轴所在的 grid 的索引，默认位于第一个 grid。\r\n            data: this.xData,\r\n            boundaryGap: false,\r\n            axisLine: { onZero: false },\r\n            axisTick: { show: false },\r\n            splitLine: { show: false },\r\n            axisLabel: { show: false },\r\n            min: \"dataMin\",\r\n            max: \"dataMax\"\r\n          }\r\n        ],\r\n        // 纵坐标配置\r\n        yAxis: [\r\n          {\r\n            scale: true,\r\n            splitArea: {\r\n              show: true\r\n            }\r\n          },\r\n          {\r\n            scale: true,\r\n            gridIndex: 1, // y 轴所在的 grid 的索引，默认位于第一个 grid\r\n            splitNumber: 2,\r\n            axisLabel: { show: false },\r\n            axisLine: { show: false },\r\n            axisTick: { show: false },\r\n            splitLine: { show: false }\r\n          }\r\n        ],\r\n        dataZoom: [\r\n          {\r\n            type: \"inside\",\r\n            xAxisIndex: [0, 1],\r\n            start: 50, //展示的数据范围，默认为50%-100%\r\n            end: 100\r\n          },\r\n          {\r\n            show: true,\r\n            xAxisIndex: [0, 1],\r\n            type: \"slider\",\r\n            top: \"90%\",\r\n            start: 50, //展示的数据范围，默认为50%-100%\r\n            end: 100\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            type: \"line\",\r\n            data: this.hourData,\r\n            symbol: \"none\", //无标记图案\r\n            lineStyle: {\r\n              width: 1\r\n            }\r\n          },\r\n          {\r\n            name: \"Volume\",\r\n            type: \"bar\",\r\n            xAxisIndex: 1,\r\n            yAxisIndex: 1,\r\n            data: this.culomnValue\r\n          }\r\n        ]\r\n      };\r\n      const myChart = echarts.init(document.getElementById(\"mychart\"));\r\n      myChart.setOption(option);\r\n      //随着屏幕大小调节图表\r\n      window.addEventListener(\"resize\", () => {\r\n        myChart.resize();\r\n      });\r\n    },\r\n    // 横坐标数据处理\r\n    initxData() {\r\n      for (let i = 0; i < this.klineData.length; i++) {\r\n        this.xData[i] = this.klineData[i].datetime;\r\n      }\r\n      this.initCulomnColor();\r\n    },\r\n    // 初始化交易数据和交易柱状图颜色参数\r\n    initCulomnColor() {\r\n      this.culomnColor[0] = this.klineData[0].increase > 0 ? 1 : -1;\r\n      this.culomnValue[0] = [0, this.klineData[0].volume, -1];\r\n      for (let i = 1; i < this.klineData.length; i++) {\r\n        this.culomnColor[i] =\r\n          this.klineData[i].price > this.klineData[i - 1].price ? 1 : -1;\r\n        this.culomnValue[i] = [\r\n          i,\r\n          this.klineData[i].volume,\r\n          this.culomnColor[i]\r\n        ];\r\n      }\r\n    },\r\n    // 数据计算以及拆分，将json数据转为数组数据\r\n    splitData(jsonData) {\r\n      const hourData = [];\r\n      for (let i = 0; i < jsonData.length; i++) {\r\n        hourData.push([\r\n          i,\r\n          jsonData[i].price,\r\n          jsonData[i].increase,\r\n          jsonData[i].volume,\r\n          jsonData[i].ratio,\r\n          jsonData[i].amount,\r\n          jsonData[i].datetime\r\n        ]);\r\n      }\r\n      return hourData;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}